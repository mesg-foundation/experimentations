import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding'
import { GraphQLResolveInfo } from 'graphql'

const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Command implements Node {
  id: ID!
  title: String!
  description: String
  arguments(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parameter!]
}

type Event implements Node {
  id: ID!
  title: String!
  description: String
  data(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parameter!]
}

type FilterDefinition implements Node {
  id: ID!
  parameter(where: ParameterWhereInput): Parameter!
  predicate: PREDICATE!
  value: String!
}

type Parameter implements Node {
  id: ID!
  title: String!
  description: String
  type: TYPE!
  required: Boolean!
}

type Runner implements Node {
  id: ID!
  publicKey: String!
  stake: Float!
  reliability: Float!
  sourceWhitelisted(where: WorkflowSourceWhereInput, orderBy: WorkflowSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowSource!]
  sourceBlacklisted(where: WorkflowSourceWhereInput, orderBy: WorkflowSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowSource!]
  commandWhitelisted(where: WorkflowCommandWhereInput, orderBy: WorkflowCommandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowCommand!]
  commandBlacklisted(where: WorkflowCommandWhereInput, orderBy: WorkflowCommandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowCommand!]
}

type Service implements Node {
  id: ID!
  title: String!
  description: String
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  commands(where: CommandWhereInput, orderBy: CommandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Command!]
}

type Workflow implements Node {
  id: ID!
  title: String!
  description: String
  source(where: WorkflowSourceWhereInput): WorkflowSource!
  commands(where: WorkflowCommandWhereInput, orderBy: WorkflowCommandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowCommand!]
  executions(where: WorkflowExecutionWhereInput, orderBy: WorkflowExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowExecution!]
}

type WorkflowCommand implements Node {
  id: ID!
  whitelist(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner!]
  blacklist(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner!]
  service(where: ServiceWhereInput): Service!
  command(where: CommandWhereInput): Command!
  parameters(where: WorkflowResultWhereInput): WorkflowResult!
}

type WorkflowCommandExecution implements Node {
  id: ID!
  duration: Int!
  fee: Int!
  results(where: WorkflowResultWhereInput, orderBy: WorkflowResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowResult!]
}

type WorkflowConstant implements Node {
  id: ID!
  value: String!
}

type WorkflowExecution implements Node {
  id: ID!
  duration: Int!
  fee: Int!
  commandExecutions(where: WorkflowCommandExecutionWhereInput, orderBy: WorkflowCommandExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowCommandExecution!]
}

type WorkflowResult implements Node {
  id: ID!
  reference(where: ParameterWhereInput): Parameter!
  value: String!
}

type WorkflowSource implements Node {
  id: ID!
  whitelist(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner!]
  blacklist(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner!]
  service(where: ServiceWhereInput): Service!
  event(where: EventWhereInput): Event!
  filters(where: FilterDefinitionWhereInput, orderBy: FilterDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FilterDefinition!]
}


#
# Other Types
#

type AggregateCommand {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateFilterDefinition {
  count: Int!
}

type AggregateParameter {
  count: Int!
}

type AggregateRunner {
  count: Int!
}

type AggregateService {
  count: Int!
}

type AggregateWorkflow {
  count: Int!
}

type AggregateWorkflowCommand {
  count: Int!
}

type AggregateWorkflowCommandExecution {
  count: Int!
}

type AggregateWorkflowConstant {
  count: Int!
}

type AggregateWorkflowExecution {
  count: Int!
}

type AggregateWorkflowResult {
  count: Int!
}

type AggregateWorkflowSource {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type CommandConnection {
  pageInfo: PageInfo!
  edges: [CommandEdge]!
  aggregate: AggregateCommand!
}

input CommandCreateInput {
  title: String!
  description: String
  arguments: ParameterCreateManyInput
}

input CommandCreateManyInput {
  create: [CommandCreateInput!]
  connect: [CommandWhereUniqueInput!]
}

input CommandCreateOneInput {
  create: CommandCreateInput
  connect: CommandWhereUniqueInput
}

type CommandEdge {
  node: Command!
  cursor: String!
}

enum CommandOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommandPreviousValues {
  id: ID!
  title: String!
  description: String
}

type CommandSubscriptionPayload {
  mutation: MutationType!
  node: Command
  updatedFields: [String!]
  previousValues: CommandPreviousValues
}

input CommandSubscriptionWhereInput {
  AND: [CommandSubscriptionWhereInput!]
  OR: [CommandSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommandWhereInput
}

input CommandUpdateInput {
  title: String
  description: String
  arguments: ParameterUpdateManyInput
}

input CommandUpdateManyInput {
  create: [CommandCreateInput!]
  connect: [CommandWhereUniqueInput!]
  disconnect: [CommandWhereUniqueInput!]
  delete: [CommandWhereUniqueInput!]
}

input CommandUpdateOneInput {
  create: CommandCreateInput
  connect: CommandWhereUniqueInput
  disconnect: CommandWhereUniqueInput
  delete: CommandWhereUniqueInput
}

input CommandWhereInput {
  AND: [CommandWhereInput!]
  OR: [CommandWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  arguments_every: ParameterWhereInput
  arguments_some: ParameterWhereInput
  arguments_none: ParameterWhereInput
}

input CommandWhereUniqueInput {
  id: ID
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  title: String!
  description: String
  data: ParameterCreateManyInput
}

input EventCreateManyInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateOneInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  description: String
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  title: String
  description: String
  data: ParameterUpdateManyInput
}

input EventUpdateManyInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
}

input EventUpdateOneInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: EventWhereUniqueInput
  delete: EventWhereUniqueInput
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  data_every: ParameterWhereInput
  data_some: ParameterWhereInput
  data_none: ParameterWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type FilterDefinitionConnection {
  pageInfo: PageInfo!
  edges: [FilterDefinitionEdge]!
  aggregate: AggregateFilterDefinition!
}

input FilterDefinitionCreateInput {
  predicate: PREDICATE
  value: String!
  parameter: ParameterCreateOneInput!
}

input FilterDefinitionCreateManyInput {
  create: [FilterDefinitionCreateInput!]
  connect: [FilterDefinitionWhereUniqueInput!]
}

type FilterDefinitionEdge {
  node: FilterDefinition!
  cursor: String!
}

enum FilterDefinitionOrderByInput {
  id_ASC
  id_DESC
  predicate_ASC
  predicate_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FilterDefinitionPreviousValues {
  id: ID!
  predicate: PREDICATE!
  value: String!
}

type FilterDefinitionSubscriptionPayload {
  mutation: MutationType!
  node: FilterDefinition
  updatedFields: [String!]
  previousValues: FilterDefinitionPreviousValues
}

input FilterDefinitionSubscriptionWhereInput {
  AND: [FilterDefinitionSubscriptionWhereInput!]
  OR: [FilterDefinitionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FilterDefinitionWhereInput
}

input FilterDefinitionUpdateInput {
  predicate: PREDICATE
  value: String
  parameter: ParameterUpdateOneInput
}

input FilterDefinitionUpdateManyInput {
  create: [FilterDefinitionCreateInput!]
  connect: [FilterDefinitionWhereUniqueInput!]
  disconnect: [FilterDefinitionWhereUniqueInput!]
  delete: [FilterDefinitionWhereUniqueInput!]
}

input FilterDefinitionWhereInput {
  AND: [FilterDefinitionWhereInput!]
  OR: [FilterDefinitionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  predicate: PREDICATE
  predicate_not: PREDICATE
  predicate_in: [PREDICATE!]
  predicate_not_in: [PREDICATE!]
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  parameter: ParameterWhereInput
}

input FilterDefinitionWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createRunner(data: RunnerCreateInput!): Runner!
  createParameter(data: ParameterCreateInput!): Parameter!
  createFilterDefinition(data: FilterDefinitionCreateInput!): FilterDefinition!
  createEvent(data: EventCreateInput!): Event!
  createCommand(data: CommandCreateInput!): Command!
  createService(data: ServiceCreateInput!): Service!
  createWorkflowConstant(data: WorkflowConstantCreateInput!): WorkflowConstant!
  createWorkflowSource(data: WorkflowSourceCreateInput!): WorkflowSource!
  createWorkflowCommand(data: WorkflowCommandCreateInput!): WorkflowCommand!
  createWorkflowResult(data: WorkflowResultCreateInput!): WorkflowResult!
  createWorkflow(data: WorkflowCreateInput!): Workflow!
  createWorkflowExecution(data: WorkflowExecutionCreateInput!): WorkflowExecution!
  createWorkflowCommandExecution(data: WorkflowCommandExecutionCreateInput!): WorkflowCommandExecution!
  updateRunner(data: RunnerUpdateInput!, where: RunnerWhereUniqueInput!): Runner
  updateParameter(data: ParameterUpdateInput!, where: ParameterWhereUniqueInput!): Parameter
  updateFilterDefinition(data: FilterDefinitionUpdateInput!, where: FilterDefinitionWhereUniqueInput!): FilterDefinition
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateCommand(data: CommandUpdateInput!, where: CommandWhereUniqueInput!): Command
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service
  updateWorkflowConstant(data: WorkflowConstantUpdateInput!, where: WorkflowConstantWhereUniqueInput!): WorkflowConstant
  updateWorkflowSource(data: WorkflowSourceUpdateInput!, where: WorkflowSourceWhereUniqueInput!): WorkflowSource
  updateWorkflowCommand(data: WorkflowCommandUpdateInput!, where: WorkflowCommandWhereUniqueInput!): WorkflowCommand
  updateWorkflowResult(data: WorkflowResultUpdateInput!, where: WorkflowResultWhereUniqueInput!): WorkflowResult
  updateWorkflow(data: WorkflowUpdateInput!, where: WorkflowWhereUniqueInput!): Workflow
  updateWorkflowExecution(data: WorkflowExecutionUpdateInput!, where: WorkflowExecutionWhereUniqueInput!): WorkflowExecution
  updateWorkflowCommandExecution(data: WorkflowCommandExecutionUpdateInput!, where: WorkflowCommandExecutionWhereUniqueInput!): WorkflowCommandExecution
  deleteRunner(where: RunnerWhereUniqueInput!): Runner
  deleteParameter(where: ParameterWhereUniqueInput!): Parameter
  deleteFilterDefinition(where: FilterDefinitionWhereUniqueInput!): FilterDefinition
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteCommand(where: CommandWhereUniqueInput!): Command
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteWorkflowConstant(where: WorkflowConstantWhereUniqueInput!): WorkflowConstant
  deleteWorkflowSource(where: WorkflowSourceWhereUniqueInput!): WorkflowSource
  deleteWorkflowCommand(where: WorkflowCommandWhereUniqueInput!): WorkflowCommand
  deleteWorkflowResult(where: WorkflowResultWhereUniqueInput!): WorkflowResult
  deleteWorkflow(where: WorkflowWhereUniqueInput!): Workflow
  deleteWorkflowExecution(where: WorkflowExecutionWhereUniqueInput!): WorkflowExecution
  deleteWorkflowCommandExecution(where: WorkflowCommandExecutionWhereUniqueInput!): WorkflowCommandExecution
  upsertRunner(where: RunnerWhereUniqueInput!, create: RunnerCreateInput!, update: RunnerUpdateInput!): Runner!
  upsertParameter(where: ParameterWhereUniqueInput!, create: ParameterCreateInput!, update: ParameterUpdateInput!): Parameter!
  upsertFilterDefinition(where: FilterDefinitionWhereUniqueInput!, create: FilterDefinitionCreateInput!, update: FilterDefinitionUpdateInput!): FilterDefinition!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertCommand(where: CommandWhereUniqueInput!, create: CommandCreateInput!, update: CommandUpdateInput!): Command!
  upsertService(where: ServiceWhereUniqueInput!, create: ServiceCreateInput!, update: ServiceUpdateInput!): Service!
  upsertWorkflowConstant(where: WorkflowConstantWhereUniqueInput!, create: WorkflowConstantCreateInput!, update: WorkflowConstantUpdateInput!): WorkflowConstant!
  upsertWorkflowSource(where: WorkflowSourceWhereUniqueInput!, create: WorkflowSourceCreateInput!, update: WorkflowSourceUpdateInput!): WorkflowSource!
  upsertWorkflowCommand(where: WorkflowCommandWhereUniqueInput!, create: WorkflowCommandCreateInput!, update: WorkflowCommandUpdateInput!): WorkflowCommand!
  upsertWorkflowResult(where: WorkflowResultWhereUniqueInput!, create: WorkflowResultCreateInput!, update: WorkflowResultUpdateInput!): WorkflowResult!
  upsertWorkflow(where: WorkflowWhereUniqueInput!, create: WorkflowCreateInput!, update: WorkflowUpdateInput!): Workflow!
  upsertWorkflowExecution(where: WorkflowExecutionWhereUniqueInput!, create: WorkflowExecutionCreateInput!, update: WorkflowExecutionUpdateInput!): WorkflowExecution!
  upsertWorkflowCommandExecution(where: WorkflowCommandExecutionWhereUniqueInput!, create: WorkflowCommandExecutionCreateInput!, update: WorkflowCommandExecutionUpdateInput!): WorkflowCommandExecution!
  updateManyRunners(data: RunnerUpdateInput!, where: RunnerWhereInput!): BatchPayload!
  updateManyParameters(data: ParameterUpdateInput!, where: ParameterWhereInput!): BatchPayload!
  updateManyFilterDefinitions(data: FilterDefinitionUpdateInput!, where: FilterDefinitionWhereInput!): BatchPayload!
  updateManyEvents(data: EventUpdateInput!, where: EventWhereInput!): BatchPayload!
  updateManyCommands(data: CommandUpdateInput!, where: CommandWhereInput!): BatchPayload!
  updateManyServices(data: ServiceUpdateInput!, where: ServiceWhereInput!): BatchPayload!
  updateManyWorkflowConstants(data: WorkflowConstantUpdateInput!, where: WorkflowConstantWhereInput!): BatchPayload!
  updateManyWorkflowSources(data: WorkflowSourceUpdateInput!, where: WorkflowSourceWhereInput!): BatchPayload!
  updateManyWorkflowCommands(data: WorkflowCommandUpdateInput!, where: WorkflowCommandWhereInput!): BatchPayload!
  updateManyWorkflowResults(data: WorkflowResultUpdateInput!, where: WorkflowResultWhereInput!): BatchPayload!
  updateManyWorkflows(data: WorkflowUpdateInput!, where: WorkflowWhereInput!): BatchPayload!
  updateManyWorkflowExecutions(data: WorkflowExecutionUpdateInput!, where: WorkflowExecutionWhereInput!): BatchPayload!
  updateManyWorkflowCommandExecutions(data: WorkflowCommandExecutionUpdateInput!, where: WorkflowCommandExecutionWhereInput!): BatchPayload!
  deleteManyRunners(where: RunnerWhereInput!): BatchPayload!
  deleteManyParameters(where: ParameterWhereInput!): BatchPayload!
  deleteManyFilterDefinitions(where: FilterDefinitionWhereInput!): BatchPayload!
  deleteManyEvents(where: EventWhereInput!): BatchPayload!
  deleteManyCommands(where: CommandWhereInput!): BatchPayload!
  deleteManyServices(where: ServiceWhereInput!): BatchPayload!
  deleteManyWorkflowConstants(where: WorkflowConstantWhereInput!): BatchPayload!
  deleteManyWorkflowSources(where: WorkflowSourceWhereInput!): BatchPayload!
  deleteManyWorkflowCommands(where: WorkflowCommandWhereInput!): BatchPayload!
  deleteManyWorkflowResults(where: WorkflowResultWhereInput!): BatchPayload!
  deleteManyWorkflows(where: WorkflowWhereInput!): BatchPayload!
  deleteManyWorkflowExecutions(where: WorkflowExecutionWhereInput!): BatchPayload!
  deleteManyWorkflowCommandExecutions(where: WorkflowCommandExecutionWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ParameterConnection {
  pageInfo: PageInfo!
  edges: [ParameterEdge]!
  aggregate: AggregateParameter!
}

input ParameterCreateInput {
  title: String!
  description: String
  type: TYPE
  required: Boolean!
}

input ParameterCreateManyInput {
  create: [ParameterCreateInput!]
  connect: [ParameterWhereUniqueInput!]
}

input ParameterCreateOneInput {
  create: ParameterCreateInput
  connect: ParameterWhereUniqueInput
}

type ParameterEdge {
  node: Parameter!
  cursor: String!
}

enum ParameterOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  required_ASC
  required_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ParameterPreviousValues {
  id: ID!
  title: String!
  description: String
  type: TYPE!
  required: Boolean!
}

type ParameterSubscriptionPayload {
  mutation: MutationType!
  node: Parameter
  updatedFields: [String!]
  previousValues: ParameterPreviousValues
}

input ParameterSubscriptionWhereInput {
  AND: [ParameterSubscriptionWhereInput!]
  OR: [ParameterSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ParameterWhereInput
}

input ParameterUpdateInput {
  title: String
  description: String
  type: TYPE
  required: Boolean
}

input ParameterUpdateManyInput {
  create: [ParameterCreateInput!]
  connect: [ParameterWhereUniqueInput!]
  disconnect: [ParameterWhereUniqueInput!]
  delete: [ParameterWhereUniqueInput!]
}

input ParameterUpdateOneInput {
  create: ParameterCreateInput
  connect: ParameterWhereUniqueInput
  disconnect: ParameterWhereUniqueInput
  delete: ParameterWhereUniqueInput
}

input ParameterWhereInput {
  AND: [ParameterWhereInput!]
  OR: [ParameterWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  type: TYPE
  type_not: TYPE
  type_in: [TYPE!]
  type_not_in: [TYPE!]
  required: Boolean
  required_not: Boolean
}

input ParameterWhereUniqueInput {
  id: ID
}

enum PREDICATE {
  EQ
  NEQ
  GT
  GTEQ
  LT
  LTEQ
  MATCHES
  DOES_NOT_MATCH
  START
  NOT_START
  END
  NOT_END
  IN
  NOT_IN
  CONT
  NOT_CONT
}

type Query {
  runners(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner]!
  parameters(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parameter]!
  filterDefinitions(where: FilterDefinitionWhereInput, orderBy: FilterDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FilterDefinition]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  commands(where: CommandWhereInput, orderBy: CommandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Command]!
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service]!
  workflowConstants(where: WorkflowConstantWhereInput, orderBy: WorkflowConstantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowConstant]!
  workflowSources(where: WorkflowSourceWhereInput, orderBy: WorkflowSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowSource]!
  workflowCommands(where: WorkflowCommandWhereInput, orderBy: WorkflowCommandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowCommand]!
  workflowResults(where: WorkflowResultWhereInput, orderBy: WorkflowResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowResult]!
  workflows(where: WorkflowWhereInput, orderBy: WorkflowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workflow]!
  workflowExecutions(where: WorkflowExecutionWhereInput, orderBy: WorkflowExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowExecution]!
  workflowCommandExecutions(where: WorkflowCommandExecutionWhereInput, orderBy: WorkflowCommandExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowCommandExecution]!
  runner(where: RunnerWhereUniqueInput!): Runner
  parameter(where: ParameterWhereUniqueInput!): Parameter
  filterDefinition(where: FilterDefinitionWhereUniqueInput!): FilterDefinition
  event(where: EventWhereUniqueInput!): Event
  command(where: CommandWhereUniqueInput!): Command
  service(where: ServiceWhereUniqueInput!): Service
  workflowConstant(where: WorkflowConstantWhereUniqueInput!): WorkflowConstant
  workflowSource(where: WorkflowSourceWhereUniqueInput!): WorkflowSource
  workflowCommand(where: WorkflowCommandWhereUniqueInput!): WorkflowCommand
  workflowResult(where: WorkflowResultWhereUniqueInput!): WorkflowResult
  workflow(where: WorkflowWhereUniqueInput!): Workflow
  workflowExecution(where: WorkflowExecutionWhereUniqueInput!): WorkflowExecution
  workflowCommandExecution(where: WorkflowCommandExecutionWhereUniqueInput!): WorkflowCommandExecution
  runnersConnection(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RunnerConnection!
  parametersConnection(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ParameterConnection!
  filterDefinitionsConnection(where: FilterDefinitionWhereInput, orderBy: FilterDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FilterDefinitionConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  commandsConnection(where: CommandWhereInput, orderBy: CommandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommandConnection!
  servicesConnection(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceConnection!
  workflowConstantsConnection(where: WorkflowConstantWhereInput, orderBy: WorkflowConstantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowConstantConnection!
  workflowSourcesConnection(where: WorkflowSourceWhereInput, orderBy: WorkflowSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowSourceConnection!
  workflowCommandsConnection(where: WorkflowCommandWhereInput, orderBy: WorkflowCommandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowCommandConnection!
  workflowResultsConnection(where: WorkflowResultWhereInput, orderBy: WorkflowResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowResultConnection!
  workflowsConnection(where: WorkflowWhereInput, orderBy: WorkflowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowConnection!
  workflowExecutionsConnection(where: WorkflowExecutionWhereInput, orderBy: WorkflowExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowExecutionConnection!
  workflowCommandExecutionsConnection(where: WorkflowCommandExecutionWhereInput, orderBy: WorkflowCommandExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowCommandExecutionConnection!
  node(id: ID!): Node
}

type RunnerConnection {
  pageInfo: PageInfo!
  edges: [RunnerEdge]!
  aggregate: AggregateRunner!
}

input RunnerCreateInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceCreateManyWithoutBlacklistInput
  commandWhitelisted: WorkflowCommandCreateManyWithoutWhitelistInput
  commandBlacklisted: WorkflowCommandCreateManyWithoutBlacklistInput
}

input RunnerCreateManyWithoutCommandBlacklistedInput {
  create: [RunnerCreateWithoutCommandBlacklistedInput!]
  connect: [RunnerWhereUniqueInput!]
}

input RunnerCreateManyWithoutCommandWhitelistedInput {
  create: [RunnerCreateWithoutCommandWhitelistedInput!]
  connect: [RunnerWhereUniqueInput!]
}

input RunnerCreateManyWithoutSourceBlacklistedInput {
  create: [RunnerCreateWithoutSourceBlacklistedInput!]
  connect: [RunnerWhereUniqueInput!]
}

input RunnerCreateManyWithoutSourceWhitelistedInput {
  create: [RunnerCreateWithoutSourceWhitelistedInput!]
  connect: [RunnerWhereUniqueInput!]
}

input RunnerCreateWithoutCommandBlacklistedInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceCreateManyWithoutBlacklistInput
  commandWhitelisted: WorkflowCommandCreateManyWithoutWhitelistInput
}

input RunnerCreateWithoutCommandWhitelistedInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceCreateManyWithoutBlacklistInput
  commandBlacklisted: WorkflowCommandCreateManyWithoutBlacklistInput
}

input RunnerCreateWithoutSourceBlacklistedInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceCreateManyWithoutWhitelistInput
  commandWhitelisted: WorkflowCommandCreateManyWithoutWhitelistInput
  commandBlacklisted: WorkflowCommandCreateManyWithoutBlacklistInput
}

input RunnerCreateWithoutSourceWhitelistedInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceBlacklisted: WorkflowSourceCreateManyWithoutBlacklistInput
  commandWhitelisted: WorkflowCommandCreateManyWithoutWhitelistInput
  commandBlacklisted: WorkflowCommandCreateManyWithoutBlacklistInput
}

type RunnerEdge {
  node: Runner!
  cursor: String!
}

enum RunnerOrderByInput {
  id_ASC
  id_DESC
  publicKey_ASC
  publicKey_DESC
  stake_ASC
  stake_DESC
  reliability_ASC
  reliability_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RunnerPreviousValues {
  id: ID!
  publicKey: String!
  stake: Float!
  reliability: Float!
}

type RunnerSubscriptionPayload {
  mutation: MutationType!
  node: Runner
  updatedFields: [String!]
  previousValues: RunnerPreviousValues
}

input RunnerSubscriptionWhereInput {
  AND: [RunnerSubscriptionWhereInput!]
  OR: [RunnerSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RunnerWhereInput
}

input RunnerUpdateInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceUpdateManyWithoutBlacklistInput
  commandWhitelisted: WorkflowCommandUpdateManyWithoutWhitelistInput
  commandBlacklisted: WorkflowCommandUpdateManyWithoutBlacklistInput
}

input RunnerUpdateManyWithoutCommandBlacklistedInput {
  create: [RunnerCreateWithoutCommandBlacklistedInput!]
  connect: [RunnerWhereUniqueInput!]
  disconnect: [RunnerWhereUniqueInput!]
  delete: [RunnerWhereUniqueInput!]
  update: [RunnerUpdateWithoutCommandBlacklistedInput!]
  upsert: [RunnerUpsertWithoutCommandBlacklistedInput!]
}

input RunnerUpdateManyWithoutCommandWhitelistedInput {
  create: [RunnerCreateWithoutCommandWhitelistedInput!]
  connect: [RunnerWhereUniqueInput!]
  disconnect: [RunnerWhereUniqueInput!]
  delete: [RunnerWhereUniqueInput!]
  update: [RunnerUpdateWithoutCommandWhitelistedInput!]
  upsert: [RunnerUpsertWithoutCommandWhitelistedInput!]
}

input RunnerUpdateManyWithoutSourceBlacklistedInput {
  create: [RunnerCreateWithoutSourceBlacklistedInput!]
  connect: [RunnerWhereUniqueInput!]
  disconnect: [RunnerWhereUniqueInput!]
  delete: [RunnerWhereUniqueInput!]
  update: [RunnerUpdateWithoutSourceBlacklistedInput!]
  upsert: [RunnerUpsertWithoutSourceBlacklistedInput!]
}

input RunnerUpdateManyWithoutSourceWhitelistedInput {
  create: [RunnerCreateWithoutSourceWhitelistedInput!]
  connect: [RunnerWhereUniqueInput!]
  disconnect: [RunnerWhereUniqueInput!]
  delete: [RunnerWhereUniqueInput!]
  update: [RunnerUpdateWithoutSourceWhitelistedInput!]
  upsert: [RunnerUpsertWithoutSourceWhitelistedInput!]
}

input RunnerUpdateWithoutCommandBlacklistedDataInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceUpdateManyWithoutBlacklistInput
  commandWhitelisted: WorkflowCommandUpdateManyWithoutWhitelistInput
}

input RunnerUpdateWithoutCommandBlacklistedInput {
  where: RunnerWhereUniqueInput!
  data: RunnerUpdateWithoutCommandBlacklistedDataInput!
}

input RunnerUpdateWithoutCommandWhitelistedDataInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceUpdateManyWithoutBlacklistInput
  commandBlacklisted: WorkflowCommandUpdateManyWithoutBlacklistInput
}

input RunnerUpdateWithoutCommandWhitelistedInput {
  where: RunnerWhereUniqueInput!
  data: RunnerUpdateWithoutCommandWhitelistedDataInput!
}

input RunnerUpdateWithoutSourceBlacklistedDataInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceUpdateManyWithoutWhitelistInput
  commandWhitelisted: WorkflowCommandUpdateManyWithoutWhitelistInput
  commandBlacklisted: WorkflowCommandUpdateManyWithoutBlacklistInput
}

input RunnerUpdateWithoutSourceBlacklistedInput {
  where: RunnerWhereUniqueInput!
  data: RunnerUpdateWithoutSourceBlacklistedDataInput!
}

input RunnerUpdateWithoutSourceWhitelistedDataInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceBlacklisted: WorkflowSourceUpdateManyWithoutBlacklistInput
  commandWhitelisted: WorkflowCommandUpdateManyWithoutWhitelistInput
  commandBlacklisted: WorkflowCommandUpdateManyWithoutBlacklistInput
}

input RunnerUpdateWithoutSourceWhitelistedInput {
  where: RunnerWhereUniqueInput!
  data: RunnerUpdateWithoutSourceWhitelistedDataInput!
}

input RunnerUpsertWithoutCommandBlacklistedInput {
  where: RunnerWhereUniqueInput!
  update: RunnerUpdateWithoutCommandBlacklistedDataInput!
  create: RunnerCreateWithoutCommandBlacklistedInput!
}

input RunnerUpsertWithoutCommandWhitelistedInput {
  where: RunnerWhereUniqueInput!
  update: RunnerUpdateWithoutCommandWhitelistedDataInput!
  create: RunnerCreateWithoutCommandWhitelistedInput!
}

input RunnerUpsertWithoutSourceBlacklistedInput {
  where: RunnerWhereUniqueInput!
  update: RunnerUpdateWithoutSourceBlacklistedDataInput!
  create: RunnerCreateWithoutSourceBlacklistedInput!
}

input RunnerUpsertWithoutSourceWhitelistedInput {
  where: RunnerWhereUniqueInput!
  update: RunnerUpdateWithoutSourceWhitelistedDataInput!
  create: RunnerCreateWithoutSourceWhitelistedInput!
}

input RunnerWhereInput {
  AND: [RunnerWhereInput!]
  OR: [RunnerWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  publicKey: String
  publicKey_not: String
  publicKey_in: [String!]
  publicKey_not_in: [String!]
  publicKey_lt: String
  publicKey_lte: String
  publicKey_gt: String
  publicKey_gte: String
  publicKey_contains: String
  publicKey_not_contains: String
  publicKey_starts_with: String
  publicKey_not_starts_with: String
  publicKey_ends_with: String
  publicKey_not_ends_with: String
  stake: Float
  stake_not: Float
  stake_in: [Float!]
  stake_not_in: [Float!]
  stake_lt: Float
  stake_lte: Float
  stake_gt: Float
  stake_gte: Float
  reliability: Float
  reliability_not: Float
  reliability_in: [Float!]
  reliability_not_in: [Float!]
  reliability_lt: Float
  reliability_lte: Float
  reliability_gt: Float
  reliability_gte: Float
  sourceWhitelisted_every: WorkflowSourceWhereInput
  sourceWhitelisted_some: WorkflowSourceWhereInput
  sourceWhitelisted_none: WorkflowSourceWhereInput
  sourceBlacklisted_every: WorkflowSourceWhereInput
  sourceBlacklisted_some: WorkflowSourceWhereInput
  sourceBlacklisted_none: WorkflowSourceWhereInput
  commandWhitelisted_every: WorkflowCommandWhereInput
  commandWhitelisted_some: WorkflowCommandWhereInput
  commandWhitelisted_none: WorkflowCommandWhereInput
  commandBlacklisted_every: WorkflowCommandWhereInput
  commandBlacklisted_some: WorkflowCommandWhereInput
  commandBlacklisted_none: WorkflowCommandWhereInput
}

input RunnerWhereUniqueInput {
  id: ID
  publicKey: String
}

type ServiceConnection {
  pageInfo: PageInfo!
  edges: [ServiceEdge]!
  aggregate: AggregateService!
}

input ServiceCreateInput {
  title: String!
  description: String
  events: EventCreateManyInput
  commands: CommandCreateManyInput
}

input ServiceCreateOneInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

type ServiceEdge {
  node: Service!
  cursor: String!
}

enum ServiceOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ServicePreviousValues {
  id: ID!
  title: String!
  description: String
}

type ServiceSubscriptionPayload {
  mutation: MutationType!
  node: Service
  updatedFields: [String!]
  previousValues: ServicePreviousValues
}

input ServiceSubscriptionWhereInput {
  AND: [ServiceSubscriptionWhereInput!]
  OR: [ServiceSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceWhereInput
}

input ServiceUpdateInput {
  title: String
  description: String
  events: EventUpdateManyInput
  commands: CommandUpdateManyInput
}

input ServiceUpdateOneInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
  disconnect: ServiceWhereUniqueInput
  delete: ServiceWhereUniqueInput
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  commands_every: CommandWhereInput
  commands_some: CommandWhereInput
  commands_none: CommandWhereInput
}

input ServiceWhereUniqueInput {
  id: ID
}

type Subscription {
  runner(where: RunnerSubscriptionWhereInput): RunnerSubscriptionPayload
  parameter(where: ParameterSubscriptionWhereInput): ParameterSubscriptionPayload
  filterDefinition(where: FilterDefinitionSubscriptionWhereInput): FilterDefinitionSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  command(where: CommandSubscriptionWhereInput): CommandSubscriptionPayload
  service(where: ServiceSubscriptionWhereInput): ServiceSubscriptionPayload
  workflowConstant(where: WorkflowConstantSubscriptionWhereInput): WorkflowConstantSubscriptionPayload
  workflowSource(where: WorkflowSourceSubscriptionWhereInput): WorkflowSourceSubscriptionPayload
  workflowCommand(where: WorkflowCommandSubscriptionWhereInput): WorkflowCommandSubscriptionPayload
  workflowResult(where: WorkflowResultSubscriptionWhereInput): WorkflowResultSubscriptionPayload
  workflow(where: WorkflowSubscriptionWhereInput): WorkflowSubscriptionPayload
  workflowExecution(where: WorkflowExecutionSubscriptionWhereInput): WorkflowExecutionSubscriptionPayload
  workflowCommandExecution(where: WorkflowCommandExecutionSubscriptionWhereInput): WorkflowCommandExecutionSubscriptionPayload
}

enum TYPE {
  FLOAT
  INTEGER
  STRING
  BOOLEAN
  DATE
}

type WorkflowCommandConnection {
  pageInfo: PageInfo!
  edges: [WorkflowCommandEdge]!
  aggregate: AggregateWorkflowCommand!
}

input WorkflowCommandCreateInput {
  whitelist: RunnerCreateManyWithoutCommandWhitelistedInput
  blacklist: RunnerCreateManyWithoutCommandBlacklistedInput
  service: ServiceCreateOneInput!
  command: CommandCreateOneInput!
  parameters: WorkflowResultCreateOneInput!
}

input WorkflowCommandCreateManyInput {
  create: [WorkflowCommandCreateInput!]
  connect: [WorkflowCommandWhereUniqueInput!]
}

input WorkflowCommandCreateManyWithoutBlacklistInput {
  create: [WorkflowCommandCreateWithoutBlacklistInput!]
  connect: [WorkflowCommandWhereUniqueInput!]
}

input WorkflowCommandCreateManyWithoutWhitelistInput {
  create: [WorkflowCommandCreateWithoutWhitelistInput!]
  connect: [WorkflowCommandWhereUniqueInput!]
}

input WorkflowCommandCreateWithoutBlacklistInput {
  whitelist: RunnerCreateManyWithoutCommandWhitelistedInput
  service: ServiceCreateOneInput!
  command: CommandCreateOneInput!
  parameters: WorkflowResultCreateOneInput!
}

input WorkflowCommandCreateWithoutWhitelistInput {
  blacklist: RunnerCreateManyWithoutCommandBlacklistedInput
  service: ServiceCreateOneInput!
  command: CommandCreateOneInput!
  parameters: WorkflowResultCreateOneInput!
}

type WorkflowCommandEdge {
  node: WorkflowCommand!
  cursor: String!
}

type WorkflowCommandExecutionConnection {
  pageInfo: PageInfo!
  edges: [WorkflowCommandExecutionEdge]!
  aggregate: AggregateWorkflowCommandExecution!
}

input WorkflowCommandExecutionCreateInput {
  duration: Int!
  fee: Int!
  results: WorkflowResultCreateManyInput
}

input WorkflowCommandExecutionCreateManyInput {
  create: [WorkflowCommandExecutionCreateInput!]
  connect: [WorkflowCommandExecutionWhereUniqueInput!]
}

type WorkflowCommandExecutionEdge {
  node: WorkflowCommandExecution!
  cursor: String!
}

enum WorkflowCommandExecutionOrderByInput {
  id_ASC
  id_DESC
  duration_ASC
  duration_DESC
  fee_ASC
  fee_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowCommandExecutionPreviousValues {
  id: ID!
  duration: Int!
  fee: Int!
}

type WorkflowCommandExecutionSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowCommandExecution
  updatedFields: [String!]
  previousValues: WorkflowCommandExecutionPreviousValues
}

input WorkflowCommandExecutionSubscriptionWhereInput {
  AND: [WorkflowCommandExecutionSubscriptionWhereInput!]
  OR: [WorkflowCommandExecutionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowCommandExecutionWhereInput
}

input WorkflowCommandExecutionUpdateInput {
  duration: Int
  fee: Int
  results: WorkflowResultUpdateManyInput
}

input WorkflowCommandExecutionUpdateManyInput {
  create: [WorkflowCommandExecutionCreateInput!]
  connect: [WorkflowCommandExecutionWhereUniqueInput!]
  disconnect: [WorkflowCommandExecutionWhereUniqueInput!]
  delete: [WorkflowCommandExecutionWhereUniqueInput!]
}

input WorkflowCommandExecutionWhereInput {
  AND: [WorkflowCommandExecutionWhereInput!]
  OR: [WorkflowCommandExecutionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  fee: Int
  fee_not: Int
  fee_in: [Int!]
  fee_not_in: [Int!]
  fee_lt: Int
  fee_lte: Int
  fee_gt: Int
  fee_gte: Int
  results_every: WorkflowResultWhereInput
  results_some: WorkflowResultWhereInput
  results_none: WorkflowResultWhereInput
}

input WorkflowCommandExecutionWhereUniqueInput {
  id: ID
}

enum WorkflowCommandOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowCommandPreviousValues {
  id: ID!
}

type WorkflowCommandSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowCommand
  updatedFields: [String!]
  previousValues: WorkflowCommandPreviousValues
}

input WorkflowCommandSubscriptionWhereInput {
  AND: [WorkflowCommandSubscriptionWhereInput!]
  OR: [WorkflowCommandSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowCommandWhereInput
}

input WorkflowCommandUpdateInput {
  whitelist: RunnerUpdateManyWithoutCommandWhitelistedInput
  blacklist: RunnerUpdateManyWithoutCommandBlacklistedInput
  service: ServiceUpdateOneInput
  command: CommandUpdateOneInput
  parameters: WorkflowResultUpdateOneInput
}

input WorkflowCommandUpdateManyInput {
  create: [WorkflowCommandCreateInput!]
  connect: [WorkflowCommandWhereUniqueInput!]
  disconnect: [WorkflowCommandWhereUniqueInput!]
  delete: [WorkflowCommandWhereUniqueInput!]
}

input WorkflowCommandUpdateManyWithoutBlacklistInput {
  create: [WorkflowCommandCreateWithoutBlacklistInput!]
  connect: [WorkflowCommandWhereUniqueInput!]
  disconnect: [WorkflowCommandWhereUniqueInput!]
  delete: [WorkflowCommandWhereUniqueInput!]
  update: [WorkflowCommandUpdateWithoutBlacklistInput!]
  upsert: [WorkflowCommandUpsertWithoutBlacklistInput!]
}

input WorkflowCommandUpdateManyWithoutWhitelistInput {
  create: [WorkflowCommandCreateWithoutWhitelistInput!]
  connect: [WorkflowCommandWhereUniqueInput!]
  disconnect: [WorkflowCommandWhereUniqueInput!]
  delete: [WorkflowCommandWhereUniqueInput!]
  update: [WorkflowCommandUpdateWithoutWhitelistInput!]
  upsert: [WorkflowCommandUpsertWithoutWhitelistInput!]
}

input WorkflowCommandUpdateWithoutBlacklistDataInput {
  whitelist: RunnerUpdateManyWithoutCommandWhitelistedInput
  service: ServiceUpdateOneInput
  command: CommandUpdateOneInput
  parameters: WorkflowResultUpdateOneInput
}

input WorkflowCommandUpdateWithoutBlacklistInput {
  where: WorkflowCommandWhereUniqueInput!
  data: WorkflowCommandUpdateWithoutBlacklistDataInput!
}

input WorkflowCommandUpdateWithoutWhitelistDataInput {
  blacklist: RunnerUpdateManyWithoutCommandBlacklistedInput
  service: ServiceUpdateOneInput
  command: CommandUpdateOneInput
  parameters: WorkflowResultUpdateOneInput
}

input WorkflowCommandUpdateWithoutWhitelistInput {
  where: WorkflowCommandWhereUniqueInput!
  data: WorkflowCommandUpdateWithoutWhitelistDataInput!
}

input WorkflowCommandUpsertWithoutBlacklistInput {
  where: WorkflowCommandWhereUniqueInput!
  update: WorkflowCommandUpdateWithoutBlacklistDataInput!
  create: WorkflowCommandCreateWithoutBlacklistInput!
}

input WorkflowCommandUpsertWithoutWhitelistInput {
  where: WorkflowCommandWhereUniqueInput!
  update: WorkflowCommandUpdateWithoutWhitelistDataInput!
  create: WorkflowCommandCreateWithoutWhitelistInput!
}

input WorkflowCommandWhereInput {
  AND: [WorkflowCommandWhereInput!]
  OR: [WorkflowCommandWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  whitelist_every: RunnerWhereInput
  whitelist_some: RunnerWhereInput
  whitelist_none: RunnerWhereInput
  blacklist_every: RunnerWhereInput
  blacklist_some: RunnerWhereInput
  blacklist_none: RunnerWhereInput
  service: ServiceWhereInput
  command: CommandWhereInput
  parameters: WorkflowResultWhereInput
}

input WorkflowCommandWhereUniqueInput {
  id: ID
}

type WorkflowConnection {
  pageInfo: PageInfo!
  edges: [WorkflowEdge]!
  aggregate: AggregateWorkflow!
}

type WorkflowConstantConnection {
  pageInfo: PageInfo!
  edges: [WorkflowConstantEdge]!
  aggregate: AggregateWorkflowConstant!
}

input WorkflowConstantCreateInput {
  value: String!
}

type WorkflowConstantEdge {
  node: WorkflowConstant!
  cursor: String!
}

enum WorkflowConstantOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowConstantPreviousValues {
  id: ID!
  value: String!
}

type WorkflowConstantSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowConstant
  updatedFields: [String!]
  previousValues: WorkflowConstantPreviousValues
}

input WorkflowConstantSubscriptionWhereInput {
  AND: [WorkflowConstantSubscriptionWhereInput!]
  OR: [WorkflowConstantSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowConstantWhereInput
}

input WorkflowConstantUpdateInput {
  value: String
}

input WorkflowConstantWhereInput {
  AND: [WorkflowConstantWhereInput!]
  OR: [WorkflowConstantWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
}

input WorkflowConstantWhereUniqueInput {
  id: ID
}

input WorkflowCreateInput {
  title: String!
  description: String
  source: WorkflowSourceCreateOneInput!
  commands: WorkflowCommandCreateManyInput
  executions: WorkflowExecutionCreateManyInput
}

type WorkflowEdge {
  node: Workflow!
  cursor: String!
}

type WorkflowExecutionConnection {
  pageInfo: PageInfo!
  edges: [WorkflowExecutionEdge]!
  aggregate: AggregateWorkflowExecution!
}

input WorkflowExecutionCreateInput {
  duration: Int!
  fee: Int!
  commandExecutions: WorkflowCommandExecutionCreateManyInput
}

input WorkflowExecutionCreateManyInput {
  create: [WorkflowExecutionCreateInput!]
  connect: [WorkflowExecutionWhereUniqueInput!]
}

type WorkflowExecutionEdge {
  node: WorkflowExecution!
  cursor: String!
}

enum WorkflowExecutionOrderByInput {
  id_ASC
  id_DESC
  duration_ASC
  duration_DESC
  fee_ASC
  fee_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowExecutionPreviousValues {
  id: ID!
  duration: Int!
  fee: Int!
}

type WorkflowExecutionSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowExecution
  updatedFields: [String!]
  previousValues: WorkflowExecutionPreviousValues
}

input WorkflowExecutionSubscriptionWhereInput {
  AND: [WorkflowExecutionSubscriptionWhereInput!]
  OR: [WorkflowExecutionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowExecutionWhereInput
}

input WorkflowExecutionUpdateInput {
  duration: Int
  fee: Int
  commandExecutions: WorkflowCommandExecutionUpdateManyInput
}

input WorkflowExecutionUpdateManyInput {
  create: [WorkflowExecutionCreateInput!]
  connect: [WorkflowExecutionWhereUniqueInput!]
  disconnect: [WorkflowExecutionWhereUniqueInput!]
  delete: [WorkflowExecutionWhereUniqueInput!]
}

input WorkflowExecutionWhereInput {
  AND: [WorkflowExecutionWhereInput!]
  OR: [WorkflowExecutionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  fee: Int
  fee_not: Int
  fee_in: [Int!]
  fee_not_in: [Int!]
  fee_lt: Int
  fee_lte: Int
  fee_gt: Int
  fee_gte: Int
  commandExecutions_every: WorkflowCommandExecutionWhereInput
  commandExecutions_some: WorkflowCommandExecutionWhereInput
  commandExecutions_none: WorkflowCommandExecutionWhereInput
}

input WorkflowExecutionWhereUniqueInput {
  id: ID
}

enum WorkflowOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowPreviousValues {
  id: ID!
  title: String!
  description: String
}

type WorkflowResultConnection {
  pageInfo: PageInfo!
  edges: [WorkflowResultEdge]!
  aggregate: AggregateWorkflowResult!
}

input WorkflowResultCreateInput {
  value: String!
  reference: ParameterCreateOneInput!
}

input WorkflowResultCreateManyInput {
  create: [WorkflowResultCreateInput!]
  connect: [WorkflowResultWhereUniqueInput!]
}

input WorkflowResultCreateOneInput {
  create: WorkflowResultCreateInput
  connect: WorkflowResultWhereUniqueInput
}

type WorkflowResultEdge {
  node: WorkflowResult!
  cursor: String!
}

enum WorkflowResultOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowResultPreviousValues {
  id: ID!
  value: String!
}

type WorkflowResultSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowResult
  updatedFields: [String!]
  previousValues: WorkflowResultPreviousValues
}

input WorkflowResultSubscriptionWhereInput {
  AND: [WorkflowResultSubscriptionWhereInput!]
  OR: [WorkflowResultSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowResultWhereInput
}

input WorkflowResultUpdateInput {
  value: String
  reference: ParameterUpdateOneInput
}

input WorkflowResultUpdateManyInput {
  create: [WorkflowResultCreateInput!]
  connect: [WorkflowResultWhereUniqueInput!]
  disconnect: [WorkflowResultWhereUniqueInput!]
  delete: [WorkflowResultWhereUniqueInput!]
}

input WorkflowResultUpdateOneInput {
  create: WorkflowResultCreateInput
  connect: WorkflowResultWhereUniqueInput
  disconnect: WorkflowResultWhereUniqueInput
  delete: WorkflowResultWhereUniqueInput
}

input WorkflowResultWhereInput {
  AND: [WorkflowResultWhereInput!]
  OR: [WorkflowResultWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  reference: ParameterWhereInput
}

input WorkflowResultWhereUniqueInput {
  id: ID
}

type WorkflowSourceConnection {
  pageInfo: PageInfo!
  edges: [WorkflowSourceEdge]!
  aggregate: AggregateWorkflowSource!
}

input WorkflowSourceCreateInput {
  whitelist: RunnerCreateManyWithoutSourceWhitelistedInput
  blacklist: RunnerCreateManyWithoutSourceBlacklistedInput
  service: ServiceCreateOneInput!
  event: EventCreateOneInput!
  filters: FilterDefinitionCreateManyInput
}

input WorkflowSourceCreateManyWithoutBlacklistInput {
  create: [WorkflowSourceCreateWithoutBlacklistInput!]
  connect: [WorkflowSourceWhereUniqueInput!]
}

input WorkflowSourceCreateManyWithoutWhitelistInput {
  create: [WorkflowSourceCreateWithoutWhitelistInput!]
  connect: [WorkflowSourceWhereUniqueInput!]
}

input WorkflowSourceCreateOneInput {
  create: WorkflowSourceCreateInput
  connect: WorkflowSourceWhereUniqueInput
}

input WorkflowSourceCreateWithoutBlacklistInput {
  whitelist: RunnerCreateManyWithoutSourceWhitelistedInput
  service: ServiceCreateOneInput!
  event: EventCreateOneInput!
  filters: FilterDefinitionCreateManyInput
}

input WorkflowSourceCreateWithoutWhitelistInput {
  blacklist: RunnerCreateManyWithoutSourceBlacklistedInput
  service: ServiceCreateOneInput!
  event: EventCreateOneInput!
  filters: FilterDefinitionCreateManyInput
}

type WorkflowSourceEdge {
  node: WorkflowSource!
  cursor: String!
}

enum WorkflowSourceOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowSourcePreviousValues {
  id: ID!
}

type WorkflowSourceSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowSource
  updatedFields: [String!]
  previousValues: WorkflowSourcePreviousValues
}

input WorkflowSourceSubscriptionWhereInput {
  AND: [WorkflowSourceSubscriptionWhereInput!]
  OR: [WorkflowSourceSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowSourceWhereInput
}

input WorkflowSourceUpdateInput {
  whitelist: RunnerUpdateManyWithoutSourceWhitelistedInput
  blacklist: RunnerUpdateManyWithoutSourceBlacklistedInput
  service: ServiceUpdateOneInput
  event: EventUpdateOneInput
  filters: FilterDefinitionUpdateManyInput
}

input WorkflowSourceUpdateManyWithoutBlacklistInput {
  create: [WorkflowSourceCreateWithoutBlacklistInput!]
  connect: [WorkflowSourceWhereUniqueInput!]
  disconnect: [WorkflowSourceWhereUniqueInput!]
  delete: [WorkflowSourceWhereUniqueInput!]
  update: [WorkflowSourceUpdateWithoutBlacklistInput!]
  upsert: [WorkflowSourceUpsertWithoutBlacklistInput!]
}

input WorkflowSourceUpdateManyWithoutWhitelistInput {
  create: [WorkflowSourceCreateWithoutWhitelistInput!]
  connect: [WorkflowSourceWhereUniqueInput!]
  disconnect: [WorkflowSourceWhereUniqueInput!]
  delete: [WorkflowSourceWhereUniqueInput!]
  update: [WorkflowSourceUpdateWithoutWhitelistInput!]
  upsert: [WorkflowSourceUpsertWithoutWhitelistInput!]
}

input WorkflowSourceUpdateOneInput {
  create: WorkflowSourceCreateInput
  connect: WorkflowSourceWhereUniqueInput
  disconnect: WorkflowSourceWhereUniqueInput
  delete: WorkflowSourceWhereUniqueInput
}

input WorkflowSourceUpdateWithoutBlacklistDataInput {
  whitelist: RunnerUpdateManyWithoutSourceWhitelistedInput
  service: ServiceUpdateOneInput
  event: EventUpdateOneInput
  filters: FilterDefinitionUpdateManyInput
}

input WorkflowSourceUpdateWithoutBlacklistInput {
  where: WorkflowSourceWhereUniqueInput!
  data: WorkflowSourceUpdateWithoutBlacklistDataInput!
}

input WorkflowSourceUpdateWithoutWhitelistDataInput {
  blacklist: RunnerUpdateManyWithoutSourceBlacklistedInput
  service: ServiceUpdateOneInput
  event: EventUpdateOneInput
  filters: FilterDefinitionUpdateManyInput
}

input WorkflowSourceUpdateWithoutWhitelistInput {
  where: WorkflowSourceWhereUniqueInput!
  data: WorkflowSourceUpdateWithoutWhitelistDataInput!
}

input WorkflowSourceUpsertWithoutBlacklistInput {
  where: WorkflowSourceWhereUniqueInput!
  update: WorkflowSourceUpdateWithoutBlacklistDataInput!
  create: WorkflowSourceCreateWithoutBlacklistInput!
}

input WorkflowSourceUpsertWithoutWhitelistInput {
  where: WorkflowSourceWhereUniqueInput!
  update: WorkflowSourceUpdateWithoutWhitelistDataInput!
  create: WorkflowSourceCreateWithoutWhitelistInput!
}

input WorkflowSourceWhereInput {
  AND: [WorkflowSourceWhereInput!]
  OR: [WorkflowSourceWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  whitelist_every: RunnerWhereInput
  whitelist_some: RunnerWhereInput
  whitelist_none: RunnerWhereInput
  blacklist_every: RunnerWhereInput
  blacklist_some: RunnerWhereInput
  blacklist_none: RunnerWhereInput
  service: ServiceWhereInput
  event: EventWhereInput
  filters_every: FilterDefinitionWhereInput
  filters_some: FilterDefinitionWhereInput
  filters_none: FilterDefinitionWhereInput
}

input WorkflowSourceWhereUniqueInput {
  id: ID
}

type WorkflowSubscriptionPayload {
  mutation: MutationType!
  node: Workflow
  updatedFields: [String!]
  previousValues: WorkflowPreviousValues
}

input WorkflowSubscriptionWhereInput {
  AND: [WorkflowSubscriptionWhereInput!]
  OR: [WorkflowSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowWhereInput
}

input WorkflowUpdateInput {
  title: String
  description: String
  source: WorkflowSourceUpdateOneInput
  commands: WorkflowCommandUpdateManyInput
  executions: WorkflowExecutionUpdateManyInput
}

input WorkflowWhereInput {
  AND: [WorkflowWhereInput!]
  OR: [WorkflowWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  source: WorkflowSourceWhereInput
  commands_every: WorkflowCommandWhereInput
  commands_some: WorkflowCommandWhereInput
  commands_none: WorkflowCommandWhereInput
  executions_every: WorkflowExecutionWhereInput
  executions_some: WorkflowExecutionWhereInput
  executions_none: WorkflowExecutionWhereInput
}

input WorkflowWhereUniqueInput {
  id: ID
}
`

export type ServiceOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'title_ASC' |
  'title_DESC' |
  'description_ASC' |
  'description_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type WorkflowSourceOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type WorkflowCommandOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type WorkflowCommandExecutionOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'duration_ASC' |
  'duration_DESC' |
  'fee_ASC' |
  'fee_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type FilterDefinitionOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'predicate_ASC' |
  'predicate_DESC' |
  'value_ASC' |
  'value_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type WorkflowOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'title_ASC' |
  'title_DESC' |
  'description_ASC' |
  'description_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type PREDICATE = 
  'EQ' |
  'NEQ' |
  'GT' |
  'GTEQ' |
  'LT' |
  'LTEQ' |
  'MATCHES' |
  'DOES_NOT_MATCH' |
  'START' |
  'NOT_START' |
  'END' |
  'NOT_END' |
  'IN' |
  'NOT_IN' |
  'CONT' |
  'NOT_CONT'

export type WorkflowConstantOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'value_ASC' |
  'value_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type EventOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'title_ASC' |
  'title_DESC' |
  'description_ASC' |
  'description_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type RunnerOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'publicKey_ASC' |
  'publicKey_DESC' |
  'stake_ASC' |
  'stake_DESC' |
  'reliability_ASC' |
  'reliability_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type ParameterOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'title_ASC' |
  'title_DESC' |
  'description_ASC' |
  'description_DESC' |
  'type_ASC' |
  'type_DESC' |
  'required_ASC' |
  'required_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type CommandOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'title_ASC' |
  'title_DESC' |
  'description_ASC' |
  'description_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type TYPE = 
  'FLOAT' |
  'INTEGER' |
  'STRING' |
  'BOOLEAN' |
  'DATE'

export type WorkflowResultOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'value_ASC' |
  'value_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type WorkflowExecutionOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'duration_ASC' |
  'duration_DESC' |
  'fee_ASC' |
  'fee_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export interface ParameterCreateInput {
  title: String
  description?: String
  type?: TYPE
  required: Boolean
}

export interface RunnerWhereInput {
  AND?: RunnerWhereInput[] | RunnerWhereInput
  OR?: RunnerWhereInput[] | RunnerWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  publicKey?: String
  publicKey_not?: String
  publicKey_in?: String[] | String
  publicKey_not_in?: String[] | String
  publicKey_lt?: String
  publicKey_lte?: String
  publicKey_gt?: String
  publicKey_gte?: String
  publicKey_contains?: String
  publicKey_not_contains?: String
  publicKey_starts_with?: String
  publicKey_not_starts_with?: String
  publicKey_ends_with?: String
  publicKey_not_ends_with?: String
  stake?: Float
  stake_not?: Float
  stake_in?: Float[] | Float
  stake_not_in?: Float[] | Float
  stake_lt?: Float
  stake_lte?: Float
  stake_gt?: Float
  stake_gte?: Float
  reliability?: Float
  reliability_not?: Float
  reliability_in?: Float[] | Float
  reliability_not_in?: Float[] | Float
  reliability_lt?: Float
  reliability_lte?: Float
  reliability_gt?: Float
  reliability_gte?: Float
  sourceWhitelisted_every?: WorkflowSourceWhereInput
  sourceWhitelisted_some?: WorkflowSourceWhereInput
  sourceWhitelisted_none?: WorkflowSourceWhereInput
  sourceBlacklisted_every?: WorkflowSourceWhereInput
  sourceBlacklisted_some?: WorkflowSourceWhereInput
  sourceBlacklisted_none?: WorkflowSourceWhereInput
  commandWhitelisted_every?: WorkflowCommandWhereInput
  commandWhitelisted_some?: WorkflowCommandWhereInput
  commandWhitelisted_none?: WorkflowCommandWhereInput
  commandBlacklisted_every?: WorkflowCommandWhereInput
  commandBlacklisted_some?: WorkflowCommandWhereInput
  commandBlacklisted_none?: WorkflowCommandWhereInput
}

export interface WorkflowResultUpdateOneInput {
  create?: WorkflowResultCreateInput
  connect?: WorkflowResultWhereUniqueInput
  disconnect?: WorkflowResultWhereUniqueInput
  delete?: WorkflowResultWhereUniqueInput
}

export interface WorkflowSourceUpdateWithoutBlacklistInput {
  where: WorkflowSourceWhereUniqueInput
  data: WorkflowSourceUpdateWithoutBlacklistDataInput
}

export interface CommandUpdateOneInput {
  create?: CommandCreateInput
  connect?: CommandWhereUniqueInput
  disconnect?: CommandWhereUniqueInput
  delete?: CommandWhereUniqueInput
}

export interface FilterDefinitionCreateInput {
  predicate?: PREDICATE
  value: String
  parameter: ParameterCreateOneInput
}

export interface ServiceUpdateOneInput {
  create?: ServiceCreateInput
  connect?: ServiceWhereUniqueInput
  disconnect?: ServiceWhereUniqueInput
  delete?: ServiceWhereUniqueInput
}

export interface WorkflowExecutionSubscriptionWhereInput {
  AND?: WorkflowExecutionSubscriptionWhereInput[] | WorkflowExecutionSubscriptionWhereInput
  OR?: WorkflowExecutionSubscriptionWhereInput[] | WorkflowExecutionSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowExecutionWhereInput
}

export interface RunnerUpsertWithoutCommandWhitelistedInput {
  where: RunnerWhereUniqueInput
  update: RunnerUpdateWithoutCommandWhitelistedDataInput
  create: RunnerCreateWithoutCommandWhitelistedInput
}

export interface WorkflowResultSubscriptionWhereInput {
  AND?: WorkflowResultSubscriptionWhereInput[] | WorkflowResultSubscriptionWhereInput
  OR?: WorkflowResultSubscriptionWhereInput[] | WorkflowResultSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowResultWhereInput
}

export interface RunnerUpdateWithoutCommandWhitelistedDataInput {
  publicKey?: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted?: WorkflowSourceUpdateManyWithoutBlacklistInput
  commandBlacklisted?: WorkflowCommandUpdateManyWithoutBlacklistInput
}

export interface WorkflowCommandSubscriptionWhereInput {
  AND?: WorkflowCommandSubscriptionWhereInput[] | WorkflowCommandSubscriptionWhereInput
  OR?: WorkflowCommandSubscriptionWhereInput[] | WorkflowCommandSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowCommandWhereInput
}

export interface RunnerUpdateWithoutCommandWhitelistedInput {
  where: RunnerWhereUniqueInput
  data: RunnerUpdateWithoutCommandWhitelistedDataInput
}

export interface WorkflowSourceSubscriptionWhereInput {
  AND?: WorkflowSourceSubscriptionWhereInput[] | WorkflowSourceSubscriptionWhereInput
  OR?: WorkflowSourceSubscriptionWhereInput[] | WorkflowSourceSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowSourceWhereInput
}

export interface RunnerUpdateManyWithoutCommandWhitelistedInput {
  create?: RunnerCreateWithoutCommandWhitelistedInput[] | RunnerCreateWithoutCommandWhitelistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  disconnect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  delete?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  update?: RunnerUpdateWithoutCommandWhitelistedInput[] | RunnerUpdateWithoutCommandWhitelistedInput
  upsert?: RunnerUpsertWithoutCommandWhitelistedInput[] | RunnerUpsertWithoutCommandWhitelistedInput
}

export interface WorkflowConstantSubscriptionWhereInput {
  AND?: WorkflowConstantSubscriptionWhereInput[] | WorkflowConstantSubscriptionWhereInput
  OR?: WorkflowConstantSubscriptionWhereInput[] | WorkflowConstantSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowConstantWhereInput
}

export interface WorkflowCommandUpdateWithoutBlacklistDataInput {
  whitelist?: RunnerUpdateManyWithoutCommandWhitelistedInput
  service?: ServiceUpdateOneInput
  command?: CommandUpdateOneInput
  parameters?: WorkflowResultUpdateOneInput
}

export interface ServiceSubscriptionWhereInput {
  AND?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput
  OR?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ServiceWhereInput
}

export interface WorkflowCommandUpdateWithoutBlacklistInput {
  where: WorkflowCommandWhereUniqueInput
  data: WorkflowCommandUpdateWithoutBlacklistDataInput
}

export interface EventSubscriptionWhereInput {
  AND?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput
  OR?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: EventWhereInput
}

export interface WorkflowCommandUpdateManyWithoutBlacklistInput {
  create?: WorkflowCommandCreateWithoutBlacklistInput[] | WorkflowCommandCreateWithoutBlacklistInput
  connect?: WorkflowCommandWhereUniqueInput[] | WorkflowCommandWhereUniqueInput
  disconnect?: WorkflowCommandWhereUniqueInput[] | WorkflowCommandWhereUniqueInput
  delete?: WorkflowCommandWhereUniqueInput[] | WorkflowCommandWhereUniqueInput
  update?: WorkflowCommandUpdateWithoutBlacklistInput[] | WorkflowCommandUpdateWithoutBlacklistInput
  upsert?: WorkflowCommandUpsertWithoutBlacklistInput[] | WorkflowCommandUpsertWithoutBlacklistInput
}

export interface ParameterWhereInput {
  AND?: ParameterWhereInput[] | ParameterWhereInput
  OR?: ParameterWhereInput[] | ParameterWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  type?: TYPE
  type_not?: TYPE
  type_in?: TYPE[] | TYPE
  type_not_in?: TYPE[] | TYPE
  required?: Boolean
  required_not?: Boolean
}

export interface RunnerUpdateWithoutSourceWhitelistedDataInput {
  publicKey?: String
  stake?: Float
  reliability?: Float
  sourceBlacklisted?: WorkflowSourceUpdateManyWithoutBlacklistInput
  commandWhitelisted?: WorkflowCommandUpdateManyWithoutWhitelistInput
  commandBlacklisted?: WorkflowCommandUpdateManyWithoutBlacklistInput
}

export interface EventWhereInput {
  AND?: EventWhereInput[] | EventWhereInput
  OR?: EventWhereInput[] | EventWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  data_every?: ParameterWhereInput
  data_some?: ParameterWhereInput
  data_none?: ParameterWhereInput
}

export interface RunnerUpdateWithoutSourceWhitelistedInput {
  where: RunnerWhereUniqueInput
  data: RunnerUpdateWithoutSourceWhitelistedDataInput
}

export interface WorkflowExecutionWhereInput {
  AND?: WorkflowExecutionWhereInput[] | WorkflowExecutionWhereInput
  OR?: WorkflowExecutionWhereInput[] | WorkflowExecutionWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  duration?: Int
  duration_not?: Int
  duration_in?: Int[] | Int
  duration_not_in?: Int[] | Int
  duration_lt?: Int
  duration_lte?: Int
  duration_gt?: Int
  duration_gte?: Int
  fee?: Int
  fee_not?: Int
  fee_in?: Int[] | Int
  fee_not_in?: Int[] | Int
  fee_lt?: Int
  fee_lte?: Int
  fee_gt?: Int
  fee_gte?: Int
  commandExecutions_every?: WorkflowCommandExecutionWhereInput
  commandExecutions_some?: WorkflowCommandExecutionWhereInput
  commandExecutions_none?: WorkflowCommandExecutionWhereInput
}

export interface RunnerCreateInput {
  publicKey: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted?: WorkflowSourceCreateManyWithoutBlacklistInput
  commandWhitelisted?: WorkflowCommandCreateManyWithoutWhitelistInput
  commandBlacklisted?: WorkflowCommandCreateManyWithoutBlacklistInput
}

export interface ServiceWhereInput {
  AND?: ServiceWhereInput[] | ServiceWhereInput
  OR?: ServiceWhereInput[] | ServiceWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  events_every?: EventWhereInput
  events_some?: EventWhereInput
  events_none?: EventWhereInput
  commands_every?: CommandWhereInput
  commands_some?: CommandWhereInput
  commands_none?: CommandWhereInput
}

export interface WorkflowSourceCreateManyWithoutWhitelistInput {
  create?: WorkflowSourceCreateWithoutWhitelistInput[] | WorkflowSourceCreateWithoutWhitelistInput
  connect?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
}

export interface WorkflowSourceWhereInput {
  AND?: WorkflowSourceWhereInput[] | WorkflowSourceWhereInput
  OR?: WorkflowSourceWhereInput[] | WorkflowSourceWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  whitelist_every?: RunnerWhereInput
  whitelist_some?: RunnerWhereInput
  whitelist_none?: RunnerWhereInput
  blacklist_every?: RunnerWhereInput
  blacklist_some?: RunnerWhereInput
  blacklist_none?: RunnerWhereInput
  service?: ServiceWhereInput
  event?: EventWhereInput
  filters_every?: FilterDefinitionWhereInput
  filters_some?: FilterDefinitionWhereInput
  filters_none?: FilterDefinitionWhereInput
}

export interface WorkflowSourceCreateWithoutWhitelistInput {
  blacklist?: RunnerCreateManyWithoutSourceBlacklistedInput
  service: ServiceCreateOneInput
  event: EventCreateOneInput
  filters?: FilterDefinitionCreateManyInput
}

export interface WorkflowResultUpdateManyInput {
  create?: WorkflowResultCreateInput[] | WorkflowResultCreateInput
  connect?: WorkflowResultWhereUniqueInput[] | WorkflowResultWhereUniqueInput
  disconnect?: WorkflowResultWhereUniqueInput[] | WorkflowResultWhereUniqueInput
  delete?: WorkflowResultWhereUniqueInput[] | WorkflowResultWhereUniqueInput
}

export interface RunnerCreateManyWithoutSourceBlacklistedInput {
  create?: RunnerCreateWithoutSourceBlacklistedInput[] | RunnerCreateWithoutSourceBlacklistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
}

export interface RunnerWhereUniqueInput {
  id?: ID_Input
  publicKey?: String
}

export interface RunnerCreateWithoutSourceBlacklistedInput {
  publicKey: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceCreateManyWithoutWhitelistInput
  commandWhitelisted?: WorkflowCommandCreateManyWithoutWhitelistInput
  commandBlacklisted?: WorkflowCommandCreateManyWithoutBlacklistInput
}

export interface FilterDefinitionWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowCommandCreateManyWithoutWhitelistInput {
  create?: WorkflowCommandCreateWithoutWhitelistInput[] | WorkflowCommandCreateWithoutWhitelistInput
  connect?: WorkflowCommandWhereUniqueInput[] | WorkflowCommandWhereUniqueInput
}

export interface CommandWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowCommandCreateWithoutWhitelistInput {
  blacklist?: RunnerCreateManyWithoutCommandBlacklistedInput
  service: ServiceCreateOneInput
  command: CommandCreateOneInput
  parameters: WorkflowResultCreateOneInput
}

export interface WorkflowConstantWhereUniqueInput {
  id?: ID_Input
}

export interface RunnerCreateManyWithoutCommandBlacklistedInput {
  create?: RunnerCreateWithoutCommandBlacklistedInput[] | RunnerCreateWithoutCommandBlacklistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
}

export interface WorkflowCommandWhereUniqueInput {
  id?: ID_Input
}

export interface RunnerCreateWithoutCommandBlacklistedInput {
  publicKey: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted?: WorkflowSourceCreateManyWithoutBlacklistInput
  commandWhitelisted?: WorkflowCommandCreateManyWithoutWhitelistInput
}

export interface WorkflowWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowSourceCreateManyWithoutBlacklistInput {
  create?: WorkflowSourceCreateWithoutBlacklistInput[] | WorkflowSourceCreateWithoutBlacklistInput
  connect?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
}

export interface WorkflowCommandExecutionWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowSourceCreateWithoutBlacklistInput {
  whitelist?: RunnerCreateManyWithoutSourceWhitelistedInput
  service: ServiceCreateOneInput
  event: EventCreateOneInput
  filters?: FilterDefinitionCreateManyInput
}

export interface WorkflowExecutionUpdateInput {
  duration?: Int
  fee?: Int
  commandExecutions?: WorkflowCommandExecutionUpdateManyInput
}

export interface RunnerCreateManyWithoutSourceWhitelistedInput {
  create?: RunnerCreateWithoutSourceWhitelistedInput[] | RunnerCreateWithoutSourceWhitelistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
}

export interface WorkflowCommandUpdateManyInput {
  create?: WorkflowCommandCreateInput[] | WorkflowCommandCreateInput
  connect?: WorkflowCommandWhereUniqueInput[] | WorkflowCommandWhereUniqueInput
  disconnect?: WorkflowCommandWhereUniqueInput[] | WorkflowCommandWhereUniqueInput
  delete?: WorkflowCommandWhereUniqueInput[] | WorkflowCommandWhereUniqueInput
}

export interface RunnerCreateWithoutSourceWhitelistedInput {
  publicKey: String
  stake?: Float
  reliability?: Float
  sourceBlacklisted?: WorkflowSourceCreateManyWithoutBlacklistInput
  commandWhitelisted?: WorkflowCommandCreateManyWithoutWhitelistInput
  commandBlacklisted?: WorkflowCommandCreateManyWithoutBlacklistInput
}

export interface WorkflowUpdateInput {
  title?: String
  description?: String
  source?: WorkflowSourceUpdateOneInput
  commands?: WorkflowCommandUpdateManyInput
  executions?: WorkflowExecutionUpdateManyInput
}

export interface WorkflowCommandCreateManyWithoutBlacklistInput {
  create?: WorkflowCommandCreateWithoutBlacklistInput[] | WorkflowCommandCreateWithoutBlacklistInput
  connect?: WorkflowCommandWhereUniqueInput[] | WorkflowCommandWhereUniqueInput
}

export interface WorkflowCommandUpdateInput {
  whitelist?: RunnerUpdateManyWithoutCommandWhitelistedInput
  blacklist?: RunnerUpdateManyWithoutCommandBlacklistedInput
  service?: ServiceUpdateOneInput
  command?: CommandUpdateOneInput
  parameters?: WorkflowResultUpdateOneInput
}

export interface WorkflowCommandCreateWithoutBlacklistInput {
  whitelist?: RunnerCreateManyWithoutCommandWhitelistedInput
  service: ServiceCreateOneInput
  command: CommandCreateOneInput
  parameters: WorkflowResultCreateOneInput
}

export interface WorkflowConstantUpdateInput {
  value?: String
}

export interface RunnerCreateManyWithoutCommandWhitelistedInput {
  create?: RunnerCreateWithoutCommandWhitelistedInput[] | RunnerCreateWithoutCommandWhitelistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
}

export interface EventUpdateManyInput {
  create?: EventCreateInput[] | EventCreateInput
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput
  disconnect?: EventWhereUniqueInput[] | EventWhereUniqueInput
  delete?: EventWhereUniqueInput[] | EventWhereUniqueInput
}

export interface RunnerCreateWithoutCommandWhitelistedInput {
  publicKey: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted?: WorkflowSourceCreateManyWithoutBlacklistInput
  commandBlacklisted?: WorkflowCommandCreateManyWithoutBlacklistInput
}

export interface CommandUpdateInput {
  title?: String
  description?: String
  arguments?: ParameterUpdateManyInput
}

export interface ServiceCreateOneInput {
  create?: ServiceCreateInput
  connect?: ServiceWhereUniqueInput
}

export interface EventUpdateInput {
  title?: String
  description?: String
  data?: ParameterUpdateManyInput
}

export interface ServiceCreateInput {
  title: String
  description?: String
  events?: EventCreateManyInput
  commands?: CommandCreateManyInput
}

export interface FilterDefinitionUpdateInput {
  predicate?: PREDICATE
  value?: String
  parameter?: ParameterUpdateOneInput
}

export interface EventCreateManyInput {
  create?: EventCreateInput[] | EventCreateInput
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput
}

export interface WorkflowSourceUpsertWithoutWhitelistInput {
  where: WorkflowSourceWhereUniqueInput
  update: WorkflowSourceUpdateWithoutWhitelistDataInput
  create: WorkflowSourceCreateWithoutWhitelistInput
}

export interface EventCreateInput {
  title: String
  description?: String
  data?: ParameterCreateManyInput
}

export interface WorkflowCommandUpsertWithoutWhitelistInput {
  where: WorkflowCommandWhereUniqueInput
  update: WorkflowCommandUpdateWithoutWhitelistDataInput
  create: WorkflowCommandCreateWithoutWhitelistInput
}

export interface ParameterCreateManyInput {
  create?: ParameterCreateInput[] | ParameterCreateInput
  connect?: ParameterWhereUniqueInput[] | ParameterWhereUniqueInput
}

export interface WorkflowSourceUpsertWithoutBlacklistInput {
  where: WorkflowSourceWhereUniqueInput
  update: WorkflowSourceUpdateWithoutBlacklistDataInput
  create: WorkflowSourceCreateWithoutBlacklistInput
}

export interface RunnerUpdateManyWithoutSourceWhitelistedInput {
  create?: RunnerCreateWithoutSourceWhitelistedInput[] | RunnerCreateWithoutSourceWhitelistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  disconnect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  delete?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  update?: RunnerUpdateWithoutSourceWhitelistedInput[] | RunnerUpdateWithoutSourceWhitelistedInput
  upsert?: RunnerUpsertWithoutSourceWhitelistedInput[] | RunnerUpsertWithoutSourceWhitelistedInput
}

export interface EventUpdateOneInput {
  create?: EventCreateInput
  connect?: EventWhereUniqueInput
  disconnect?: EventWhereUniqueInput
  delete?: EventWhereUniqueInput
}

export interface CommandCreateManyInput {
  create?: CommandCreateInput[] | CommandCreateInput
  connect?: CommandWhereUniqueInput[] | CommandWhereUniqueInput
}

export interface WorkflowCommandUpsertWithoutBlacklistInput {
  where: WorkflowCommandWhereUniqueInput
  update: WorkflowCommandUpdateWithoutBlacklistDataInput
  create: WorkflowCommandCreateWithoutBlacklistInput
}

export interface CommandCreateInput {
  title: String
  description?: String
  arguments?: ParameterCreateManyInput
}

export interface WorkflowSubscriptionWhereInput {
  AND?: WorkflowSubscriptionWhereInput[] | WorkflowSubscriptionWhereInput
  OR?: WorkflowSubscriptionWhereInput[] | WorkflowSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowWhereInput
}

export interface CommandCreateOneInput {
  create?: CommandCreateInput
  connect?: CommandWhereUniqueInput
}

export interface WorkflowCommandWhereInput {
  AND?: WorkflowCommandWhereInput[] | WorkflowCommandWhereInput
  OR?: WorkflowCommandWhereInput[] | WorkflowCommandWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  whitelist_every?: RunnerWhereInput
  whitelist_some?: RunnerWhereInput
  whitelist_none?: RunnerWhereInput
  blacklist_every?: RunnerWhereInput
  blacklist_some?: RunnerWhereInput
  blacklist_none?: RunnerWhereInput
  service?: ServiceWhereInput
  command?: CommandWhereInput
  parameters?: WorkflowResultWhereInput
}

export interface WorkflowResultCreateOneInput {
  create?: WorkflowResultCreateInput
  connect?: WorkflowResultWhereUniqueInput
}

export interface CommandWhereInput {
  AND?: CommandWhereInput[] | CommandWhereInput
  OR?: CommandWhereInput[] | CommandWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  arguments_every?: ParameterWhereInput
  arguments_some?: ParameterWhereInput
  arguments_none?: ParameterWhereInput
}

export interface WorkflowResultCreateInput {
  value: String
  reference: ParameterCreateOneInput
}

export interface WorkflowConstantWhereInput {
  AND?: WorkflowConstantWhereInput[] | WorkflowConstantWhereInput
  OR?: WorkflowConstantWhereInput[] | WorkflowConstantWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  value?: String
  value_not?: String
  value_in?: String[] | String
  value_not_in?: String[] | String
  value_lt?: String
  value_lte?: String
  value_gt?: String
  value_gte?: String
  value_contains?: String
  value_not_contains?: String
  value_starts_with?: String
  value_not_starts_with?: String
  value_ends_with?: String
  value_not_ends_with?: String
}

export interface ParameterCreateOneInput {
  create?: ParameterCreateInput
  connect?: ParameterWhereUniqueInput
}

export interface WorkflowWhereInput {
  AND?: WorkflowWhereInput[] | WorkflowWhereInput
  OR?: WorkflowWhereInput[] | WorkflowWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  source?: WorkflowSourceWhereInput
  commands_every?: WorkflowCommandWhereInput
  commands_some?: WorkflowCommandWhereInput
  commands_none?: WorkflowCommandWhereInput
  executions_every?: WorkflowExecutionWhereInput
  executions_some?: WorkflowExecutionWhereInput
  executions_none?: WorkflowExecutionWhereInput
}

export interface EventCreateOneInput {
  create?: EventCreateInput
  connect?: EventWhereUniqueInput
}

export interface ParameterSubscriptionWhereInput {
  AND?: ParameterSubscriptionWhereInput[] | ParameterSubscriptionWhereInput
  OR?: ParameterSubscriptionWhereInput[] | ParameterSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ParameterWhereInput
}

export interface FilterDefinitionCreateManyInput {
  create?: FilterDefinitionCreateInput[] | FilterDefinitionCreateInput
  connect?: FilterDefinitionWhereUniqueInput[] | FilterDefinitionWhereUniqueInput
}

export interface WorkflowCommandExecutionUpdateInput {
  duration?: Int
  fee?: Int
  results?: WorkflowResultUpdateManyInput
}

export interface WorkflowSourceUpdateWithoutBlacklistDataInput {
  whitelist?: RunnerUpdateManyWithoutSourceWhitelistedInput
  service?: ServiceUpdateOneInput
  event?: EventUpdateOneInput
  filters?: FilterDefinitionUpdateManyInput
}

export interface EventWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowConstantCreateInput {
  value: String
}

export interface WorkflowSourceWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowSourceCreateInput {
  whitelist?: RunnerCreateManyWithoutSourceWhitelistedInput
  blacklist?: RunnerCreateManyWithoutSourceBlacklistedInput
  service: ServiceCreateOneInput
  event: EventCreateOneInput
  filters?: FilterDefinitionCreateManyInput
}

export interface WorkflowExecutionWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowCommandCreateInput {
  whitelist?: RunnerCreateManyWithoutCommandWhitelistedInput
  blacklist?: RunnerCreateManyWithoutCommandBlacklistedInput
  service: ServiceCreateOneInput
  command: CommandCreateOneInput
  parameters: WorkflowResultCreateOneInput
}

export interface WorkflowExecutionUpdateManyInput {
  create?: WorkflowExecutionCreateInput[] | WorkflowExecutionCreateInput
  connect?: WorkflowExecutionWhereUniqueInput[] | WorkflowExecutionWhereUniqueInput
  disconnect?: WorkflowExecutionWhereUniqueInput[] | WorkflowExecutionWhereUniqueInput
  delete?: WorkflowExecutionWhereUniqueInput[] | WorkflowExecutionWhereUniqueInput
}

export interface WorkflowCreateInput {
  title: String
  description?: String
  source: WorkflowSourceCreateOneInput
  commands?: WorkflowCommandCreateManyInput
  executions?: WorkflowExecutionCreateManyInput
}

export interface WorkflowResultUpdateInput {
  value?: String
  reference?: ParameterUpdateOneInput
}

export interface WorkflowSourceCreateOneInput {
  create?: WorkflowSourceCreateInput
  connect?: WorkflowSourceWhereUniqueInput
}

export interface CommandUpdateManyInput {
  create?: CommandCreateInput[] | CommandCreateInput
  connect?: CommandWhereUniqueInput[] | CommandWhereUniqueInput
  disconnect?: CommandWhereUniqueInput[] | CommandWhereUniqueInput
  delete?: CommandWhereUniqueInput[] | CommandWhereUniqueInput
}

export interface WorkflowCommandCreateManyInput {
  create?: WorkflowCommandCreateInput[] | WorkflowCommandCreateInput
  connect?: WorkflowCommandWhereUniqueInput[] | WorkflowCommandWhereUniqueInput
}

export interface ParameterUpdateManyInput {
  create?: ParameterCreateInput[] | ParameterCreateInput
  connect?: ParameterWhereUniqueInput[] | ParameterWhereUniqueInput
  disconnect?: ParameterWhereUniqueInput[] | ParameterWhereUniqueInput
  delete?: ParameterWhereUniqueInput[] | ParameterWhereUniqueInput
}

export interface WorkflowExecutionCreateManyInput {
  create?: WorkflowExecutionCreateInput[] | WorkflowExecutionCreateInput
  connect?: WorkflowExecutionWhereUniqueInput[] | WorkflowExecutionWhereUniqueInput
}

export interface ParameterUpdateInput {
  title?: String
  description?: String
  type?: TYPE
  required?: Boolean
}

export interface WorkflowExecutionCreateInput {
  duration: Int
  fee: Int
  commandExecutions?: WorkflowCommandExecutionCreateManyInput
}

export interface RunnerUpsertWithoutCommandBlacklistedInput {
  where: RunnerWhereUniqueInput
  update: RunnerUpdateWithoutCommandBlacklistedDataInput
  create: RunnerCreateWithoutCommandBlacklistedInput
}

export interface WorkflowCommandExecutionCreateManyInput {
  create?: WorkflowCommandExecutionCreateInput[] | WorkflowCommandExecutionCreateInput
  connect?: WorkflowCommandExecutionWhereUniqueInput[] | WorkflowCommandExecutionWhereUniqueInput
}

export interface RunnerUpsertWithoutSourceWhitelistedInput {
  where: RunnerWhereUniqueInput
  update: RunnerUpdateWithoutSourceWhitelistedDataInput
  create: RunnerCreateWithoutSourceWhitelistedInput
}

export interface WorkflowCommandExecutionCreateInput {
  duration: Int
  fee: Int
  results?: WorkflowResultCreateManyInput
}

export interface WorkflowResultWhereInput {
  AND?: WorkflowResultWhereInput[] | WorkflowResultWhereInput
  OR?: WorkflowResultWhereInput[] | WorkflowResultWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  value?: String
  value_not?: String
  value_in?: String[] | String
  value_not_in?: String[] | String
  value_lt?: String
  value_lte?: String
  value_gt?: String
  value_gte?: String
  value_contains?: String
  value_not_contains?: String
  value_starts_with?: String
  value_not_starts_with?: String
  value_ends_with?: String
  value_not_ends_with?: String
  reference?: ParameterWhereInput
}

export interface WorkflowResultCreateManyInput {
  create?: WorkflowResultCreateInput[] | WorkflowResultCreateInput
  connect?: WorkflowResultWhereUniqueInput[] | WorkflowResultWhereUniqueInput
}

export interface CommandSubscriptionWhereInput {
  AND?: CommandSubscriptionWhereInput[] | CommandSubscriptionWhereInput
  OR?: CommandSubscriptionWhereInput[] | CommandSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: CommandWhereInput
}

export interface RunnerUpdateInput {
  publicKey?: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted?: WorkflowSourceUpdateManyWithoutBlacklistInput
  commandWhitelisted?: WorkflowCommandUpdateManyWithoutWhitelistInput
  commandBlacklisted?: WorkflowCommandUpdateManyWithoutBlacklistInput
}

export interface WorkflowCommandExecutionWhereInput {
  AND?: WorkflowCommandExecutionWhereInput[] | WorkflowCommandExecutionWhereInput
  OR?: WorkflowCommandExecutionWhereInput[] | WorkflowCommandExecutionWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  duration?: Int
  duration_not?: Int
  duration_in?: Int[] | Int
  duration_not_in?: Int[] | Int
  duration_lt?: Int
  duration_lte?: Int
  duration_gt?: Int
  duration_gte?: Int
  fee?: Int
  fee_not?: Int
  fee_in?: Int[] | Int
  fee_not_in?: Int[] | Int
  fee_lt?: Int
  fee_lte?: Int
  fee_gt?: Int
  fee_gte?: Int
  results_every?: WorkflowResultWhereInput
  results_some?: WorkflowResultWhereInput
  results_none?: WorkflowResultWhereInput
}

export interface WorkflowSourceUpdateManyWithoutWhitelistInput {
  create?: WorkflowSourceCreateWithoutWhitelistInput[] | WorkflowSourceCreateWithoutWhitelistInput
  connect?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
  disconnect?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
  delete?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
  update?: WorkflowSourceUpdateWithoutWhitelistInput[] | WorkflowSourceUpdateWithoutWhitelistInput
  upsert?: WorkflowSourceUpsertWithoutWhitelistInput[] | WorkflowSourceUpsertWithoutWhitelistInput
}

export interface ParameterWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowSourceUpdateWithoutWhitelistInput {
  where: WorkflowSourceWhereUniqueInput
  data: WorkflowSourceUpdateWithoutWhitelistDataInput
}

export interface WorkflowResultWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowSourceUpdateWithoutWhitelistDataInput {
  blacklist?: RunnerUpdateManyWithoutSourceBlacklistedInput
  service?: ServiceUpdateOneInput
  event?: EventUpdateOneInput
  filters?: FilterDefinitionUpdateManyInput
}

export interface WorkflowSourceUpdateOneInput {
  create?: WorkflowSourceCreateInput
  connect?: WorkflowSourceWhereUniqueInput
  disconnect?: WorkflowSourceWhereUniqueInput
  delete?: WorkflowSourceWhereUniqueInput
}

export interface RunnerUpdateManyWithoutSourceBlacklistedInput {
  create?: RunnerCreateWithoutSourceBlacklistedInput[] | RunnerCreateWithoutSourceBlacklistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  disconnect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  delete?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  update?: RunnerUpdateWithoutSourceBlacklistedInput[] | RunnerUpdateWithoutSourceBlacklistedInput
  upsert?: RunnerUpsertWithoutSourceBlacklistedInput[] | RunnerUpsertWithoutSourceBlacklistedInput
}

export interface ServiceUpdateInput {
  title?: String
  description?: String
  events?: EventUpdateManyInput
  commands?: CommandUpdateManyInput
}

export interface RunnerUpdateWithoutSourceBlacklistedInput {
  where: RunnerWhereUniqueInput
  data: RunnerUpdateWithoutSourceBlacklistedDataInput
}

export interface RunnerUpsertWithoutSourceBlacklistedInput {
  where: RunnerWhereUniqueInput
  update: RunnerUpdateWithoutSourceBlacklistedDataInput
  create: RunnerCreateWithoutSourceBlacklistedInput
}

export interface RunnerUpdateWithoutSourceBlacklistedDataInput {
  publicKey?: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceUpdateManyWithoutWhitelistInput
  commandWhitelisted?: WorkflowCommandUpdateManyWithoutWhitelistInput
  commandBlacklisted?: WorkflowCommandUpdateManyWithoutBlacklistInput
}

export interface WorkflowCommandExecutionSubscriptionWhereInput {
  AND?: WorkflowCommandExecutionSubscriptionWhereInput[] | WorkflowCommandExecutionSubscriptionWhereInput
  OR?: WorkflowCommandExecutionSubscriptionWhereInput[] | WorkflowCommandExecutionSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowCommandExecutionWhereInput
}

export interface WorkflowCommandUpdateManyWithoutWhitelistInput {
  create?: WorkflowCommandCreateWithoutWhitelistInput[] | WorkflowCommandCreateWithoutWhitelistInput
  connect?: WorkflowCommandWhereUniqueInput[] | WorkflowCommandWhereUniqueInput
  disconnect?: WorkflowCommandWhereUniqueInput[] | WorkflowCommandWhereUniqueInput
  delete?: WorkflowCommandWhereUniqueInput[] | WorkflowCommandWhereUniqueInput
  update?: WorkflowCommandUpdateWithoutWhitelistInput[] | WorkflowCommandUpdateWithoutWhitelistInput
  upsert?: WorkflowCommandUpsertWithoutWhitelistInput[] | WorkflowCommandUpsertWithoutWhitelistInput
}

export interface FilterDefinitionSubscriptionWhereInput {
  AND?: FilterDefinitionSubscriptionWhereInput[] | FilterDefinitionSubscriptionWhereInput
  OR?: FilterDefinitionSubscriptionWhereInput[] | FilterDefinitionSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: FilterDefinitionWhereInput
}

export interface WorkflowCommandUpdateWithoutWhitelistInput {
  where: WorkflowCommandWhereUniqueInput
  data: WorkflowCommandUpdateWithoutWhitelistDataInput
}

export interface ServiceWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowCommandUpdateWithoutWhitelistDataInput {
  blacklist?: RunnerUpdateManyWithoutCommandBlacklistedInput
  service?: ServiceUpdateOneInput
  command?: CommandUpdateOneInput
  parameters?: WorkflowResultUpdateOneInput
}

export interface WorkflowSourceUpdateInput {
  whitelist?: RunnerUpdateManyWithoutSourceWhitelistedInput
  blacklist?: RunnerUpdateManyWithoutSourceBlacklistedInput
  service?: ServiceUpdateOneInput
  event?: EventUpdateOneInput
  filters?: FilterDefinitionUpdateManyInput
}

export interface FilterDefinitionUpdateManyInput {
  create?: FilterDefinitionCreateInput[] | FilterDefinitionCreateInput
  connect?: FilterDefinitionWhereUniqueInput[] | FilterDefinitionWhereUniqueInput
  disconnect?: FilterDefinitionWhereUniqueInput[] | FilterDefinitionWhereUniqueInput
  delete?: FilterDefinitionWhereUniqueInput[] | FilterDefinitionWhereUniqueInput
}

export interface WorkflowSourceUpdateManyWithoutBlacklistInput {
  create?: WorkflowSourceCreateWithoutBlacklistInput[] | WorkflowSourceCreateWithoutBlacklistInput
  connect?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
  disconnect?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
  delete?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
  update?: WorkflowSourceUpdateWithoutBlacklistInput[] | WorkflowSourceUpdateWithoutBlacklistInput
  upsert?: WorkflowSourceUpsertWithoutBlacklistInput[] | WorkflowSourceUpsertWithoutBlacklistInput
}

export interface RunnerUpdateWithoutCommandBlacklistedDataInput {
  publicKey?: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted?: WorkflowSourceUpdateManyWithoutBlacklistInput
  commandWhitelisted?: WorkflowCommandUpdateManyWithoutWhitelistInput
}

export interface RunnerUpdateWithoutCommandBlacklistedInput {
  where: RunnerWhereUniqueInput
  data: RunnerUpdateWithoutCommandBlacklistedDataInput
}

export interface RunnerUpdateManyWithoutCommandBlacklistedInput {
  create?: RunnerCreateWithoutCommandBlacklistedInput[] | RunnerCreateWithoutCommandBlacklistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  disconnect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  delete?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  update?: RunnerUpdateWithoutCommandBlacklistedInput[] | RunnerUpdateWithoutCommandBlacklistedInput
  upsert?: RunnerUpsertWithoutCommandBlacklistedInput[] | RunnerUpsertWithoutCommandBlacklistedInput
}

export interface FilterDefinitionWhereInput {
  AND?: FilterDefinitionWhereInput[] | FilterDefinitionWhereInput
  OR?: FilterDefinitionWhereInput[] | FilterDefinitionWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  predicate?: PREDICATE
  predicate_not?: PREDICATE
  predicate_in?: PREDICATE[] | PREDICATE
  predicate_not_in?: PREDICATE[] | PREDICATE
  value?: String
  value_not?: String
  value_in?: String[] | String
  value_not_in?: String[] | String
  value_lt?: String
  value_lte?: String
  value_gt?: String
  value_gte?: String
  value_contains?: String
  value_not_contains?: String
  value_starts_with?: String
  value_not_starts_with?: String
  value_ends_with?: String
  value_not_ends_with?: String
  parameter?: ParameterWhereInput
}

export interface ParameterUpdateOneInput {
  create?: ParameterCreateInput
  connect?: ParameterWhereUniqueInput
  disconnect?: ParameterWhereUniqueInput
  delete?: ParameterWhereUniqueInput
}

export interface WorkflowCommandExecutionUpdateManyInput {
  create?: WorkflowCommandExecutionCreateInput[] | WorkflowCommandExecutionCreateInput
  connect?: WorkflowCommandExecutionWhereUniqueInput[] | WorkflowCommandExecutionWhereUniqueInput
  disconnect?: WorkflowCommandExecutionWhereUniqueInput[] | WorkflowCommandExecutionWhereUniqueInput
  delete?: WorkflowCommandExecutionWhereUniqueInput[] | WorkflowCommandExecutionWhereUniqueInput
}

export interface RunnerSubscriptionWhereInput {
  AND?: RunnerSubscriptionWhereInput[] | RunnerSubscriptionWhereInput
  OR?: RunnerSubscriptionWhereInput[] | RunnerSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: RunnerWhereInput
}

export interface Node {
  id: ID_Output
}

export interface WorkflowCommandExecutionPreviousValues {
  id: ID_Output
  duration: Int
  fee: Int
}

export interface Runner extends Node {
  id: ID_Output
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted?: WorkflowSource[]
  sourceBlacklisted?: WorkflowSource[]
  commandWhitelisted?: WorkflowCommand[]
  commandBlacklisted?: WorkflowCommand[]
}

export interface BatchPayload {
  count: Long
}

export interface AggregateWorkflowCommandExecution {
  count: Int
}

export interface WorkflowCommandExecutionSubscriptionPayload {
  mutation: MutationType
  node?: WorkflowCommandExecution
  updatedFields?: String[]
  previousValues?: WorkflowCommandExecutionPreviousValues
}

export interface Service extends Node {
  id: ID_Output
  title: String
  description?: String
  events?: Event[]
  commands?: Command[]
}

export interface WorkflowCommandExecutionEdge {
  node: WorkflowCommandExecution
  cursor: String
}

export interface WorkflowCommandExecutionConnection {
  pageInfo: PageInfo
  edges: WorkflowCommandExecutionEdge[]
  aggregate: AggregateWorkflowCommandExecution
}

export interface AggregateWorkflowExecution {
  count: Int
}

export interface WorkflowExecutionConnection {
  pageInfo: PageInfo
  edges: WorkflowExecutionEdge[]
  aggregate: AggregateWorkflowExecution
}

export interface WorkflowExecution extends Node {
  id: ID_Output
  duration: Int
  fee: Int
  commandExecutions?: WorkflowCommandExecution[]
}

export interface WorkflowEdge {
  node: Workflow
  cursor: String
}

export interface WorkflowSource extends Node {
  id: ID_Output
  whitelist?: Runner[]
  blacklist?: Runner[]
  service: Service
  event: Event
  filters?: FilterDefinition[]
}

export interface AggregateWorkflowResult {
  count: Int
}

export interface RunnerSubscriptionPayload {
  mutation: MutationType
  node?: Runner
  updatedFields?: String[]
  previousValues?: RunnerPreviousValues
}

export interface WorkflowResultConnection {
  pageInfo: PageInfo
  edges: WorkflowResultEdge[]
  aggregate: AggregateWorkflowResult
}

export interface RunnerPreviousValues {
  id: ID_Output
  publicKey: String
  stake: Float
  reliability: Float
}

export interface WorkflowCommandEdge {
  node: WorkflowCommand
  cursor: String
}

export interface Workflow extends Node {
  id: ID_Output
  title: String
  description?: String
  source: WorkflowSource
  commands?: WorkflowCommand[]
  executions?: WorkflowExecution[]
}

export interface AggregateWorkflowSource {
  count: Int
}

export interface ParameterSubscriptionPayload {
  mutation: MutationType
  node?: Parameter
  updatedFields?: String[]
  previousValues?: ParameterPreviousValues
}

export interface WorkflowSourceConnection {
  pageInfo: PageInfo
  edges: WorkflowSourceEdge[]
  aggregate: AggregateWorkflowSource
}

export interface ParameterPreviousValues {
  id: ID_Output
  title: String
  description?: String
  type: TYPE
  required: Boolean
}

export interface WorkflowConstantEdge {
  node: WorkflowConstant
  cursor: String
}

export interface WorkflowConstant extends Node {
  id: ID_Output
  value: String
}

export interface AggregateService {
  count: Int
}

export interface FilterDefinitionSubscriptionPayload {
  mutation: MutationType
  node?: FilterDefinition
  updatedFields?: String[]
  previousValues?: FilterDefinitionPreviousValues
}

export interface ServiceConnection {
  pageInfo: PageInfo
  edges: ServiceEdge[]
  aggregate: AggregateService
}

export interface FilterDefinitionPreviousValues {
  id: ID_Output
  predicate: PREDICATE
  value: String
}

export interface CommandEdge {
  node: Command
  cursor: String
}

export interface WorkflowExecutionPreviousValues {
  id: ID_Output
  duration: Int
  fee: Int
}

export interface AggregateEvent {
  count: Int
}

export interface EventSubscriptionPayload {
  mutation: MutationType
  node?: Event
  updatedFields?: String[]
  previousValues?: EventPreviousValues
}

export interface EventConnection {
  pageInfo: PageInfo
  edges: EventEdge[]
  aggregate: AggregateEvent
}

export interface EventPreviousValues {
  id: ID_Output
  title: String
  description?: String
}

export interface FilterDefinitionEdge {
  node: FilterDefinition
  cursor: String
}

export interface WorkflowResult extends Node {
  id: ID_Output
  reference: Parameter
  value: String
}

export interface AggregateParameter {
  count: Int
}

export interface CommandSubscriptionPayload {
  mutation: MutationType
  node?: Command
  updatedFields?: String[]
  previousValues?: CommandPreviousValues
}

export interface ParameterConnection {
  pageInfo: PageInfo
  edges: ParameterEdge[]
  aggregate: AggregateParameter
}

export interface CommandPreviousValues {
  id: ID_Output
  title: String
  description?: String
}

export interface RunnerEdge {
  node: Runner
  cursor: String
}

export interface WorkflowCommand extends Node {
  id: ID_Output
  whitelist?: Runner[]
  blacklist?: Runner[]
  service: Service
  command: Command
  parameters: WorkflowResult
}

export interface RunnerConnection {
  pageInfo: PageInfo
  edges: RunnerEdge[]
  aggregate: AggregateRunner
}

export interface ServiceSubscriptionPayload {
  mutation: MutationType
  node?: Service
  updatedFields?: String[]
  previousValues?: ServicePreviousValues
}

export interface WorkflowExecutionEdge {
  node: WorkflowExecution
  cursor: String
}

export interface ServicePreviousValues {
  id: ID_Output
  title: String
  description?: String
}

export interface WorkflowConnection {
  pageInfo: PageInfo
  edges: WorkflowEdge[]
  aggregate: AggregateWorkflow
}

export interface FilterDefinition extends Node {
  id: ID_Output
  parameter: Parameter
  predicate: PREDICATE
  value: String
}

export interface AggregateWorkflowCommand {
  count: Int
}

export interface WorkflowConstantSubscriptionPayload {
  mutation: MutationType
  node?: WorkflowConstant
  updatedFields?: String[]
  previousValues?: WorkflowConstantPreviousValues
}

export interface WorkflowSourceEdge {
  node: WorkflowSource
  cursor: String
}

export interface WorkflowConstantPreviousValues {
  id: ID_Output
  value: String
}

export interface WorkflowConstantConnection {
  pageInfo: PageInfo
  edges: WorkflowConstantEdge[]
  aggregate: AggregateWorkflowConstant
}

export interface Command extends Node {
  id: ID_Output
  title: String
  description?: String
  arguments?: Parameter[]
}

export interface AggregateCommand {
  count: Int
}

export interface WorkflowSourceSubscriptionPayload {
  mutation: MutationType
  node?: WorkflowSource
  updatedFields?: String[]
  previousValues?: WorkflowSourcePreviousValues
}

export interface EventEdge {
  node: Event
  cursor: String
}

export interface WorkflowSourcePreviousValues {
  id: ID_Output
}

export interface FilterDefinitionConnection {
  pageInfo: PageInfo
  edges: FilterDefinitionEdge[]
  aggregate: AggregateFilterDefinition
}

export interface Parameter extends Node {
  id: ID_Output
  title: String
  description?: String
  type: TYPE
  required: Boolean
}

export interface AggregateRunner {
  count: Int
}

export interface WorkflowCommandSubscriptionPayload {
  mutation: MutationType
  node?: WorkflowCommand
  updatedFields?: String[]
  previousValues?: WorkflowCommandPreviousValues
}

export interface WorkflowCommandExecution extends Node {
  id: ID_Output
  duration: Int
  fee: Int
  results?: WorkflowResult[]
}

export interface WorkflowCommandPreviousValues {
  id: ID_Output
}

export interface WorkflowResultEdge {
  node: WorkflowResult
  cursor: String
}

export interface Event extends Node {
  id: ID_Output
  title: String
  description?: String
  data?: Parameter[]
}

export interface AggregateWorkflowConstant {
  count: Int
}

export interface WorkflowResultSubscriptionPayload {
  mutation: MutationType
  node?: WorkflowResult
  updatedFields?: String[]
  previousValues?: WorkflowResultPreviousValues
}

export interface CommandConnection {
  pageInfo: PageInfo
  edges: CommandEdge[]
  aggregate: AggregateCommand
}

export interface ParameterEdge {
  node: Parameter
  cursor: String
}

export interface WorkflowPreviousValues {
  id: ID_Output
  title: String
  description?: String
}

export interface WorkflowSubscriptionPayload {
  mutation: MutationType
  node?: Workflow
  updatedFields?: String[]
  previousValues?: WorkflowPreviousValues
}

export interface WorkflowExecutionSubscriptionPayload {
  mutation: MutationType
  node?: WorkflowExecution
  updatedFields?: String[]
  previousValues?: WorkflowExecutionPreviousValues
}

export interface WorkflowResultPreviousValues {
  id: ID_Output
  value: String
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface AggregateFilterDefinition {
  count: Int
}

export interface ServiceEdge {
  node: Service
  cursor: String
}

export interface WorkflowCommandConnection {
  pageInfo: PageInfo
  edges: WorkflowCommandEdge[]
  aggregate: AggregateWorkflowCommand
}

export interface AggregateWorkflow {
  count: Int
}

export type Long = string

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  runners: (args: { where?: RunnerWhereInput, orderBy?: RunnerOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Runner[]>
  parameters: (args: { where?: ParameterWhereInput, orderBy?: ParameterOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Parameter[]>
  filterDefinitions: (args: { where?: FilterDefinitionWhereInput, orderBy?: FilterDefinitionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinition[]>
  events: (args: { where?: EventWhereInput, orderBy?: EventOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Event[]>
  commands: (args: { where?: CommandWhereInput, orderBy?: CommandOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Command[]>
  services: (args: { where?: ServiceWhereInput, orderBy?: ServiceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Service[]>
  workflowConstants: (args: { where?: WorkflowConstantWhereInput, orderBy?: WorkflowConstantOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstant[]>
  workflowSources: (args: { where?: WorkflowSourceWhereInput, orderBy?: WorkflowSourceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSource[]>
  workflowCommands: (args: { where?: WorkflowCommandWhereInput, orderBy?: WorkflowCommandOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommand[]>
  workflowResults: (args: { where?: WorkflowResultWhereInput, orderBy?: WorkflowResultOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResult[]>
  workflows: (args: { where?: WorkflowWhereInput, orderBy?: WorkflowOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Workflow[]>
  workflowExecutions: (args: { where?: WorkflowExecutionWhereInput, orderBy?: WorkflowExecutionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecution[]>
  workflowCommandExecutions: (args: { where?: WorkflowCommandExecutionWhereInput, orderBy?: WorkflowCommandExecutionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommandExecution[]>
  runner: (args: { where: RunnerWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Runner | null>
  parameter: (args: { where: ParameterWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Parameter | null>
  filterDefinition: (args: { where: FilterDefinitionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinition | null>
  event: (args: { where: EventWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Event | null>
  command: (args: { where: CommandWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Command | null>
  service: (args: { where: ServiceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Service | null>
  workflowConstant: (args: { where: WorkflowConstantWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstant | null>
  workflowSource: (args: { where: WorkflowSourceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSource | null>
  workflowCommand: (args: { where: WorkflowCommandWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommand | null>
  workflowResult: (args: { where: WorkflowResultWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResult | null>
  workflow: (args: { where: WorkflowWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Workflow | null>
  workflowExecution: (args: { where: WorkflowExecutionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecution | null>
  workflowCommandExecution: (args: { where: WorkflowCommandExecutionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommandExecution | null>
  runnersConnection: (args: { where?: RunnerWhereInput, orderBy?: RunnerOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<RunnerConnection>
  parametersConnection: (args: { where?: ParameterWhereInput, orderBy?: ParameterOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ParameterConnection>
  filterDefinitionsConnection: (args: { where?: FilterDefinitionWhereInput, orderBy?: FilterDefinitionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinitionConnection>
  eventsConnection: (args: { where?: EventWhereInput, orderBy?: EventOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<EventConnection>
  commandsConnection: (args: { where?: CommandWhereInput, orderBy?: CommandOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<CommandConnection>
  servicesConnection: (args: { where?: ServiceWhereInput, orderBy?: ServiceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ServiceConnection>
  workflowConstantsConnection: (args: { where?: WorkflowConstantWhereInput, orderBy?: WorkflowConstantOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstantConnection>
  workflowSourcesConnection: (args: { where?: WorkflowSourceWhereInput, orderBy?: WorkflowSourceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSourceConnection>
  workflowCommandsConnection: (args: { where?: WorkflowCommandWhereInput, orderBy?: WorkflowCommandOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommandConnection>
  workflowResultsConnection: (args: { where?: WorkflowResultWhereInput, orderBy?: WorkflowResultOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResultConnection>
  workflowsConnection: (args: { where?: WorkflowWhereInput, orderBy?: WorkflowOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConnection>
  workflowExecutionsConnection: (args: { where?: WorkflowExecutionWhereInput, orderBy?: WorkflowExecutionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecutionConnection>
  workflowCommandExecutionsConnection: (args: { where?: WorkflowCommandExecutionWhereInput, orderBy?: WorkflowCommandExecutionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommandExecutionConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createRunner: (args: { data: RunnerCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Runner>
  createParameter: (args: { data: ParameterCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Parameter>
  createFilterDefinition: (args: { data: FilterDefinitionCreateInput }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinition>
  createEvent: (args: { data: EventCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Event>
  createCommand: (args: { data: CommandCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Command>
  createService: (args: { data: ServiceCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Service>
  createWorkflowConstant: (args: { data: WorkflowConstantCreateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstant>
  createWorkflowSource: (args: { data: WorkflowSourceCreateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSource>
  createWorkflowCommand: (args: { data: WorkflowCommandCreateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommand>
  createWorkflowResult: (args: { data: WorkflowResultCreateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResult>
  createWorkflow: (args: { data: WorkflowCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Workflow>
  createWorkflowExecution: (args: { data: WorkflowExecutionCreateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecution>
  createWorkflowCommandExecution: (args: { data: WorkflowCommandExecutionCreateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommandExecution>
  updateRunner: (args: { data: RunnerUpdateInput, where: RunnerWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Runner | null>
  updateParameter: (args: { data: ParameterUpdateInput, where: ParameterWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Parameter | null>
  updateFilterDefinition: (args: { data: FilterDefinitionUpdateInput, where: FilterDefinitionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinition | null>
  updateEvent: (args: { data: EventUpdateInput, where: EventWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Event | null>
  updateCommand: (args: { data: CommandUpdateInput, where: CommandWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Command | null>
  updateService: (args: { data: ServiceUpdateInput, where: ServiceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Service | null>
  updateWorkflowConstant: (args: { data: WorkflowConstantUpdateInput, where: WorkflowConstantWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstant | null>
  updateWorkflowSource: (args: { data: WorkflowSourceUpdateInput, where: WorkflowSourceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSource | null>
  updateWorkflowCommand: (args: { data: WorkflowCommandUpdateInput, where: WorkflowCommandWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommand | null>
  updateWorkflowResult: (args: { data: WorkflowResultUpdateInput, where: WorkflowResultWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResult | null>
  updateWorkflow: (args: { data: WorkflowUpdateInput, where: WorkflowWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Workflow | null>
  updateWorkflowExecution: (args: { data: WorkflowExecutionUpdateInput, where: WorkflowExecutionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecution | null>
  updateWorkflowCommandExecution: (args: { data: WorkflowCommandExecutionUpdateInput, where: WorkflowCommandExecutionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommandExecution | null>
  deleteRunner: (args: { where: RunnerWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Runner | null>
  deleteParameter: (args: { where: ParameterWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Parameter | null>
  deleteFilterDefinition: (args: { where: FilterDefinitionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinition | null>
  deleteEvent: (args: { where: EventWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Event | null>
  deleteCommand: (args: { where: CommandWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Command | null>
  deleteService: (args: { where: ServiceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Service | null>
  deleteWorkflowConstant: (args: { where: WorkflowConstantWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstant | null>
  deleteWorkflowSource: (args: { where: WorkflowSourceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSource | null>
  deleteWorkflowCommand: (args: { where: WorkflowCommandWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommand | null>
  deleteWorkflowResult: (args: { where: WorkflowResultWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResult | null>
  deleteWorkflow: (args: { where: WorkflowWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Workflow | null>
  deleteWorkflowExecution: (args: { where: WorkflowExecutionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecution | null>
  deleteWorkflowCommandExecution: (args: { where: WorkflowCommandExecutionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommandExecution | null>
  upsertRunner: (args: { where: RunnerWhereUniqueInput, create: RunnerCreateInput, update: RunnerUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Runner>
  upsertParameter: (args: { where: ParameterWhereUniqueInput, create: ParameterCreateInput, update: ParameterUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Parameter>
  upsertFilterDefinition: (args: { where: FilterDefinitionWhereUniqueInput, create: FilterDefinitionCreateInput, update: FilterDefinitionUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinition>
  upsertEvent: (args: { where: EventWhereUniqueInput, create: EventCreateInput, update: EventUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Event>
  upsertCommand: (args: { where: CommandWhereUniqueInput, create: CommandCreateInput, update: CommandUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Command>
  upsertService: (args: { where: ServiceWhereUniqueInput, create: ServiceCreateInput, update: ServiceUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Service>
  upsertWorkflowConstant: (args: { where: WorkflowConstantWhereUniqueInput, create: WorkflowConstantCreateInput, update: WorkflowConstantUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstant>
  upsertWorkflowSource: (args: { where: WorkflowSourceWhereUniqueInput, create: WorkflowSourceCreateInput, update: WorkflowSourceUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSource>
  upsertWorkflowCommand: (args: { where: WorkflowCommandWhereUniqueInput, create: WorkflowCommandCreateInput, update: WorkflowCommandUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommand>
  upsertWorkflowResult: (args: { where: WorkflowResultWhereUniqueInput, create: WorkflowResultCreateInput, update: WorkflowResultUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResult>
  upsertWorkflow: (args: { where: WorkflowWhereUniqueInput, create: WorkflowCreateInput, update: WorkflowUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Workflow>
  upsertWorkflowExecution: (args: { where: WorkflowExecutionWhereUniqueInput, create: WorkflowExecutionCreateInput, update: WorkflowExecutionUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecution>
  upsertWorkflowCommandExecution: (args: { where: WorkflowCommandExecutionWhereUniqueInput, create: WorkflowCommandExecutionCreateInput, update: WorkflowCommandExecutionUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowCommandExecution>
  updateManyRunners: (args: { data: RunnerUpdateInput, where: RunnerWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyParameters: (args: { data: ParameterUpdateInput, where: ParameterWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyFilterDefinitions: (args: { data: FilterDefinitionUpdateInput, where: FilterDefinitionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyEvents: (args: { data: EventUpdateInput, where: EventWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyCommands: (args: { data: CommandUpdateInput, where: CommandWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyServices: (args: { data: ServiceUpdateInput, where: ServiceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflowConstants: (args: { data: WorkflowConstantUpdateInput, where: WorkflowConstantWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflowSources: (args: { data: WorkflowSourceUpdateInput, where: WorkflowSourceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflowCommands: (args: { data: WorkflowCommandUpdateInput, where: WorkflowCommandWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflowResults: (args: { data: WorkflowResultUpdateInput, where: WorkflowResultWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflows: (args: { data: WorkflowUpdateInput, where: WorkflowWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflowExecutions: (args: { data: WorkflowExecutionUpdateInput, where: WorkflowExecutionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflowCommandExecutions: (args: { data: WorkflowCommandExecutionUpdateInput, where: WorkflowCommandExecutionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyRunners: (args: { where: RunnerWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyParameters: (args: { where: ParameterWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyFilterDefinitions: (args: { where: FilterDefinitionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyEvents: (args: { where: EventWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyCommands: (args: { where: CommandWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyServices: (args: { where: ServiceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflowConstants: (args: { where: WorkflowConstantWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflowSources: (args: { where: WorkflowSourceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflowCommands: (args: { where: WorkflowCommandWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflowResults: (args: { where: WorkflowResultWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflows: (args: { where: WorkflowWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflowExecutions: (args: { where: WorkflowExecutionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflowCommandExecutions: (args: { where: WorkflowCommandExecutionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
}

export type Subscription = {
  runner: (args: { where?: RunnerSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<RunnerSubscriptionPayload>>
  parameter: (args: { where?: ParameterSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ParameterSubscriptionPayload>>
  filterDefinition: (args: { where?: FilterDefinitionSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<FilterDefinitionSubscriptionPayload>>
  event: (args: { where?: EventSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<EventSubscriptionPayload>>
  command: (args: { where?: CommandSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<CommandSubscriptionPayload>>
  service: (args: { where?: ServiceSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ServiceSubscriptionPayload>>
  workflowConstant: (args: { where?: WorkflowConstantSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowConstantSubscriptionPayload>>
  workflowSource: (args: { where?: WorkflowSourceSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowSourceSubscriptionPayload>>
  workflowCommand: (args: { where?: WorkflowCommandSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowCommandSubscriptionPayload>>
  workflowResult: (args: { where?: WorkflowResultSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowResultSubscriptionPayload>>
  workflow: (args: { where?: WorkflowSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowSubscriptionPayload>>
  workflowExecution: (args: { where?: WorkflowExecutionSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowExecutionSubscriptionPayload>>
  workflowCommandExecution: (args: { where?: WorkflowCommandExecutionSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowCommandExecutionSubscriptionPayload>>
}

export class Prisma extends BasePrisma {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    Runner: (where: RunnerWhereInput): Promise<boolean> => super.existsDelegate('query', 'runners', { where }, {}, '{ id }'),
    Parameter: (where: ParameterWhereInput): Promise<boolean> => super.existsDelegate('query', 'parameters', { where }, {}, '{ id }'),
    FilterDefinition: (where: FilterDefinitionWhereInput): Promise<boolean> => super.existsDelegate('query', 'filterDefinitions', { where }, {}, '{ id }'),
    Event: (where: EventWhereInput): Promise<boolean> => super.existsDelegate('query', 'events', { where }, {}, '{ id }'),
    Command: (where: CommandWhereInput): Promise<boolean> => super.existsDelegate('query', 'commands', { where }, {}, '{ id }'),
    Service: (where: ServiceWhereInput): Promise<boolean> => super.existsDelegate('query', 'services', { where }, {}, '{ id }'),
    WorkflowConstant: (where: WorkflowConstantWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflowConstants', { where }, {}, '{ id }'),
    WorkflowSource: (where: WorkflowSourceWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflowSources', { where }, {}, '{ id }'),
    WorkflowCommand: (where: WorkflowCommandWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflowCommands', { where }, {}, '{ id }'),
    WorkflowResult: (where: WorkflowResultWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflowResults', { where }, {}, '{ id }'),
    Workflow: (where: WorkflowWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflows', { where }, {}, '{ id }'),
    WorkflowExecution: (where: WorkflowExecutionWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflowExecutions', { where }, {}, '{ id }'),
    WorkflowCommandExecution: (where: WorkflowCommandExecutionWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflowCommandExecutions', { where }, {}, '{ id }')
  }

  query: Query = {
    runners: (args, info): Promise<Runner[]> => super.delegate('query', 'runners', args, {}, info),
    parameters: (args, info): Promise<Parameter[]> => super.delegate('query', 'parameters', args, {}, info),
    filterDefinitions: (args, info): Promise<FilterDefinition[]> => super.delegate('query', 'filterDefinitions', args, {}, info),
    events: (args, info): Promise<Event[]> => super.delegate('query', 'events', args, {}, info),
    commands: (args, info): Promise<Command[]> => super.delegate('query', 'commands', args, {}, info),
    services: (args, info): Promise<Service[]> => super.delegate('query', 'services', args, {}, info),
    workflowConstants: (args, info): Promise<WorkflowConstant[]> => super.delegate('query', 'workflowConstants', args, {}, info),
    workflowSources: (args, info): Promise<WorkflowSource[]> => super.delegate('query', 'workflowSources', args, {}, info),
    workflowCommands: (args, info): Promise<WorkflowCommand[]> => super.delegate('query', 'workflowCommands', args, {}, info),
    workflowResults: (args, info): Promise<WorkflowResult[]> => super.delegate('query', 'workflowResults', args, {}, info),
    workflows: (args, info): Promise<Workflow[]> => super.delegate('query', 'workflows', args, {}, info),
    workflowExecutions: (args, info): Promise<WorkflowExecution[]> => super.delegate('query', 'workflowExecutions', args, {}, info),
    workflowCommandExecutions: (args, info): Promise<WorkflowCommandExecution[]> => super.delegate('query', 'workflowCommandExecutions', args, {}, info),
    runner: (args, info): Promise<Runner | null> => super.delegate('query', 'runner', args, {}, info),
    parameter: (args, info): Promise<Parameter | null> => super.delegate('query', 'parameter', args, {}, info),
    filterDefinition: (args, info): Promise<FilterDefinition | null> => super.delegate('query', 'filterDefinition', args, {}, info),
    event: (args, info): Promise<Event | null> => super.delegate('query', 'event', args, {}, info),
    command: (args, info): Promise<Command | null> => super.delegate('query', 'command', args, {}, info),
    service: (args, info): Promise<Service | null> => super.delegate('query', 'service', args, {}, info),
    workflowConstant: (args, info): Promise<WorkflowConstant | null> => super.delegate('query', 'workflowConstant', args, {}, info),
    workflowSource: (args, info): Promise<WorkflowSource | null> => super.delegate('query', 'workflowSource', args, {}, info),
    workflowCommand: (args, info): Promise<WorkflowCommand | null> => super.delegate('query', 'workflowCommand', args, {}, info),
    workflowResult: (args, info): Promise<WorkflowResult | null> => super.delegate('query', 'workflowResult', args, {}, info),
    workflow: (args, info): Promise<Workflow | null> => super.delegate('query', 'workflow', args, {}, info),
    workflowExecution: (args, info): Promise<WorkflowExecution | null> => super.delegate('query', 'workflowExecution', args, {}, info),
    workflowCommandExecution: (args, info): Promise<WorkflowCommandExecution | null> => super.delegate('query', 'workflowCommandExecution', args, {}, info),
    runnersConnection: (args, info): Promise<RunnerConnection> => super.delegate('query', 'runnersConnection', args, {}, info),
    parametersConnection: (args, info): Promise<ParameterConnection> => super.delegate('query', 'parametersConnection', args, {}, info),
    filterDefinitionsConnection: (args, info): Promise<FilterDefinitionConnection> => super.delegate('query', 'filterDefinitionsConnection', args, {}, info),
    eventsConnection: (args, info): Promise<EventConnection> => super.delegate('query', 'eventsConnection', args, {}, info),
    commandsConnection: (args, info): Promise<CommandConnection> => super.delegate('query', 'commandsConnection', args, {}, info),
    servicesConnection: (args, info): Promise<ServiceConnection> => super.delegate('query', 'servicesConnection', args, {}, info),
    workflowConstantsConnection: (args, info): Promise<WorkflowConstantConnection> => super.delegate('query', 'workflowConstantsConnection', args, {}, info),
    workflowSourcesConnection: (args, info): Promise<WorkflowSourceConnection> => super.delegate('query', 'workflowSourcesConnection', args, {}, info),
    workflowCommandsConnection: (args, info): Promise<WorkflowCommandConnection> => super.delegate('query', 'workflowCommandsConnection', args, {}, info),
    workflowResultsConnection: (args, info): Promise<WorkflowResultConnection> => super.delegate('query', 'workflowResultsConnection', args, {}, info),
    workflowsConnection: (args, info): Promise<WorkflowConnection> => super.delegate('query', 'workflowsConnection', args, {}, info),
    workflowExecutionsConnection: (args, info): Promise<WorkflowExecutionConnection> => super.delegate('query', 'workflowExecutionsConnection', args, {}, info),
    workflowCommandExecutionsConnection: (args, info): Promise<WorkflowCommandExecutionConnection> => super.delegate('query', 'workflowCommandExecutionsConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createRunner: (args, info): Promise<Runner> => super.delegate('mutation', 'createRunner', args, {}, info),
    createParameter: (args, info): Promise<Parameter> => super.delegate('mutation', 'createParameter', args, {}, info),
    createFilterDefinition: (args, info): Promise<FilterDefinition> => super.delegate('mutation', 'createFilterDefinition', args, {}, info),
    createEvent: (args, info): Promise<Event> => super.delegate('mutation', 'createEvent', args, {}, info),
    createCommand: (args, info): Promise<Command> => super.delegate('mutation', 'createCommand', args, {}, info),
    createService: (args, info): Promise<Service> => super.delegate('mutation', 'createService', args, {}, info),
    createWorkflowConstant: (args, info): Promise<WorkflowConstant> => super.delegate('mutation', 'createWorkflowConstant', args, {}, info),
    createWorkflowSource: (args, info): Promise<WorkflowSource> => super.delegate('mutation', 'createWorkflowSource', args, {}, info),
    createWorkflowCommand: (args, info): Promise<WorkflowCommand> => super.delegate('mutation', 'createWorkflowCommand', args, {}, info),
    createWorkflowResult: (args, info): Promise<WorkflowResult> => super.delegate('mutation', 'createWorkflowResult', args, {}, info),
    createWorkflow: (args, info): Promise<Workflow> => super.delegate('mutation', 'createWorkflow', args, {}, info),
    createWorkflowExecution: (args, info): Promise<WorkflowExecution> => super.delegate('mutation', 'createWorkflowExecution', args, {}, info),
    createWorkflowCommandExecution: (args, info): Promise<WorkflowCommandExecution> => super.delegate('mutation', 'createWorkflowCommandExecution', args, {}, info),
    updateRunner: (args, info): Promise<Runner | null> => super.delegate('mutation', 'updateRunner', args, {}, info),
    updateParameter: (args, info): Promise<Parameter | null> => super.delegate('mutation', 'updateParameter', args, {}, info),
    updateFilterDefinition: (args, info): Promise<FilterDefinition | null> => super.delegate('mutation', 'updateFilterDefinition', args, {}, info),
    updateEvent: (args, info): Promise<Event | null> => super.delegate('mutation', 'updateEvent', args, {}, info),
    updateCommand: (args, info): Promise<Command | null> => super.delegate('mutation', 'updateCommand', args, {}, info),
    updateService: (args, info): Promise<Service | null> => super.delegate('mutation', 'updateService', args, {}, info),
    updateWorkflowConstant: (args, info): Promise<WorkflowConstant | null> => super.delegate('mutation', 'updateWorkflowConstant', args, {}, info),
    updateWorkflowSource: (args, info): Promise<WorkflowSource | null> => super.delegate('mutation', 'updateWorkflowSource', args, {}, info),
    updateWorkflowCommand: (args, info): Promise<WorkflowCommand | null> => super.delegate('mutation', 'updateWorkflowCommand', args, {}, info),
    updateWorkflowResult: (args, info): Promise<WorkflowResult | null> => super.delegate('mutation', 'updateWorkflowResult', args, {}, info),
    updateWorkflow: (args, info): Promise<Workflow | null> => super.delegate('mutation', 'updateWorkflow', args, {}, info),
    updateWorkflowExecution: (args, info): Promise<WorkflowExecution | null> => super.delegate('mutation', 'updateWorkflowExecution', args, {}, info),
    updateWorkflowCommandExecution: (args, info): Promise<WorkflowCommandExecution | null> => super.delegate('mutation', 'updateWorkflowCommandExecution', args, {}, info),
    deleteRunner: (args, info): Promise<Runner | null> => super.delegate('mutation', 'deleteRunner', args, {}, info),
    deleteParameter: (args, info): Promise<Parameter | null> => super.delegate('mutation', 'deleteParameter', args, {}, info),
    deleteFilterDefinition: (args, info): Promise<FilterDefinition | null> => super.delegate('mutation', 'deleteFilterDefinition', args, {}, info),
    deleteEvent: (args, info): Promise<Event | null> => super.delegate('mutation', 'deleteEvent', args, {}, info),
    deleteCommand: (args, info): Promise<Command | null> => super.delegate('mutation', 'deleteCommand', args, {}, info),
    deleteService: (args, info): Promise<Service | null> => super.delegate('mutation', 'deleteService', args, {}, info),
    deleteWorkflowConstant: (args, info): Promise<WorkflowConstant | null> => super.delegate('mutation', 'deleteWorkflowConstant', args, {}, info),
    deleteWorkflowSource: (args, info): Promise<WorkflowSource | null> => super.delegate('mutation', 'deleteWorkflowSource', args, {}, info),
    deleteWorkflowCommand: (args, info): Promise<WorkflowCommand | null> => super.delegate('mutation', 'deleteWorkflowCommand', args, {}, info),
    deleteWorkflowResult: (args, info): Promise<WorkflowResult | null> => super.delegate('mutation', 'deleteWorkflowResult', args, {}, info),
    deleteWorkflow: (args, info): Promise<Workflow | null> => super.delegate('mutation', 'deleteWorkflow', args, {}, info),
    deleteWorkflowExecution: (args, info): Promise<WorkflowExecution | null> => super.delegate('mutation', 'deleteWorkflowExecution', args, {}, info),
    deleteWorkflowCommandExecution: (args, info): Promise<WorkflowCommandExecution | null> => super.delegate('mutation', 'deleteWorkflowCommandExecution', args, {}, info),
    upsertRunner: (args, info): Promise<Runner> => super.delegate('mutation', 'upsertRunner', args, {}, info),
    upsertParameter: (args, info): Promise<Parameter> => super.delegate('mutation', 'upsertParameter', args, {}, info),
    upsertFilterDefinition: (args, info): Promise<FilterDefinition> => super.delegate('mutation', 'upsertFilterDefinition', args, {}, info),
    upsertEvent: (args, info): Promise<Event> => super.delegate('mutation', 'upsertEvent', args, {}, info),
    upsertCommand: (args, info): Promise<Command> => super.delegate('mutation', 'upsertCommand', args, {}, info),
    upsertService: (args, info): Promise<Service> => super.delegate('mutation', 'upsertService', args, {}, info),
    upsertWorkflowConstant: (args, info): Promise<WorkflowConstant> => super.delegate('mutation', 'upsertWorkflowConstant', args, {}, info),
    upsertWorkflowSource: (args, info): Promise<WorkflowSource> => super.delegate('mutation', 'upsertWorkflowSource', args, {}, info),
    upsertWorkflowCommand: (args, info): Promise<WorkflowCommand> => super.delegate('mutation', 'upsertWorkflowCommand', args, {}, info),
    upsertWorkflowResult: (args, info): Promise<WorkflowResult> => super.delegate('mutation', 'upsertWorkflowResult', args, {}, info),
    upsertWorkflow: (args, info): Promise<Workflow> => super.delegate('mutation', 'upsertWorkflow', args, {}, info),
    upsertWorkflowExecution: (args, info): Promise<WorkflowExecution> => super.delegate('mutation', 'upsertWorkflowExecution', args, {}, info),
    upsertWorkflowCommandExecution: (args, info): Promise<WorkflowCommandExecution> => super.delegate('mutation', 'upsertWorkflowCommandExecution', args, {}, info),
    updateManyRunners: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyRunners', args, {}, info),
    updateManyParameters: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyParameters', args, {}, info),
    updateManyFilterDefinitions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyFilterDefinitions', args, {}, info),
    updateManyEvents: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyEvents', args, {}, info),
    updateManyCommands: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyCommands', args, {}, info),
    updateManyServices: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyServices', args, {}, info),
    updateManyWorkflowConstants: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflowConstants', args, {}, info),
    updateManyWorkflowSources: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflowSources', args, {}, info),
    updateManyWorkflowCommands: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflowCommands', args, {}, info),
    updateManyWorkflowResults: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflowResults', args, {}, info),
    updateManyWorkflows: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflows', args, {}, info),
    updateManyWorkflowExecutions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflowExecutions', args, {}, info),
    updateManyWorkflowCommandExecutions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflowCommandExecutions', args, {}, info),
    deleteManyRunners: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyRunners', args, {}, info),
    deleteManyParameters: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyParameters', args, {}, info),
    deleteManyFilterDefinitions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyFilterDefinitions', args, {}, info),
    deleteManyEvents: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyEvents', args, {}, info),
    deleteManyCommands: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyCommands', args, {}, info),
    deleteManyServices: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyServices', args, {}, info),
    deleteManyWorkflowConstants: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflowConstants', args, {}, info),
    deleteManyWorkflowSources: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflowSources', args, {}, info),
    deleteManyWorkflowCommands: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflowCommands', args, {}, info),
    deleteManyWorkflowResults: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflowResults', args, {}, info),
    deleteManyWorkflows: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflows', args, {}, info),
    deleteManyWorkflowExecutions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflowExecutions', args, {}, info),
    deleteManyWorkflowCommandExecutions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflowCommandExecutions', args, {}, info)
  }

  subscription: Subscription = {
    runner: (args, infoOrQuery): Promise<AsyncIterator<RunnerSubscriptionPayload>> => super.delegateSubscription('runner', args, {}, infoOrQuery),
    parameter: (args, infoOrQuery): Promise<AsyncIterator<ParameterSubscriptionPayload>> => super.delegateSubscription('parameter', args, {}, infoOrQuery),
    filterDefinition: (args, infoOrQuery): Promise<AsyncIterator<FilterDefinitionSubscriptionPayload>> => super.delegateSubscription('filterDefinition', args, {}, infoOrQuery),
    event: (args, infoOrQuery): Promise<AsyncIterator<EventSubscriptionPayload>> => super.delegateSubscription('event', args, {}, infoOrQuery),
    command: (args, infoOrQuery): Promise<AsyncIterator<CommandSubscriptionPayload>> => super.delegateSubscription('command', args, {}, infoOrQuery),
    service: (args, infoOrQuery): Promise<AsyncIterator<ServiceSubscriptionPayload>> => super.delegateSubscription('service', args, {}, infoOrQuery),
    workflowConstant: (args, infoOrQuery): Promise<AsyncIterator<WorkflowConstantSubscriptionPayload>> => super.delegateSubscription('workflowConstant', args, {}, infoOrQuery),
    workflowSource: (args, infoOrQuery): Promise<AsyncIterator<WorkflowSourceSubscriptionPayload>> => super.delegateSubscription('workflowSource', args, {}, infoOrQuery),
    workflowCommand: (args, infoOrQuery): Promise<AsyncIterator<WorkflowCommandSubscriptionPayload>> => super.delegateSubscription('workflowCommand', args, {}, infoOrQuery),
    workflowResult: (args, infoOrQuery): Promise<AsyncIterator<WorkflowResultSubscriptionPayload>> => super.delegateSubscription('workflowResult', args, {}, infoOrQuery),
    workflow: (args, infoOrQuery): Promise<AsyncIterator<WorkflowSubscriptionPayload>> => super.delegateSubscription('workflow', args, {}, infoOrQuery),
    workflowExecution: (args, infoOrQuery): Promise<AsyncIterator<WorkflowExecutionSubscriptionPayload>> => super.delegateSubscription('workflowExecution', args, {}, infoOrQuery),
    workflowCommandExecution: (args, infoOrQuery): Promise<AsyncIterator<WorkflowCommandExecutionSubscriptionPayload>> => super.delegateSubscription('workflowCommandExecution', args, {}, infoOrQuery)
  }
}