import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding'
import { GraphQLResolveInfo } from 'graphql'

const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Event implements Node {
  id: ID!
  title: String!
  description: String
  data(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parameter!]
}

type FilterDefinition implements Node {
  id: ID!
  parameter(where: ParameterWhereInput): Parameter!
  predicate: PREDICATE!
  value: String!
}

type Parameter implements Node {
  id: ID!
  title: String!
  description: String
  type: TYPE!
  required: Boolean
}

type Runner implements Node {
  id: ID!
  publicKey: String!
  stake: Float!
  reliability: Float!
  sourceWhitelisted(where: WorkflowSourceWhereInput, orderBy: WorkflowSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowSource!]
  sourceBlacklisted(where: WorkflowSourceWhereInput, orderBy: WorkflowSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowSource!]
  taskWhitelisted(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTask!]
  taskBlacklisted(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTask!]
}

type Service implements Node {
  id: ID!
  title: String!
  description: String
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
}

type Task implements Node {
  id: ID!
  title: String!
  description: String
  arguments(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parameter!]
}

type Workflow implements Node {
  id: ID!
  title: String!
  description: String
  source(where: WorkflowSourceWhereInput): WorkflowSource!
  tasks(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTask!]
  executions(where: WorkflowExecutionWhereInput, orderBy: WorkflowExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowExecution!]
}

type WorkflowConstant implements Node {
  id: ID!
  value: String!
}

type WorkflowExecution implements Node {
  id: ID!
  duration: Int!
  fee: Int!
  taskExecutions(where: WorkflowTaskExecutionWhereInput, orderBy: WorkflowTaskExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTaskExecution!]
}

type WorkflowResult implements Node {
  id: ID!
  reference(where: ParameterWhereInput): Parameter!
  value: String!
}

type WorkflowSource implements Node {
  id: ID!
  whitelist(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner!]
  blacklist(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner!]
  service(where: ServiceWhereInput): Service!
  event(where: EventWhereInput): Event!
  filters(where: FilterDefinitionWhereInput, orderBy: FilterDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FilterDefinition!]
}

type WorkflowTask implements Node {
  id: ID!
  whitelist(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner!]
  blacklist(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner!]
  service(where: ServiceWhereInput): Service!
  task(where: TaskWhereInput): Task!
  parameters(where: WorkflowResultWhereInput, orderBy: WorkflowResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowResult!]
  parents(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTask!]
  children(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTask!]
}

type WorkflowTaskExecution implements Node {
  id: ID!
  duration: Int!
  fee: Int!
  results(where: WorkflowResultWhereInput, orderBy: WorkflowResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowResult!]
}


#
# Other Types
#

type AggregateEvent {
  count: Int!
}

type AggregateFilterDefinition {
  count: Int!
}

type AggregateParameter {
  count: Int!
}

type AggregateRunner {
  count: Int!
}

type AggregateService {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateWorkflow {
  count: Int!
}

type AggregateWorkflowConstant {
  count: Int!
}

type AggregateWorkflowExecution {
  count: Int!
}

type AggregateWorkflowResult {
  count: Int!
}

type AggregateWorkflowSource {
  count: Int!
}

type AggregateWorkflowTask {
  count: Int!
}

type AggregateWorkflowTaskExecution {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  title: String!
  description: String
  data: ParameterCreateManyInput
}

input EventCreateManyInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateOneInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  description: String
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  title: String
  description: String
  data: ParameterUpdateManyInput
}

input EventUpdateManyInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
}

input EventUpdateOneInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: EventWhereUniqueInput
  delete: EventWhereUniqueInput
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  data_every: ParameterWhereInput
  data_some: ParameterWhereInput
  data_none: ParameterWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type FilterDefinitionConnection {
  pageInfo: PageInfo!
  edges: [FilterDefinitionEdge]!
  aggregate: AggregateFilterDefinition!
}

input FilterDefinitionCreateInput {
  predicate: PREDICATE
  value: String!
  parameter: ParameterCreateOneInput!
}

input FilterDefinitionCreateManyInput {
  create: [FilterDefinitionCreateInput!]
  connect: [FilterDefinitionWhereUniqueInput!]
}

type FilterDefinitionEdge {
  node: FilterDefinition!
  cursor: String!
}

enum FilterDefinitionOrderByInput {
  id_ASC
  id_DESC
  predicate_ASC
  predicate_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FilterDefinitionPreviousValues {
  id: ID!
  predicate: PREDICATE!
  value: String!
}

type FilterDefinitionSubscriptionPayload {
  mutation: MutationType!
  node: FilterDefinition
  updatedFields: [String!]
  previousValues: FilterDefinitionPreviousValues
}

input FilterDefinitionSubscriptionWhereInput {
  AND: [FilterDefinitionSubscriptionWhereInput!]
  OR: [FilterDefinitionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FilterDefinitionWhereInput
}

input FilterDefinitionUpdateInput {
  predicate: PREDICATE
  value: String
  parameter: ParameterUpdateOneInput
}

input FilterDefinitionUpdateManyInput {
  create: [FilterDefinitionCreateInput!]
  connect: [FilterDefinitionWhereUniqueInput!]
  disconnect: [FilterDefinitionWhereUniqueInput!]
  delete: [FilterDefinitionWhereUniqueInput!]
}

input FilterDefinitionWhereInput {
  AND: [FilterDefinitionWhereInput!]
  OR: [FilterDefinitionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  predicate: PREDICATE
  predicate_not: PREDICATE
  predicate_in: [PREDICATE!]
  predicate_not_in: [PREDICATE!]
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  parameter: ParameterWhereInput
}

input FilterDefinitionWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createRunner(data: RunnerCreateInput!): Runner!
  createParameter(data: ParameterCreateInput!): Parameter!
  createFilterDefinition(data: FilterDefinitionCreateInput!): FilterDefinition!
  createEvent(data: EventCreateInput!): Event!
  createTask(data: TaskCreateInput!): Task!
  createService(data: ServiceCreateInput!): Service!
  createWorkflowConstant(data: WorkflowConstantCreateInput!): WorkflowConstant!
  createWorkflowSource(data: WorkflowSourceCreateInput!): WorkflowSource!
  createWorkflowTask(data: WorkflowTaskCreateInput!): WorkflowTask!
  createWorkflowResult(data: WorkflowResultCreateInput!): WorkflowResult!
  createWorkflow(data: WorkflowCreateInput!): Workflow!
  createWorkflowExecution(data: WorkflowExecutionCreateInput!): WorkflowExecution!
  createWorkflowTaskExecution(data: WorkflowTaskExecutionCreateInput!): WorkflowTaskExecution!
  updateRunner(data: RunnerUpdateInput!, where: RunnerWhereUniqueInput!): Runner
  updateParameter(data: ParameterUpdateInput!, where: ParameterWhereUniqueInput!): Parameter
  updateFilterDefinition(data: FilterDefinitionUpdateInput!, where: FilterDefinitionWhereUniqueInput!): FilterDefinition
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service
  updateWorkflowConstant(data: WorkflowConstantUpdateInput!, where: WorkflowConstantWhereUniqueInput!): WorkflowConstant
  updateWorkflowSource(data: WorkflowSourceUpdateInput!, where: WorkflowSourceWhereUniqueInput!): WorkflowSource
  updateWorkflowTask(data: WorkflowTaskUpdateInput!, where: WorkflowTaskWhereUniqueInput!): WorkflowTask
  updateWorkflowResult(data: WorkflowResultUpdateInput!, where: WorkflowResultWhereUniqueInput!): WorkflowResult
  updateWorkflow(data: WorkflowUpdateInput!, where: WorkflowWhereUniqueInput!): Workflow
  updateWorkflowExecution(data: WorkflowExecutionUpdateInput!, where: WorkflowExecutionWhereUniqueInput!): WorkflowExecution
  updateWorkflowTaskExecution(data: WorkflowTaskExecutionUpdateInput!, where: WorkflowTaskExecutionWhereUniqueInput!): WorkflowTaskExecution
  deleteRunner(where: RunnerWhereUniqueInput!): Runner
  deleteParameter(where: ParameterWhereUniqueInput!): Parameter
  deleteFilterDefinition(where: FilterDefinitionWhereUniqueInput!): FilterDefinition
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteWorkflowConstant(where: WorkflowConstantWhereUniqueInput!): WorkflowConstant
  deleteWorkflowSource(where: WorkflowSourceWhereUniqueInput!): WorkflowSource
  deleteWorkflowTask(where: WorkflowTaskWhereUniqueInput!): WorkflowTask
  deleteWorkflowResult(where: WorkflowResultWhereUniqueInput!): WorkflowResult
  deleteWorkflow(where: WorkflowWhereUniqueInput!): Workflow
  deleteWorkflowExecution(where: WorkflowExecutionWhereUniqueInput!): WorkflowExecution
  deleteWorkflowTaskExecution(where: WorkflowTaskExecutionWhereUniqueInput!): WorkflowTaskExecution
  upsertRunner(where: RunnerWhereUniqueInput!, create: RunnerCreateInput!, update: RunnerUpdateInput!): Runner!
  upsertParameter(where: ParameterWhereUniqueInput!, create: ParameterCreateInput!, update: ParameterUpdateInput!): Parameter!
  upsertFilterDefinition(where: FilterDefinitionWhereUniqueInput!, create: FilterDefinitionCreateInput!, update: FilterDefinitionUpdateInput!): FilterDefinition!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertTask(where: TaskWhereUniqueInput!, create: TaskCreateInput!, update: TaskUpdateInput!): Task!
  upsertService(where: ServiceWhereUniqueInput!, create: ServiceCreateInput!, update: ServiceUpdateInput!): Service!
  upsertWorkflowConstant(where: WorkflowConstantWhereUniqueInput!, create: WorkflowConstantCreateInput!, update: WorkflowConstantUpdateInput!): WorkflowConstant!
  upsertWorkflowSource(where: WorkflowSourceWhereUniqueInput!, create: WorkflowSourceCreateInput!, update: WorkflowSourceUpdateInput!): WorkflowSource!
  upsertWorkflowTask(where: WorkflowTaskWhereUniqueInput!, create: WorkflowTaskCreateInput!, update: WorkflowTaskUpdateInput!): WorkflowTask!
  upsertWorkflowResult(where: WorkflowResultWhereUniqueInput!, create: WorkflowResultCreateInput!, update: WorkflowResultUpdateInput!): WorkflowResult!
  upsertWorkflow(where: WorkflowWhereUniqueInput!, create: WorkflowCreateInput!, update: WorkflowUpdateInput!): Workflow!
  upsertWorkflowExecution(where: WorkflowExecutionWhereUniqueInput!, create: WorkflowExecutionCreateInput!, update: WorkflowExecutionUpdateInput!): WorkflowExecution!
  upsertWorkflowTaskExecution(where: WorkflowTaskExecutionWhereUniqueInput!, create: WorkflowTaskExecutionCreateInput!, update: WorkflowTaskExecutionUpdateInput!): WorkflowTaskExecution!
  updateManyRunners(data: RunnerUpdateInput!, where: RunnerWhereInput!): BatchPayload!
  updateManyParameters(data: ParameterUpdateInput!, where: ParameterWhereInput!): BatchPayload!
  updateManyFilterDefinitions(data: FilterDefinitionUpdateInput!, where: FilterDefinitionWhereInput!): BatchPayload!
  updateManyEvents(data: EventUpdateInput!, where: EventWhereInput!): BatchPayload!
  updateManyTasks(data: TaskUpdateInput!, where: TaskWhereInput!): BatchPayload!
  updateManyServices(data: ServiceUpdateInput!, where: ServiceWhereInput!): BatchPayload!
  updateManyWorkflowConstants(data: WorkflowConstantUpdateInput!, where: WorkflowConstantWhereInput!): BatchPayload!
  updateManyWorkflowSources(data: WorkflowSourceUpdateInput!, where: WorkflowSourceWhereInput!): BatchPayload!
  updateManyWorkflowTasks(data: WorkflowTaskUpdateInput!, where: WorkflowTaskWhereInput!): BatchPayload!
  updateManyWorkflowResults(data: WorkflowResultUpdateInput!, where: WorkflowResultWhereInput!): BatchPayload!
  updateManyWorkflows(data: WorkflowUpdateInput!, where: WorkflowWhereInput!): BatchPayload!
  updateManyWorkflowExecutions(data: WorkflowExecutionUpdateInput!, where: WorkflowExecutionWhereInput!): BatchPayload!
  updateManyWorkflowTaskExecutions(data: WorkflowTaskExecutionUpdateInput!, where: WorkflowTaskExecutionWhereInput!): BatchPayload!
  deleteManyRunners(where: RunnerWhereInput!): BatchPayload!
  deleteManyParameters(where: ParameterWhereInput!): BatchPayload!
  deleteManyFilterDefinitions(where: FilterDefinitionWhereInput!): BatchPayload!
  deleteManyEvents(where: EventWhereInput!): BatchPayload!
  deleteManyTasks(where: TaskWhereInput!): BatchPayload!
  deleteManyServices(where: ServiceWhereInput!): BatchPayload!
  deleteManyWorkflowConstants(where: WorkflowConstantWhereInput!): BatchPayload!
  deleteManyWorkflowSources(where: WorkflowSourceWhereInput!): BatchPayload!
  deleteManyWorkflowTasks(where: WorkflowTaskWhereInput!): BatchPayload!
  deleteManyWorkflowResults(where: WorkflowResultWhereInput!): BatchPayload!
  deleteManyWorkflows(where: WorkflowWhereInput!): BatchPayload!
  deleteManyWorkflowExecutions(where: WorkflowExecutionWhereInput!): BatchPayload!
  deleteManyWorkflowTaskExecutions(where: WorkflowTaskExecutionWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ParameterConnection {
  pageInfo: PageInfo!
  edges: [ParameterEdge]!
  aggregate: AggregateParameter!
}

input ParameterCreateInput {
  title: String!
  description: String
  type: TYPE
  required: Boolean
}

input ParameterCreateManyInput {
  create: [ParameterCreateInput!]
  connect: [ParameterWhereUniqueInput!]
}

input ParameterCreateOneInput {
  create: ParameterCreateInput
  connect: ParameterWhereUniqueInput
}

type ParameterEdge {
  node: Parameter!
  cursor: String!
}

enum ParameterOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  required_ASC
  required_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ParameterPreviousValues {
  id: ID!
  title: String!
  description: String
  type: TYPE!
  required: Boolean
}

type ParameterSubscriptionPayload {
  mutation: MutationType!
  node: Parameter
  updatedFields: [String!]
  previousValues: ParameterPreviousValues
}

input ParameterSubscriptionWhereInput {
  AND: [ParameterSubscriptionWhereInput!]
  OR: [ParameterSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ParameterWhereInput
}

input ParameterUpdateInput {
  title: String
  description: String
  type: TYPE
  required: Boolean
}

input ParameterUpdateManyInput {
  create: [ParameterCreateInput!]
  connect: [ParameterWhereUniqueInput!]
  disconnect: [ParameterWhereUniqueInput!]
  delete: [ParameterWhereUniqueInput!]
}

input ParameterUpdateOneInput {
  create: ParameterCreateInput
  connect: ParameterWhereUniqueInput
  disconnect: ParameterWhereUniqueInput
  delete: ParameterWhereUniqueInput
}

input ParameterWhereInput {
  AND: [ParameterWhereInput!]
  OR: [ParameterWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  type: TYPE
  type_not: TYPE
  type_in: [TYPE!]
  type_not_in: [TYPE!]
  required: Boolean
  required_not: Boolean
}

input ParameterWhereUniqueInput {
  id: ID
}

enum PREDICATE {
  EQ
  NEQ
  GT
  GTEQ
  LT
  LTEQ
  MATCHES
  DOES_NOT_MATCH
  START
  NOT_START
  END
  NOT_END
  IN
  NOT_IN
  CONT
  NOT_CONT
}

type Query {
  runners(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner]!
  parameters(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parameter]!
  filterDefinitions(where: FilterDefinitionWhereInput, orderBy: FilterDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FilterDefinition]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task]!
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service]!
  workflowConstants(where: WorkflowConstantWhereInput, orderBy: WorkflowConstantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowConstant]!
  workflowSources(where: WorkflowSourceWhereInput, orderBy: WorkflowSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowSource]!
  workflowTasks(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTask]!
  workflowResults(where: WorkflowResultWhereInput, orderBy: WorkflowResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowResult]!
  workflows(where: WorkflowWhereInput, orderBy: WorkflowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workflow]!
  workflowExecutions(where: WorkflowExecutionWhereInput, orderBy: WorkflowExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowExecution]!
  workflowTaskExecutions(where: WorkflowTaskExecutionWhereInput, orderBy: WorkflowTaskExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTaskExecution]!
  runner(where: RunnerWhereUniqueInput!): Runner
  parameter(where: ParameterWhereUniqueInput!): Parameter
  filterDefinition(where: FilterDefinitionWhereUniqueInput!): FilterDefinition
  event(where: EventWhereUniqueInput!): Event
  task(where: TaskWhereUniqueInput!): Task
  service(where: ServiceWhereUniqueInput!): Service
  workflowConstant(where: WorkflowConstantWhereUniqueInput!): WorkflowConstant
  workflowSource(where: WorkflowSourceWhereUniqueInput!): WorkflowSource
  workflowTask(where: WorkflowTaskWhereUniqueInput!): WorkflowTask
  workflowResult(where: WorkflowResultWhereUniqueInput!): WorkflowResult
  workflow(where: WorkflowWhereUniqueInput!): Workflow
  workflowExecution(where: WorkflowExecutionWhereUniqueInput!): WorkflowExecution
  workflowTaskExecution(where: WorkflowTaskExecutionWhereUniqueInput!): WorkflowTaskExecution
  runnersConnection(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RunnerConnection!
  parametersConnection(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ParameterConnection!
  filterDefinitionsConnection(where: FilterDefinitionWhereInput, orderBy: FilterDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FilterDefinitionConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  tasksConnection(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskConnection!
  servicesConnection(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceConnection!
  workflowConstantsConnection(where: WorkflowConstantWhereInput, orderBy: WorkflowConstantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowConstantConnection!
  workflowSourcesConnection(where: WorkflowSourceWhereInput, orderBy: WorkflowSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowSourceConnection!
  workflowTasksConnection(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowTaskConnection!
  workflowResultsConnection(where: WorkflowResultWhereInput, orderBy: WorkflowResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowResultConnection!
  workflowsConnection(where: WorkflowWhereInput, orderBy: WorkflowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowConnection!
  workflowExecutionsConnection(where: WorkflowExecutionWhereInput, orderBy: WorkflowExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowExecutionConnection!
  workflowTaskExecutionsConnection(where: WorkflowTaskExecutionWhereInput, orderBy: WorkflowTaskExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowTaskExecutionConnection!
  node(id: ID!): Node
}

type RunnerConnection {
  pageInfo: PageInfo!
  edges: [RunnerEdge]!
  aggregate: AggregateRunner!
}

input RunnerCreateInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceCreateManyWithoutBlacklistInput
  taskWhitelisted: WorkflowTaskCreateManyWithoutWhitelistInput
  taskBlacklisted: WorkflowTaskCreateManyWithoutBlacklistInput
}

input RunnerCreateManyWithoutSourceBlacklistedInput {
  create: [RunnerCreateWithoutSourceBlacklistedInput!]
  connect: [RunnerWhereUniqueInput!]
}

input RunnerCreateManyWithoutSourceWhitelistedInput {
  create: [RunnerCreateWithoutSourceWhitelistedInput!]
  connect: [RunnerWhereUniqueInput!]
}

input RunnerCreateManyWithoutTaskBlacklistedInput {
  create: [RunnerCreateWithoutTaskBlacklistedInput!]
  connect: [RunnerWhereUniqueInput!]
}

input RunnerCreateManyWithoutTaskWhitelistedInput {
  create: [RunnerCreateWithoutTaskWhitelistedInput!]
  connect: [RunnerWhereUniqueInput!]
}

input RunnerCreateWithoutSourceBlacklistedInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceCreateManyWithoutWhitelistInput
  taskWhitelisted: WorkflowTaskCreateManyWithoutWhitelistInput
  taskBlacklisted: WorkflowTaskCreateManyWithoutBlacklistInput
}

input RunnerCreateWithoutSourceWhitelistedInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceBlacklisted: WorkflowSourceCreateManyWithoutBlacklistInput
  taskWhitelisted: WorkflowTaskCreateManyWithoutWhitelistInput
  taskBlacklisted: WorkflowTaskCreateManyWithoutBlacklistInput
}

input RunnerCreateWithoutTaskBlacklistedInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceCreateManyWithoutBlacklistInput
  taskWhitelisted: WorkflowTaskCreateManyWithoutWhitelistInput
}

input RunnerCreateWithoutTaskWhitelistedInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceCreateManyWithoutBlacklistInput
  taskBlacklisted: WorkflowTaskCreateManyWithoutBlacklistInput
}

type RunnerEdge {
  node: Runner!
  cursor: String!
}

enum RunnerOrderByInput {
  id_ASC
  id_DESC
  publicKey_ASC
  publicKey_DESC
  stake_ASC
  stake_DESC
  reliability_ASC
  reliability_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RunnerPreviousValues {
  id: ID!
  publicKey: String!
  stake: Float!
  reliability: Float!
}

type RunnerSubscriptionPayload {
  mutation: MutationType!
  node: Runner
  updatedFields: [String!]
  previousValues: RunnerPreviousValues
}

input RunnerSubscriptionWhereInput {
  AND: [RunnerSubscriptionWhereInput!]
  OR: [RunnerSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RunnerWhereInput
}

input RunnerUpdateInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceUpdateManyWithoutBlacklistInput
  taskWhitelisted: WorkflowTaskUpdateManyWithoutWhitelistInput
  taskBlacklisted: WorkflowTaskUpdateManyWithoutBlacklistInput
}

input RunnerUpdateManyWithoutSourceBlacklistedInput {
  create: [RunnerCreateWithoutSourceBlacklistedInput!]
  connect: [RunnerWhereUniqueInput!]
  disconnect: [RunnerWhereUniqueInput!]
  delete: [RunnerWhereUniqueInput!]
  update: [RunnerUpdateWithoutSourceBlacklistedInput!]
  upsert: [RunnerUpsertWithoutSourceBlacklistedInput!]
}

input RunnerUpdateManyWithoutSourceWhitelistedInput {
  create: [RunnerCreateWithoutSourceWhitelistedInput!]
  connect: [RunnerWhereUniqueInput!]
  disconnect: [RunnerWhereUniqueInput!]
  delete: [RunnerWhereUniqueInput!]
  update: [RunnerUpdateWithoutSourceWhitelistedInput!]
  upsert: [RunnerUpsertWithoutSourceWhitelistedInput!]
}

input RunnerUpdateManyWithoutTaskBlacklistedInput {
  create: [RunnerCreateWithoutTaskBlacklistedInput!]
  connect: [RunnerWhereUniqueInput!]
  disconnect: [RunnerWhereUniqueInput!]
  delete: [RunnerWhereUniqueInput!]
  update: [RunnerUpdateWithoutTaskBlacklistedInput!]
  upsert: [RunnerUpsertWithoutTaskBlacklistedInput!]
}

input RunnerUpdateManyWithoutTaskWhitelistedInput {
  create: [RunnerCreateWithoutTaskWhitelistedInput!]
  connect: [RunnerWhereUniqueInput!]
  disconnect: [RunnerWhereUniqueInput!]
  delete: [RunnerWhereUniqueInput!]
  update: [RunnerUpdateWithoutTaskWhitelistedInput!]
  upsert: [RunnerUpsertWithoutTaskWhitelistedInput!]
}

input RunnerUpdateWithoutSourceBlacklistedDataInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceUpdateManyWithoutWhitelistInput
  taskWhitelisted: WorkflowTaskUpdateManyWithoutWhitelistInput
  taskBlacklisted: WorkflowTaskUpdateManyWithoutBlacklistInput
}

input RunnerUpdateWithoutSourceBlacklistedInput {
  where: RunnerWhereUniqueInput!
  data: RunnerUpdateWithoutSourceBlacklistedDataInput!
}

input RunnerUpdateWithoutSourceWhitelistedDataInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceBlacklisted: WorkflowSourceUpdateManyWithoutBlacklistInput
  taskWhitelisted: WorkflowTaskUpdateManyWithoutWhitelistInput
  taskBlacklisted: WorkflowTaskUpdateManyWithoutBlacklistInput
}

input RunnerUpdateWithoutSourceWhitelistedInput {
  where: RunnerWhereUniqueInput!
  data: RunnerUpdateWithoutSourceWhitelistedDataInput!
}

input RunnerUpdateWithoutTaskBlacklistedDataInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceUpdateManyWithoutBlacklistInput
  taskWhitelisted: WorkflowTaskUpdateManyWithoutWhitelistInput
}

input RunnerUpdateWithoutTaskBlacklistedInput {
  where: RunnerWhereUniqueInput!
  data: RunnerUpdateWithoutTaskBlacklistedDataInput!
}

input RunnerUpdateWithoutTaskWhitelistedDataInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceUpdateManyWithoutBlacklistInput
  taskBlacklisted: WorkflowTaskUpdateManyWithoutBlacklistInput
}

input RunnerUpdateWithoutTaskWhitelistedInput {
  where: RunnerWhereUniqueInput!
  data: RunnerUpdateWithoutTaskWhitelistedDataInput!
}

input RunnerUpsertWithoutSourceBlacklistedInput {
  where: RunnerWhereUniqueInput!
  update: RunnerUpdateWithoutSourceBlacklistedDataInput!
  create: RunnerCreateWithoutSourceBlacklistedInput!
}

input RunnerUpsertWithoutSourceWhitelistedInput {
  where: RunnerWhereUniqueInput!
  update: RunnerUpdateWithoutSourceWhitelistedDataInput!
  create: RunnerCreateWithoutSourceWhitelistedInput!
}

input RunnerUpsertWithoutTaskBlacklistedInput {
  where: RunnerWhereUniqueInput!
  update: RunnerUpdateWithoutTaskBlacklistedDataInput!
  create: RunnerCreateWithoutTaskBlacklistedInput!
}

input RunnerUpsertWithoutTaskWhitelistedInput {
  where: RunnerWhereUniqueInput!
  update: RunnerUpdateWithoutTaskWhitelistedDataInput!
  create: RunnerCreateWithoutTaskWhitelistedInput!
}

input RunnerWhereInput {
  AND: [RunnerWhereInput!]
  OR: [RunnerWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  publicKey: String
  publicKey_not: String
  publicKey_in: [String!]
  publicKey_not_in: [String!]
  publicKey_lt: String
  publicKey_lte: String
  publicKey_gt: String
  publicKey_gte: String
  publicKey_contains: String
  publicKey_not_contains: String
  publicKey_starts_with: String
  publicKey_not_starts_with: String
  publicKey_ends_with: String
  publicKey_not_ends_with: String
  stake: Float
  stake_not: Float
  stake_in: [Float!]
  stake_not_in: [Float!]
  stake_lt: Float
  stake_lte: Float
  stake_gt: Float
  stake_gte: Float
  reliability: Float
  reliability_not: Float
  reliability_in: [Float!]
  reliability_not_in: [Float!]
  reliability_lt: Float
  reliability_lte: Float
  reliability_gt: Float
  reliability_gte: Float
  sourceWhitelisted_every: WorkflowSourceWhereInput
  sourceWhitelisted_some: WorkflowSourceWhereInput
  sourceWhitelisted_none: WorkflowSourceWhereInput
  sourceBlacklisted_every: WorkflowSourceWhereInput
  sourceBlacklisted_some: WorkflowSourceWhereInput
  sourceBlacklisted_none: WorkflowSourceWhereInput
  taskWhitelisted_every: WorkflowTaskWhereInput
  taskWhitelisted_some: WorkflowTaskWhereInput
  taskWhitelisted_none: WorkflowTaskWhereInput
  taskBlacklisted_every: WorkflowTaskWhereInput
  taskBlacklisted_some: WorkflowTaskWhereInput
  taskBlacklisted_none: WorkflowTaskWhereInput
}

input RunnerWhereUniqueInput {
  id: ID
  publicKey: String
}

type ServiceConnection {
  pageInfo: PageInfo!
  edges: [ServiceEdge]!
  aggregate: AggregateService!
}

input ServiceCreateInput {
  title: String!
  description: String
  events: EventCreateManyInput
  tasks: TaskCreateManyInput
}

input ServiceCreateOneInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

type ServiceEdge {
  node: Service!
  cursor: String!
}

enum ServiceOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ServicePreviousValues {
  id: ID!
  title: String!
  description: String
}

type ServiceSubscriptionPayload {
  mutation: MutationType!
  node: Service
  updatedFields: [String!]
  previousValues: ServicePreviousValues
}

input ServiceSubscriptionWhereInput {
  AND: [ServiceSubscriptionWhereInput!]
  OR: [ServiceSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceWhereInput
}

input ServiceUpdateInput {
  title: String
  description: String
  events: EventUpdateManyInput
  tasks: TaskUpdateManyInput
}

input ServiceUpdateOneInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
  disconnect: ServiceWhereUniqueInput
  delete: ServiceWhereUniqueInput
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  tasks_every: TaskWhereInput
  tasks_some: TaskWhereInput
  tasks_none: TaskWhereInput
}

input ServiceWhereUniqueInput {
  id: ID
}

type Subscription {
  runner(where: RunnerSubscriptionWhereInput): RunnerSubscriptionPayload
  parameter(where: ParameterSubscriptionWhereInput): ParameterSubscriptionPayload
  filterDefinition(where: FilterDefinitionSubscriptionWhereInput): FilterDefinitionSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  task(where: TaskSubscriptionWhereInput): TaskSubscriptionPayload
  service(where: ServiceSubscriptionWhereInput): ServiceSubscriptionPayload
  workflowConstant(where: WorkflowConstantSubscriptionWhereInput): WorkflowConstantSubscriptionPayload
  workflowSource(where: WorkflowSourceSubscriptionWhereInput): WorkflowSourceSubscriptionPayload
  workflowTask(where: WorkflowTaskSubscriptionWhereInput): WorkflowTaskSubscriptionPayload
  workflowResult(where: WorkflowResultSubscriptionWhereInput): WorkflowResultSubscriptionPayload
  workflow(where: WorkflowSubscriptionWhereInput): WorkflowSubscriptionPayload
  workflowExecution(where: WorkflowExecutionSubscriptionWhereInput): WorkflowExecutionSubscriptionPayload
  workflowTaskExecution(where: WorkflowTaskExecutionSubscriptionWhereInput): WorkflowTaskExecutionSubscriptionPayload
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]!
  aggregate: AggregateTask!
}

input TaskCreateInput {
  title: String!
  description: String
  arguments: ParameterCreateManyInput
}

input TaskCreateManyInput {
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateOneInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
}

type TaskEdge {
  node: Task!
  cursor: String!
}

enum TaskOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TaskPreviousValues {
  id: ID!
  title: String!
  description: String
}

type TaskSubscriptionPayload {
  mutation: MutationType!
  node: Task
  updatedFields: [String!]
  previousValues: TaskPreviousValues
}

input TaskSubscriptionWhereInput {
  AND: [TaskSubscriptionWhereInput!]
  OR: [TaskSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TaskWhereInput
}

input TaskUpdateInput {
  title: String
  description: String
  arguments: ParameterUpdateManyInput
}

input TaskUpdateManyInput {
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  delete: [TaskWhereUniqueInput!]
}

input TaskUpdateOneInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
  disconnect: TaskWhereUniqueInput
  delete: TaskWhereUniqueInput
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  arguments_every: ParameterWhereInput
  arguments_some: ParameterWhereInput
  arguments_none: ParameterWhereInput
}

input TaskWhereUniqueInput {
  id: ID
}

enum TYPE {
  FLOAT
  INTEGER
  STRING
  BOOLEAN
  DATE
  OBJECT
}

type WorkflowConnection {
  pageInfo: PageInfo!
  edges: [WorkflowEdge]!
  aggregate: AggregateWorkflow!
}

type WorkflowConstantConnection {
  pageInfo: PageInfo!
  edges: [WorkflowConstantEdge]!
  aggregate: AggregateWorkflowConstant!
}

input WorkflowConstantCreateInput {
  value: String!
}

type WorkflowConstantEdge {
  node: WorkflowConstant!
  cursor: String!
}

enum WorkflowConstantOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowConstantPreviousValues {
  id: ID!
  value: String!
}

type WorkflowConstantSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowConstant
  updatedFields: [String!]
  previousValues: WorkflowConstantPreviousValues
}

input WorkflowConstantSubscriptionWhereInput {
  AND: [WorkflowConstantSubscriptionWhereInput!]
  OR: [WorkflowConstantSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowConstantWhereInput
}

input WorkflowConstantUpdateInput {
  value: String
}

input WorkflowConstantWhereInput {
  AND: [WorkflowConstantWhereInput!]
  OR: [WorkflowConstantWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
}

input WorkflowConstantWhereUniqueInput {
  id: ID
}

input WorkflowCreateInput {
  title: String!
  description: String
  source: WorkflowSourceCreateOneInput!
  tasks: WorkflowTaskCreateManyInput
  executions: WorkflowExecutionCreateManyInput
}

type WorkflowEdge {
  node: Workflow!
  cursor: String!
}

type WorkflowExecutionConnection {
  pageInfo: PageInfo!
  edges: [WorkflowExecutionEdge]!
  aggregate: AggregateWorkflowExecution!
}

input WorkflowExecutionCreateInput {
  duration: Int!
  fee: Int!
  taskExecutions: WorkflowTaskExecutionCreateManyInput
}

input WorkflowExecutionCreateManyInput {
  create: [WorkflowExecutionCreateInput!]
  connect: [WorkflowExecutionWhereUniqueInput!]
}

type WorkflowExecutionEdge {
  node: WorkflowExecution!
  cursor: String!
}

enum WorkflowExecutionOrderByInput {
  id_ASC
  id_DESC
  duration_ASC
  duration_DESC
  fee_ASC
  fee_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowExecutionPreviousValues {
  id: ID!
  duration: Int!
  fee: Int!
}

type WorkflowExecutionSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowExecution
  updatedFields: [String!]
  previousValues: WorkflowExecutionPreviousValues
}

input WorkflowExecutionSubscriptionWhereInput {
  AND: [WorkflowExecutionSubscriptionWhereInput!]
  OR: [WorkflowExecutionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowExecutionWhereInput
}

input WorkflowExecutionUpdateInput {
  duration: Int
  fee: Int
  taskExecutions: WorkflowTaskExecutionUpdateManyInput
}

input WorkflowExecutionUpdateManyInput {
  create: [WorkflowExecutionCreateInput!]
  connect: [WorkflowExecutionWhereUniqueInput!]
  disconnect: [WorkflowExecutionWhereUniqueInput!]
  delete: [WorkflowExecutionWhereUniqueInput!]
}

input WorkflowExecutionWhereInput {
  AND: [WorkflowExecutionWhereInput!]
  OR: [WorkflowExecutionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  fee: Int
  fee_not: Int
  fee_in: [Int!]
  fee_not_in: [Int!]
  fee_lt: Int
  fee_lte: Int
  fee_gt: Int
  fee_gte: Int
  taskExecutions_every: WorkflowTaskExecutionWhereInput
  taskExecutions_some: WorkflowTaskExecutionWhereInput
  taskExecutions_none: WorkflowTaskExecutionWhereInput
}

input WorkflowExecutionWhereUniqueInput {
  id: ID
}

enum WorkflowOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowPreviousValues {
  id: ID!
  title: String!
  description: String
}

type WorkflowResultConnection {
  pageInfo: PageInfo!
  edges: [WorkflowResultEdge]!
  aggregate: AggregateWorkflowResult!
}

input WorkflowResultCreateInput {
  value: String!
  reference: ParameterCreateOneInput!
}

input WorkflowResultCreateManyInput {
  create: [WorkflowResultCreateInput!]
  connect: [WorkflowResultWhereUniqueInput!]
}

type WorkflowResultEdge {
  node: WorkflowResult!
  cursor: String!
}

enum WorkflowResultOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowResultPreviousValues {
  id: ID!
  value: String!
}

type WorkflowResultSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowResult
  updatedFields: [String!]
  previousValues: WorkflowResultPreviousValues
}

input WorkflowResultSubscriptionWhereInput {
  AND: [WorkflowResultSubscriptionWhereInput!]
  OR: [WorkflowResultSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowResultWhereInput
}

input WorkflowResultUpdateInput {
  value: String
  reference: ParameterUpdateOneInput
}

input WorkflowResultUpdateManyInput {
  create: [WorkflowResultCreateInput!]
  connect: [WorkflowResultWhereUniqueInput!]
  disconnect: [WorkflowResultWhereUniqueInput!]
  delete: [WorkflowResultWhereUniqueInput!]
}

input WorkflowResultWhereInput {
  AND: [WorkflowResultWhereInput!]
  OR: [WorkflowResultWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  reference: ParameterWhereInput
}

input WorkflowResultWhereUniqueInput {
  id: ID
}

type WorkflowSourceConnection {
  pageInfo: PageInfo!
  edges: [WorkflowSourceEdge]!
  aggregate: AggregateWorkflowSource!
}

input WorkflowSourceCreateInput {
  whitelist: RunnerCreateManyWithoutSourceWhitelistedInput
  blacklist: RunnerCreateManyWithoutSourceBlacklistedInput
  service: ServiceCreateOneInput!
  event: EventCreateOneInput!
  filters: FilterDefinitionCreateManyInput
}

input WorkflowSourceCreateManyWithoutBlacklistInput {
  create: [WorkflowSourceCreateWithoutBlacklistInput!]
  connect: [WorkflowSourceWhereUniqueInput!]
}

input WorkflowSourceCreateManyWithoutWhitelistInput {
  create: [WorkflowSourceCreateWithoutWhitelistInput!]
  connect: [WorkflowSourceWhereUniqueInput!]
}

input WorkflowSourceCreateOneInput {
  create: WorkflowSourceCreateInput
  connect: WorkflowSourceWhereUniqueInput
}

input WorkflowSourceCreateWithoutBlacklistInput {
  whitelist: RunnerCreateManyWithoutSourceWhitelistedInput
  service: ServiceCreateOneInput!
  event: EventCreateOneInput!
  filters: FilterDefinitionCreateManyInput
}

input WorkflowSourceCreateWithoutWhitelistInput {
  blacklist: RunnerCreateManyWithoutSourceBlacklistedInput
  service: ServiceCreateOneInput!
  event: EventCreateOneInput!
  filters: FilterDefinitionCreateManyInput
}

type WorkflowSourceEdge {
  node: WorkflowSource!
  cursor: String!
}

enum WorkflowSourceOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowSourcePreviousValues {
  id: ID!
}

type WorkflowSourceSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowSource
  updatedFields: [String!]
  previousValues: WorkflowSourcePreviousValues
}

input WorkflowSourceSubscriptionWhereInput {
  AND: [WorkflowSourceSubscriptionWhereInput!]
  OR: [WorkflowSourceSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowSourceWhereInput
}

input WorkflowSourceUpdateInput {
  whitelist: RunnerUpdateManyWithoutSourceWhitelistedInput
  blacklist: RunnerUpdateManyWithoutSourceBlacklistedInput
  service: ServiceUpdateOneInput
  event: EventUpdateOneInput
  filters: FilterDefinitionUpdateManyInput
}

input WorkflowSourceUpdateManyWithoutBlacklistInput {
  create: [WorkflowSourceCreateWithoutBlacklistInput!]
  connect: [WorkflowSourceWhereUniqueInput!]
  disconnect: [WorkflowSourceWhereUniqueInput!]
  delete: [WorkflowSourceWhereUniqueInput!]
  update: [WorkflowSourceUpdateWithoutBlacklistInput!]
  upsert: [WorkflowSourceUpsertWithoutBlacklistInput!]
}

input WorkflowSourceUpdateManyWithoutWhitelistInput {
  create: [WorkflowSourceCreateWithoutWhitelistInput!]
  connect: [WorkflowSourceWhereUniqueInput!]
  disconnect: [WorkflowSourceWhereUniqueInput!]
  delete: [WorkflowSourceWhereUniqueInput!]
  update: [WorkflowSourceUpdateWithoutWhitelistInput!]
  upsert: [WorkflowSourceUpsertWithoutWhitelistInput!]
}

input WorkflowSourceUpdateOneInput {
  create: WorkflowSourceCreateInput
  connect: WorkflowSourceWhereUniqueInput
  disconnect: WorkflowSourceWhereUniqueInput
  delete: WorkflowSourceWhereUniqueInput
}

input WorkflowSourceUpdateWithoutBlacklistDataInput {
  whitelist: RunnerUpdateManyWithoutSourceWhitelistedInput
  service: ServiceUpdateOneInput
  event: EventUpdateOneInput
  filters: FilterDefinitionUpdateManyInput
}

input WorkflowSourceUpdateWithoutBlacklistInput {
  where: WorkflowSourceWhereUniqueInput!
  data: WorkflowSourceUpdateWithoutBlacklistDataInput!
}

input WorkflowSourceUpdateWithoutWhitelistDataInput {
  blacklist: RunnerUpdateManyWithoutSourceBlacklistedInput
  service: ServiceUpdateOneInput
  event: EventUpdateOneInput
  filters: FilterDefinitionUpdateManyInput
}

input WorkflowSourceUpdateWithoutWhitelistInput {
  where: WorkflowSourceWhereUniqueInput!
  data: WorkflowSourceUpdateWithoutWhitelistDataInput!
}

input WorkflowSourceUpsertWithoutBlacklistInput {
  where: WorkflowSourceWhereUniqueInput!
  update: WorkflowSourceUpdateWithoutBlacklistDataInput!
  create: WorkflowSourceCreateWithoutBlacklistInput!
}

input WorkflowSourceUpsertWithoutWhitelistInput {
  where: WorkflowSourceWhereUniqueInput!
  update: WorkflowSourceUpdateWithoutWhitelistDataInput!
  create: WorkflowSourceCreateWithoutWhitelistInput!
}

input WorkflowSourceWhereInput {
  AND: [WorkflowSourceWhereInput!]
  OR: [WorkflowSourceWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  whitelist_every: RunnerWhereInput
  whitelist_some: RunnerWhereInput
  whitelist_none: RunnerWhereInput
  blacklist_every: RunnerWhereInput
  blacklist_some: RunnerWhereInput
  blacklist_none: RunnerWhereInput
  service: ServiceWhereInput
  event: EventWhereInput
  filters_every: FilterDefinitionWhereInput
  filters_some: FilterDefinitionWhereInput
  filters_none: FilterDefinitionWhereInput
}

input WorkflowSourceWhereUniqueInput {
  id: ID
}

type WorkflowSubscriptionPayload {
  mutation: MutationType!
  node: Workflow
  updatedFields: [String!]
  previousValues: WorkflowPreviousValues
}

input WorkflowSubscriptionWhereInput {
  AND: [WorkflowSubscriptionWhereInput!]
  OR: [WorkflowSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowWhereInput
}

type WorkflowTaskConnection {
  pageInfo: PageInfo!
  edges: [WorkflowTaskEdge]!
  aggregate: AggregateWorkflowTask!
}

input WorkflowTaskCreateInput {
  whitelist: RunnerCreateManyWithoutTaskWhitelistedInput
  blacklist: RunnerCreateManyWithoutTaskBlacklistedInput
  service: ServiceCreateOneInput!
  task: TaskCreateOneInput!
  parameters: WorkflowResultCreateManyInput
  parents: WorkflowTaskCreateManyWithoutParentsInput
  children: WorkflowTaskCreateManyWithoutChildrenInput
}

input WorkflowTaskCreateManyInput {
  create: [WorkflowTaskCreateInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
}

input WorkflowTaskCreateManyWithoutBlacklistInput {
  create: [WorkflowTaskCreateWithoutBlacklistInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
}

input WorkflowTaskCreateManyWithoutChildrenInput {
  create: [WorkflowTaskCreateWithoutChildrenInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
}

input WorkflowTaskCreateManyWithoutParentsInput {
  create: [WorkflowTaskCreateWithoutParentsInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
}

input WorkflowTaskCreateManyWithoutWhitelistInput {
  create: [WorkflowTaskCreateWithoutWhitelistInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
}

input WorkflowTaskCreateWithoutBlacklistInput {
  whitelist: RunnerCreateManyWithoutTaskWhitelistedInput
  service: ServiceCreateOneInput!
  task: TaskCreateOneInput!
  parameters: WorkflowResultCreateManyInput
  parents: WorkflowTaskCreateManyWithoutParentsInput
  children: WorkflowTaskCreateManyWithoutChildrenInput
}

input WorkflowTaskCreateWithoutChildrenInput {
  whitelist: RunnerCreateManyWithoutTaskWhitelistedInput
  blacklist: RunnerCreateManyWithoutTaskBlacklistedInput
  service: ServiceCreateOneInput!
  task: TaskCreateOneInput!
  parameters: WorkflowResultCreateManyInput
  parents: WorkflowTaskCreateManyWithoutParentsInput
}

input WorkflowTaskCreateWithoutParentsInput {
  whitelist: RunnerCreateManyWithoutTaskWhitelistedInput
  blacklist: RunnerCreateManyWithoutTaskBlacklistedInput
  service: ServiceCreateOneInput!
  task: TaskCreateOneInput!
  parameters: WorkflowResultCreateManyInput
  children: WorkflowTaskCreateManyWithoutChildrenInput
}

input WorkflowTaskCreateWithoutWhitelistInput {
  blacklist: RunnerCreateManyWithoutTaskBlacklistedInput
  service: ServiceCreateOneInput!
  task: TaskCreateOneInput!
  parameters: WorkflowResultCreateManyInput
  parents: WorkflowTaskCreateManyWithoutParentsInput
  children: WorkflowTaskCreateManyWithoutChildrenInput
}

type WorkflowTaskEdge {
  node: WorkflowTask!
  cursor: String!
}

type WorkflowTaskExecutionConnection {
  pageInfo: PageInfo!
  edges: [WorkflowTaskExecutionEdge]!
  aggregate: AggregateWorkflowTaskExecution!
}

input WorkflowTaskExecutionCreateInput {
  duration: Int!
  fee: Int!
  results: WorkflowResultCreateManyInput
}

input WorkflowTaskExecutionCreateManyInput {
  create: [WorkflowTaskExecutionCreateInput!]
  connect: [WorkflowTaskExecutionWhereUniqueInput!]
}

type WorkflowTaskExecutionEdge {
  node: WorkflowTaskExecution!
  cursor: String!
}

enum WorkflowTaskExecutionOrderByInput {
  id_ASC
  id_DESC
  duration_ASC
  duration_DESC
  fee_ASC
  fee_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowTaskExecutionPreviousValues {
  id: ID!
  duration: Int!
  fee: Int!
}

type WorkflowTaskExecutionSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowTaskExecution
  updatedFields: [String!]
  previousValues: WorkflowTaskExecutionPreviousValues
}

input WorkflowTaskExecutionSubscriptionWhereInput {
  AND: [WorkflowTaskExecutionSubscriptionWhereInput!]
  OR: [WorkflowTaskExecutionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowTaskExecutionWhereInput
}

input WorkflowTaskExecutionUpdateInput {
  duration: Int
  fee: Int
  results: WorkflowResultUpdateManyInput
}

input WorkflowTaskExecutionUpdateManyInput {
  create: [WorkflowTaskExecutionCreateInput!]
  connect: [WorkflowTaskExecutionWhereUniqueInput!]
  disconnect: [WorkflowTaskExecutionWhereUniqueInput!]
  delete: [WorkflowTaskExecutionWhereUniqueInput!]
}

input WorkflowTaskExecutionWhereInput {
  AND: [WorkflowTaskExecutionWhereInput!]
  OR: [WorkflowTaskExecutionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  fee: Int
  fee_not: Int
  fee_in: [Int!]
  fee_not_in: [Int!]
  fee_lt: Int
  fee_lte: Int
  fee_gt: Int
  fee_gte: Int
  results_every: WorkflowResultWhereInput
  results_some: WorkflowResultWhereInput
  results_none: WorkflowResultWhereInput
}

input WorkflowTaskExecutionWhereUniqueInput {
  id: ID
}

enum WorkflowTaskOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowTaskPreviousValues {
  id: ID!
}

type WorkflowTaskSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowTask
  updatedFields: [String!]
  previousValues: WorkflowTaskPreviousValues
}

input WorkflowTaskSubscriptionWhereInput {
  AND: [WorkflowTaskSubscriptionWhereInput!]
  OR: [WorkflowTaskSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowTaskWhereInput
}

input WorkflowTaskUpdateInput {
  whitelist: RunnerUpdateManyWithoutTaskWhitelistedInput
  blacklist: RunnerUpdateManyWithoutTaskBlacklistedInput
  service: ServiceUpdateOneInput
  task: TaskUpdateOneInput
  parameters: WorkflowResultUpdateManyInput
  parents: WorkflowTaskUpdateManyWithoutParentsInput
  children: WorkflowTaskUpdateManyWithoutChildrenInput
}

input WorkflowTaskUpdateManyInput {
  create: [WorkflowTaskCreateInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
  disconnect: [WorkflowTaskWhereUniqueInput!]
  delete: [WorkflowTaskWhereUniqueInput!]
}

input WorkflowTaskUpdateManyWithoutBlacklistInput {
  create: [WorkflowTaskCreateWithoutBlacklistInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
  disconnect: [WorkflowTaskWhereUniqueInput!]
  delete: [WorkflowTaskWhereUniqueInput!]
  update: [WorkflowTaskUpdateWithoutBlacklistInput!]
  upsert: [WorkflowTaskUpsertWithoutBlacklistInput!]
}

input WorkflowTaskUpdateManyWithoutChildrenInput {
  create: [WorkflowTaskCreateWithoutChildrenInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
  disconnect: [WorkflowTaskWhereUniqueInput!]
  delete: [WorkflowTaskWhereUniqueInput!]
  update: [WorkflowTaskUpdateWithoutChildrenInput!]
  upsert: [WorkflowTaskUpsertWithoutChildrenInput!]
}

input WorkflowTaskUpdateManyWithoutParentsInput {
  create: [WorkflowTaskCreateWithoutParentsInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
  disconnect: [WorkflowTaskWhereUniqueInput!]
  delete: [WorkflowTaskWhereUniqueInput!]
  update: [WorkflowTaskUpdateWithoutParentsInput!]
  upsert: [WorkflowTaskUpsertWithoutParentsInput!]
}

input WorkflowTaskUpdateManyWithoutWhitelistInput {
  create: [WorkflowTaskCreateWithoutWhitelistInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
  disconnect: [WorkflowTaskWhereUniqueInput!]
  delete: [WorkflowTaskWhereUniqueInput!]
  update: [WorkflowTaskUpdateWithoutWhitelistInput!]
  upsert: [WorkflowTaskUpsertWithoutWhitelistInput!]
}

input WorkflowTaskUpdateWithoutBlacklistDataInput {
  whitelist: RunnerUpdateManyWithoutTaskWhitelistedInput
  service: ServiceUpdateOneInput
  task: TaskUpdateOneInput
  parameters: WorkflowResultUpdateManyInput
  parents: WorkflowTaskUpdateManyWithoutParentsInput
  children: WorkflowTaskUpdateManyWithoutChildrenInput
}

input WorkflowTaskUpdateWithoutBlacklistInput {
  where: WorkflowTaskWhereUniqueInput!
  data: WorkflowTaskUpdateWithoutBlacklistDataInput!
}

input WorkflowTaskUpdateWithoutChildrenDataInput {
  whitelist: RunnerUpdateManyWithoutTaskWhitelistedInput
  blacklist: RunnerUpdateManyWithoutTaskBlacklistedInput
  service: ServiceUpdateOneInput
  task: TaskUpdateOneInput
  parameters: WorkflowResultUpdateManyInput
  parents: WorkflowTaskUpdateManyWithoutParentsInput
}

input WorkflowTaskUpdateWithoutChildrenInput {
  where: WorkflowTaskWhereUniqueInput!
  data: WorkflowTaskUpdateWithoutChildrenDataInput!
}

input WorkflowTaskUpdateWithoutParentsDataInput {
  whitelist: RunnerUpdateManyWithoutTaskWhitelistedInput
  blacklist: RunnerUpdateManyWithoutTaskBlacklistedInput
  service: ServiceUpdateOneInput
  task: TaskUpdateOneInput
  parameters: WorkflowResultUpdateManyInput
  children: WorkflowTaskUpdateManyWithoutChildrenInput
}

input WorkflowTaskUpdateWithoutParentsInput {
  where: WorkflowTaskWhereUniqueInput!
  data: WorkflowTaskUpdateWithoutParentsDataInput!
}

input WorkflowTaskUpdateWithoutWhitelistDataInput {
  blacklist: RunnerUpdateManyWithoutTaskBlacklistedInput
  service: ServiceUpdateOneInput
  task: TaskUpdateOneInput
  parameters: WorkflowResultUpdateManyInput
  parents: WorkflowTaskUpdateManyWithoutParentsInput
  children: WorkflowTaskUpdateManyWithoutChildrenInput
}

input WorkflowTaskUpdateWithoutWhitelistInput {
  where: WorkflowTaskWhereUniqueInput!
  data: WorkflowTaskUpdateWithoutWhitelistDataInput!
}

input WorkflowTaskUpsertWithoutBlacklistInput {
  where: WorkflowTaskWhereUniqueInput!
  update: WorkflowTaskUpdateWithoutBlacklistDataInput!
  create: WorkflowTaskCreateWithoutBlacklistInput!
}

input WorkflowTaskUpsertWithoutChildrenInput {
  where: WorkflowTaskWhereUniqueInput!
  update: WorkflowTaskUpdateWithoutChildrenDataInput!
  create: WorkflowTaskCreateWithoutChildrenInput!
}

input WorkflowTaskUpsertWithoutParentsInput {
  where: WorkflowTaskWhereUniqueInput!
  update: WorkflowTaskUpdateWithoutParentsDataInput!
  create: WorkflowTaskCreateWithoutParentsInput!
}

input WorkflowTaskUpsertWithoutWhitelistInput {
  where: WorkflowTaskWhereUniqueInput!
  update: WorkflowTaskUpdateWithoutWhitelistDataInput!
  create: WorkflowTaskCreateWithoutWhitelistInput!
}

input WorkflowTaskWhereInput {
  AND: [WorkflowTaskWhereInput!]
  OR: [WorkflowTaskWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  whitelist_every: RunnerWhereInput
  whitelist_some: RunnerWhereInput
  whitelist_none: RunnerWhereInput
  blacklist_every: RunnerWhereInput
  blacklist_some: RunnerWhereInput
  blacklist_none: RunnerWhereInput
  service: ServiceWhereInput
  task: TaskWhereInput
  parameters_every: WorkflowResultWhereInput
  parameters_some: WorkflowResultWhereInput
  parameters_none: WorkflowResultWhereInput
  parents_every: WorkflowTaskWhereInput
  parents_some: WorkflowTaskWhereInput
  parents_none: WorkflowTaskWhereInput
  children_every: WorkflowTaskWhereInput
  children_some: WorkflowTaskWhereInput
  children_none: WorkflowTaskWhereInput
}

input WorkflowTaskWhereUniqueInput {
  id: ID
}

input WorkflowUpdateInput {
  title: String
  description: String
  source: WorkflowSourceUpdateOneInput
  tasks: WorkflowTaskUpdateManyInput
  executions: WorkflowExecutionUpdateManyInput
}

input WorkflowWhereInput {
  AND: [WorkflowWhereInput!]
  OR: [WorkflowWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  source: WorkflowSourceWhereInput
  tasks_every: WorkflowTaskWhereInput
  tasks_some: WorkflowTaskWhereInput
  tasks_none: WorkflowTaskWhereInput
  executions_every: WorkflowExecutionWhereInput
  executions_some: WorkflowExecutionWhereInput
  executions_none: WorkflowExecutionWhereInput
}

input WorkflowWhereUniqueInput {
  id: ID
}
`

export type WorkflowResultOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'value_ASC' |
  'value_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type WorkflowSourceOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type WorkflowTaskOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type WorkflowTaskExecutionOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'duration_ASC' |
  'duration_DESC' |
  'fee_ASC' |
  'fee_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type FilterDefinitionOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'predicate_ASC' |
  'predicate_DESC' |
  'value_ASC' |
  'value_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type WorkflowOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'title_ASC' |
  'title_DESC' |
  'description_ASC' |
  'description_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type PREDICATE = 
  'EQ' |
  'NEQ' |
  'GT' |
  'GTEQ' |
  'LT' |
  'LTEQ' |
  'MATCHES' |
  'DOES_NOT_MATCH' |
  'START' |
  'NOT_START' |
  'END' |
  'NOT_END' |
  'IN' |
  'NOT_IN' |
  'CONT' |
  'NOT_CONT'

export type ServiceOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'title_ASC' |
  'title_DESC' |
  'description_ASC' |
  'description_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type EventOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'title_ASC' |
  'title_DESC' |
  'description_ASC' |
  'description_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type RunnerOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'publicKey_ASC' |
  'publicKey_DESC' |
  'stake_ASC' |
  'stake_DESC' |
  'reliability_ASC' |
  'reliability_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type ParameterOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'title_ASC' |
  'title_DESC' |
  'description_ASC' |
  'description_DESC' |
  'type_ASC' |
  'type_DESC' |
  'required_ASC' |
  'required_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type TaskOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'title_ASC' |
  'title_DESC' |
  'description_ASC' |
  'description_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type TYPE = 
  'FLOAT' |
  'INTEGER' |
  'STRING' |
  'BOOLEAN' |
  'DATE' |
  'OBJECT'

export type WorkflowConstantOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'value_ASC' |
  'value_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type WorkflowExecutionOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'duration_ASC' |
  'duration_DESC' |
  'fee_ASC' |
  'fee_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export interface WorkflowResultCreateInput {
  value: String
  reference: ParameterCreateOneInput
}

export interface RunnerWhereInput {
  AND?: RunnerWhereInput[] | RunnerWhereInput
  OR?: RunnerWhereInput[] | RunnerWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  publicKey?: String
  publicKey_not?: String
  publicKey_in?: String[] | String
  publicKey_not_in?: String[] | String
  publicKey_lt?: String
  publicKey_lte?: String
  publicKey_gt?: String
  publicKey_gte?: String
  publicKey_contains?: String
  publicKey_not_contains?: String
  publicKey_starts_with?: String
  publicKey_not_starts_with?: String
  publicKey_ends_with?: String
  publicKey_not_ends_with?: String
  stake?: Float
  stake_not?: Float
  stake_in?: Float[] | Float
  stake_not_in?: Float[] | Float
  stake_lt?: Float
  stake_lte?: Float
  stake_gt?: Float
  stake_gte?: Float
  reliability?: Float
  reliability_not?: Float
  reliability_in?: Float[] | Float
  reliability_not_in?: Float[] | Float
  reliability_lt?: Float
  reliability_lte?: Float
  reliability_gt?: Float
  reliability_gte?: Float
  sourceWhitelisted_every?: WorkflowSourceWhereInput
  sourceWhitelisted_some?: WorkflowSourceWhereInput
  sourceWhitelisted_none?: WorkflowSourceWhereInput
  sourceBlacklisted_every?: WorkflowSourceWhereInput
  sourceBlacklisted_some?: WorkflowSourceWhereInput
  sourceBlacklisted_none?: WorkflowSourceWhereInput
  taskWhitelisted_every?: WorkflowTaskWhereInput
  taskWhitelisted_some?: WorkflowTaskWhereInput
  taskWhitelisted_none?: WorkflowTaskWhereInput
  taskBlacklisted_every?: WorkflowTaskWhereInput
  taskBlacklisted_some?: WorkflowTaskWhereInput
  taskBlacklisted_none?: WorkflowTaskWhereInput
}

export interface WorkflowTaskUpdateWithoutParentsInput {
  where: WorkflowTaskWhereUniqueInput
  data: WorkflowTaskUpdateWithoutParentsDataInput
}

export interface WorkflowTaskUpdateWithoutBlacklistDataInput {
  whitelist?: RunnerUpdateManyWithoutTaskWhitelistedInput
  service?: ServiceUpdateOneInput
  task?: TaskUpdateOneInput
  parameters?: WorkflowResultUpdateManyInput
  parents?: WorkflowTaskUpdateManyWithoutParentsInput
  children?: WorkflowTaskUpdateManyWithoutChildrenInput
}

export interface WorkflowTaskUpdateManyWithoutParentsInput {
  create?: WorkflowTaskCreateWithoutParentsInput[] | WorkflowTaskCreateWithoutParentsInput
  connect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  disconnect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  delete?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  update?: WorkflowTaskUpdateWithoutParentsInput[] | WorkflowTaskUpdateWithoutParentsInput
  upsert?: WorkflowTaskUpsertWithoutParentsInput[] | WorkflowTaskUpsertWithoutParentsInput
}

export interface WorkflowConstantCreateInput {
  value: String
}

export interface WorkflowResultUpdateManyInput {
  create?: WorkflowResultCreateInput[] | WorkflowResultCreateInput
  connect?: WorkflowResultWhereUniqueInput[] | WorkflowResultWhereUniqueInput
  disconnect?: WorkflowResultWhereUniqueInput[] | WorkflowResultWhereUniqueInput
  delete?: WorkflowResultWhereUniqueInput[] | WorkflowResultWhereUniqueInput
}

export interface WorkflowExecutionSubscriptionWhereInput {
  AND?: WorkflowExecutionSubscriptionWhereInput[] | WorkflowExecutionSubscriptionWhereInput
  OR?: WorkflowExecutionSubscriptionWhereInput[] | WorkflowExecutionSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowExecutionWhereInput
}

export interface TaskUpdateOneInput {
  create?: TaskCreateInput
  connect?: TaskWhereUniqueInput
  disconnect?: TaskWhereUniqueInput
  delete?: TaskWhereUniqueInput
}

export interface WorkflowResultSubscriptionWhereInput {
  AND?: WorkflowResultSubscriptionWhereInput[] | WorkflowResultSubscriptionWhereInput
  OR?: WorkflowResultSubscriptionWhereInput[] | WorkflowResultSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowResultWhereInput
}

export interface ServiceUpdateOneInput {
  create?: ServiceCreateInput
  connect?: ServiceWhereUniqueInput
  disconnect?: ServiceWhereUniqueInput
  delete?: ServiceWhereUniqueInput
}

export interface WorkflowTaskSubscriptionWhereInput {
  AND?: WorkflowTaskSubscriptionWhereInput[] | WorkflowTaskSubscriptionWhereInput
  OR?: WorkflowTaskSubscriptionWhereInput[] | WorkflowTaskSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowTaskWhereInput
}

export interface RunnerUpsertWithoutTaskWhitelistedInput {
  where: RunnerWhereUniqueInput
  update: RunnerUpdateWithoutTaskWhitelistedDataInput
  create: RunnerCreateWithoutTaskWhitelistedInput
}

export interface WorkflowSourceSubscriptionWhereInput {
  AND?: WorkflowSourceSubscriptionWhereInput[] | WorkflowSourceSubscriptionWhereInput
  OR?: WorkflowSourceSubscriptionWhereInput[] | WorkflowSourceSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowSourceWhereInput
}

export interface RunnerUpdateWithoutTaskWhitelistedDataInput {
  publicKey?: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted?: WorkflowSourceUpdateManyWithoutBlacklistInput
  taskBlacklisted?: WorkflowTaskUpdateManyWithoutBlacklistInput
}

export interface WorkflowConstantSubscriptionWhereInput {
  AND?: WorkflowConstantSubscriptionWhereInput[] | WorkflowConstantSubscriptionWhereInput
  OR?: WorkflowConstantSubscriptionWhereInput[] | WorkflowConstantSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowConstantWhereInput
}

export interface RunnerCreateInput {
  publicKey: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted?: WorkflowSourceCreateManyWithoutBlacklistInput
  taskWhitelisted?: WorkflowTaskCreateManyWithoutWhitelistInput
  taskBlacklisted?: WorkflowTaskCreateManyWithoutBlacklistInput
}

export interface ServiceSubscriptionWhereInput {
  AND?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput
  OR?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ServiceWhereInput
}

export interface WorkflowSourceCreateManyWithoutWhitelistInput {
  create?: WorkflowSourceCreateWithoutWhitelistInput[] | WorkflowSourceCreateWithoutWhitelistInput
  connect?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
}

export interface EventSubscriptionWhereInput {
  AND?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput
  OR?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: EventWhereInput
}

export interface WorkflowSourceCreateWithoutWhitelistInput {
  blacklist?: RunnerCreateManyWithoutSourceBlacklistedInput
  service: ServiceCreateOneInput
  event: EventCreateOneInput
  filters?: FilterDefinitionCreateManyInput
}

export interface WorkflowConstantWhereInput {
  AND?: WorkflowConstantWhereInput[] | WorkflowConstantWhereInput
  OR?: WorkflowConstantWhereInput[] | WorkflowConstantWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  value?: String
  value_not?: String
  value_in?: String[] | String
  value_not_in?: String[] | String
  value_lt?: String
  value_lte?: String
  value_gt?: String
  value_gte?: String
  value_contains?: String
  value_not_contains?: String
  value_starts_with?: String
  value_not_starts_with?: String
  value_ends_with?: String
  value_not_ends_with?: String
}

export interface RunnerCreateManyWithoutSourceBlacklistedInput {
  create?: RunnerCreateWithoutSourceBlacklistedInput[] | RunnerCreateWithoutSourceBlacklistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
}

export interface FilterDefinitionSubscriptionWhereInput {
  AND?: FilterDefinitionSubscriptionWhereInput[] | FilterDefinitionSubscriptionWhereInput
  OR?: FilterDefinitionSubscriptionWhereInput[] | FilterDefinitionSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: FilterDefinitionWhereInput
}

export interface RunnerCreateWithoutSourceBlacklistedInput {
  publicKey: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceCreateManyWithoutWhitelistInput
  taskWhitelisted?: WorkflowTaskCreateManyWithoutWhitelistInput
  taskBlacklisted?: WorkflowTaskCreateManyWithoutBlacklistInput
}

export interface WorkflowExecutionWhereInput {
  AND?: WorkflowExecutionWhereInput[] | WorkflowExecutionWhereInput
  OR?: WorkflowExecutionWhereInput[] | WorkflowExecutionWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  duration?: Int
  duration_not?: Int
  duration_in?: Int[] | Int
  duration_not_in?: Int[] | Int
  duration_lt?: Int
  duration_lte?: Int
  duration_gt?: Int
  duration_gte?: Int
  fee?: Int
  fee_not?: Int
  fee_in?: Int[] | Int
  fee_not_in?: Int[] | Int
  fee_lt?: Int
  fee_lte?: Int
  fee_gt?: Int
  fee_gte?: Int
  taskExecutions_every?: WorkflowTaskExecutionWhereInput
  taskExecutions_some?: WorkflowTaskExecutionWhereInput
  taskExecutions_none?: WorkflowTaskExecutionWhereInput
}

export interface WorkflowTaskCreateManyWithoutWhitelistInput {
  create?: WorkflowTaskCreateWithoutWhitelistInput[] | WorkflowTaskCreateWithoutWhitelistInput
  connect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
}

export interface ServiceWhereInput {
  AND?: ServiceWhereInput[] | ServiceWhereInput
  OR?: ServiceWhereInput[] | ServiceWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  events_every?: EventWhereInput
  events_some?: EventWhereInput
  events_none?: EventWhereInput
  tasks_every?: TaskWhereInput
  tasks_some?: TaskWhereInput
  tasks_none?: TaskWhereInput
}

export interface WorkflowTaskCreateWithoutWhitelistInput {
  blacklist?: RunnerCreateManyWithoutTaskBlacklistedInput
  service: ServiceCreateOneInput
  task: TaskCreateOneInput
  parameters?: WorkflowResultCreateManyInput
  parents?: WorkflowTaskCreateManyWithoutParentsInput
  children?: WorkflowTaskCreateManyWithoutChildrenInput
}

export interface WorkflowSourceWhereInput {
  AND?: WorkflowSourceWhereInput[] | WorkflowSourceWhereInput
  OR?: WorkflowSourceWhereInput[] | WorkflowSourceWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  whitelist_every?: RunnerWhereInput
  whitelist_some?: RunnerWhereInput
  whitelist_none?: RunnerWhereInput
  blacklist_every?: RunnerWhereInput
  blacklist_some?: RunnerWhereInput
  blacklist_none?: RunnerWhereInput
  service?: ServiceWhereInput
  event?: EventWhereInput
  filters_every?: FilterDefinitionWhereInput
  filters_some?: FilterDefinitionWhereInput
  filters_none?: FilterDefinitionWhereInput
}

export interface RunnerCreateManyWithoutTaskBlacklistedInput {
  create?: RunnerCreateWithoutTaskBlacklistedInput[] | RunnerCreateWithoutTaskBlacklistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
}

export interface WorkflowTaskExecutionUpdateInput {
  duration?: Int
  fee?: Int
  results?: WorkflowResultUpdateManyInput
}

export interface RunnerCreateWithoutTaskBlacklistedInput {
  publicKey: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted?: WorkflowSourceCreateManyWithoutBlacklistInput
  taskWhitelisted?: WorkflowTaskCreateManyWithoutWhitelistInput
}

export interface RunnerWhereUniqueInput {
  id?: ID_Input
  publicKey?: String
}

export interface WorkflowSourceCreateManyWithoutBlacklistInput {
  create?: WorkflowSourceCreateWithoutBlacklistInput[] | WorkflowSourceCreateWithoutBlacklistInput
  connect?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
}

export interface FilterDefinitionWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowSourceCreateWithoutBlacklistInput {
  whitelist?: RunnerCreateManyWithoutSourceWhitelistedInput
  service: ServiceCreateOneInput
  event: EventCreateOneInput
  filters?: FilterDefinitionCreateManyInput
}

export interface TaskWhereUniqueInput {
  id?: ID_Input
}

export interface RunnerCreateManyWithoutSourceWhitelistedInput {
  create?: RunnerCreateWithoutSourceWhitelistedInput[] | RunnerCreateWithoutSourceWhitelistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
}

export interface WorkflowConstantWhereUniqueInput {
  id?: ID_Input
}

export interface RunnerCreateWithoutSourceWhitelistedInput {
  publicKey: String
  stake?: Float
  reliability?: Float
  sourceBlacklisted?: WorkflowSourceCreateManyWithoutBlacklistInput
  taskWhitelisted?: WorkflowTaskCreateManyWithoutWhitelistInput
  taskBlacklisted?: WorkflowTaskCreateManyWithoutBlacklistInput
}

export interface WorkflowTaskWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowTaskCreateManyWithoutBlacklistInput {
  create?: WorkflowTaskCreateWithoutBlacklistInput[] | WorkflowTaskCreateWithoutBlacklistInput
  connect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
}

export interface WorkflowWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowTaskCreateWithoutBlacklistInput {
  whitelist?: RunnerCreateManyWithoutTaskWhitelistedInput
  service: ServiceCreateOneInput
  task: TaskCreateOneInput
  parameters?: WorkflowResultCreateManyInput
  parents?: WorkflowTaskCreateManyWithoutParentsInput
  children?: WorkflowTaskCreateManyWithoutChildrenInput
}

export interface WorkflowTaskExecutionWhereUniqueInput {
  id?: ID_Input
}

export interface RunnerCreateManyWithoutTaskWhitelistedInput {
  create?: RunnerCreateWithoutTaskWhitelistedInput[] | RunnerCreateWithoutTaskWhitelistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
}

export interface WorkflowExecutionUpdateManyInput {
  create?: WorkflowExecutionCreateInput[] | WorkflowExecutionCreateInput
  connect?: WorkflowExecutionWhereUniqueInput[] | WorkflowExecutionWhereUniqueInput
  disconnect?: WorkflowExecutionWhereUniqueInput[] | WorkflowExecutionWhereUniqueInput
  delete?: WorkflowExecutionWhereUniqueInput[] | WorkflowExecutionWhereUniqueInput
}

export interface RunnerCreateWithoutTaskWhitelistedInput {
  publicKey: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted?: WorkflowSourceCreateManyWithoutBlacklistInput
  taskBlacklisted?: WorkflowTaskCreateManyWithoutBlacklistInput
}

export interface WorkflowSourceUpdateOneInput {
  create?: WorkflowSourceCreateInput
  connect?: WorkflowSourceWhereUniqueInput
  disconnect?: WorkflowSourceWhereUniqueInput
  delete?: WorkflowSourceWhereUniqueInput
}

export interface ServiceCreateOneInput {
  create?: ServiceCreateInput
  connect?: ServiceWhereUniqueInput
}

export interface WorkflowResultUpdateInput {
  value?: String
  reference?: ParameterUpdateOneInput
}

export interface ServiceCreateInput {
  title: String
  description?: String
  events?: EventCreateManyInput
  tasks?: TaskCreateManyInput
}

export interface WorkflowSourceUpdateInput {
  whitelist?: RunnerUpdateManyWithoutSourceWhitelistedInput
  blacklist?: RunnerUpdateManyWithoutSourceBlacklistedInput
  service?: ServiceUpdateOneInput
  event?: EventUpdateOneInput
  filters?: FilterDefinitionUpdateManyInput
}

export interface EventCreateManyInput {
  create?: EventCreateInput[] | EventCreateInput
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput
}

export interface TaskUpdateManyInput {
  create?: TaskCreateInput[] | TaskCreateInput
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput
  disconnect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput
  delete?: TaskWhereUniqueInput[] | TaskWhereUniqueInput
}

export interface EventCreateInput {
  title: String
  description?: String
  data?: ParameterCreateManyInput
}

export interface ServiceUpdateInput {
  title?: String
  description?: String
  events?: EventUpdateManyInput
  tasks?: TaskUpdateManyInput
}

export interface ParameterCreateManyInput {
  create?: ParameterCreateInput[] | ParameterCreateInput
  connect?: ParameterWhereUniqueInput[] | ParameterWhereUniqueInput
}

export interface ParameterUpdateManyInput {
  create?: ParameterCreateInput[] | ParameterCreateInput
  connect?: ParameterWhereUniqueInput[] | ParameterWhereUniqueInput
  disconnect?: ParameterWhereUniqueInput[] | ParameterWhereUniqueInput
  delete?: ParameterWhereUniqueInput[] | ParameterWhereUniqueInput
}

export interface ParameterCreateInput {
  title: String
  description?: String
  type?: TYPE
  required?: Boolean
}

export interface ParameterUpdateOneInput {
  create?: ParameterCreateInput
  connect?: ParameterWhereUniqueInput
  disconnect?: ParameterWhereUniqueInput
  delete?: ParameterWhereUniqueInput
}

export interface TaskCreateManyInput {
  create?: TaskCreateInput[] | TaskCreateInput
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput
}

export interface ParameterUpdateInput {
  title?: String
  description?: String
  type?: TYPE
  required?: Boolean
}

export interface TaskCreateInput {
  title: String
  description?: String
  arguments?: ParameterCreateManyInput
}

export interface RunnerUpsertWithoutSourceBlacklistedInput {
  where: RunnerWhereUniqueInput
  update: RunnerUpdateWithoutSourceBlacklistedDataInput
  create: RunnerCreateWithoutSourceBlacklistedInput
}

export interface TaskCreateOneInput {
  create?: TaskCreateInput
  connect?: TaskWhereUniqueInput
}

export interface RunnerUpsertWithoutTaskBlacklistedInput {
  where: RunnerWhereUniqueInput
  update: RunnerUpdateWithoutTaskBlacklistedDataInput
  create: RunnerCreateWithoutTaskBlacklistedInput
}

export interface WorkflowResultCreateManyInput {
  create?: WorkflowResultCreateInput[] | WorkflowResultCreateInput
  connect?: WorkflowResultWhereUniqueInput[] | WorkflowResultWhereUniqueInput
}

export interface FilterDefinitionUpdateManyInput {
  create?: FilterDefinitionCreateInput[] | FilterDefinitionCreateInput
  connect?: FilterDefinitionWhereUniqueInput[] | FilterDefinitionWhereUniqueInput
  disconnect?: FilterDefinitionWhereUniqueInput[] | FilterDefinitionWhereUniqueInput
  delete?: FilterDefinitionWhereUniqueInput[] | FilterDefinitionWhereUniqueInput
}

export interface RunnerUpdateWithoutTaskWhitelistedInput {
  where: RunnerWhereUniqueInput
  data: RunnerUpdateWithoutTaskWhitelistedDataInput
}

export interface RunnerUpsertWithoutSourceWhitelistedInput {
  where: RunnerWhereUniqueInput
  update: RunnerUpdateWithoutSourceWhitelistedDataInput
  create: RunnerCreateWithoutSourceWhitelistedInput
}

export interface ParameterCreateOneInput {
  create?: ParameterCreateInput
  connect?: ParameterWhereUniqueInput
}

export interface WorkflowTaskUpsertWithoutParentsInput {
  where: WorkflowTaskWhereUniqueInput
  update: WorkflowTaskUpdateWithoutParentsDataInput
  create: WorkflowTaskCreateWithoutParentsInput
}

export interface WorkflowTaskCreateManyWithoutParentsInput {
  create?: WorkflowTaskCreateWithoutParentsInput[] | WorkflowTaskCreateWithoutParentsInput
  connect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
}

export interface WorkflowTaskUpdateWithoutChildrenDataInput {
  whitelist?: RunnerUpdateManyWithoutTaskWhitelistedInput
  blacklist?: RunnerUpdateManyWithoutTaskBlacklistedInput
  service?: ServiceUpdateOneInput
  task?: TaskUpdateOneInput
  parameters?: WorkflowResultUpdateManyInput
  parents?: WorkflowTaskUpdateManyWithoutParentsInput
}

export interface WorkflowTaskCreateWithoutParentsInput {
  whitelist?: RunnerCreateManyWithoutTaskWhitelistedInput
  blacklist?: RunnerCreateManyWithoutTaskBlacklistedInput
  service: ServiceCreateOneInput
  task: TaskCreateOneInput
  parameters?: WorkflowResultCreateManyInput
  children?: WorkflowTaskCreateManyWithoutChildrenInput
}

export interface WorkflowTaskUpdateManyWithoutChildrenInput {
  create?: WorkflowTaskCreateWithoutChildrenInput[] | WorkflowTaskCreateWithoutChildrenInput
  connect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  disconnect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  delete?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  update?: WorkflowTaskUpdateWithoutChildrenInput[] | WorkflowTaskUpdateWithoutChildrenInput
  upsert?: WorkflowTaskUpsertWithoutChildrenInput[] | WorkflowTaskUpsertWithoutChildrenInput
}

export interface WorkflowTaskCreateManyWithoutChildrenInput {
  create?: WorkflowTaskCreateWithoutChildrenInput[] | WorkflowTaskCreateWithoutChildrenInput
  connect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
}

export interface WorkflowTaskExecutionSubscriptionWhereInput {
  AND?: WorkflowTaskExecutionSubscriptionWhereInput[] | WorkflowTaskExecutionSubscriptionWhereInput
  OR?: WorkflowTaskExecutionSubscriptionWhereInput[] | WorkflowTaskExecutionSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowTaskExecutionWhereInput
}

export interface WorkflowTaskCreateWithoutChildrenInput {
  whitelist?: RunnerCreateManyWithoutTaskWhitelistedInput
  blacklist?: RunnerCreateManyWithoutTaskBlacklistedInput
  service: ServiceCreateOneInput
  task: TaskCreateOneInput
  parameters?: WorkflowResultCreateManyInput
  parents?: WorkflowTaskCreateManyWithoutParentsInput
}

export interface WorkflowResultWhereInput {
  AND?: WorkflowResultWhereInput[] | WorkflowResultWhereInput
  OR?: WorkflowResultWhereInput[] | WorkflowResultWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  value?: String
  value_not?: String
  value_in?: String[] | String
  value_not_in?: String[] | String
  value_lt?: String
  value_lte?: String
  value_gt?: String
  value_gte?: String
  value_contains?: String
  value_not_contains?: String
  value_starts_with?: String
  value_not_starts_with?: String
  value_ends_with?: String
  value_not_ends_with?: String
  reference?: ParameterWhereInput
}

export interface EventCreateOneInput {
  create?: EventCreateInput
  connect?: EventWhereUniqueInput
}

export interface FilterDefinitionWhereInput {
  AND?: FilterDefinitionWhereInput[] | FilterDefinitionWhereInput
  OR?: FilterDefinitionWhereInput[] | FilterDefinitionWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  predicate?: PREDICATE
  predicate_not?: PREDICATE
  predicate_in?: PREDICATE[] | PREDICATE
  predicate_not_in?: PREDICATE[] | PREDICATE
  value?: String
  value_not?: String
  value_in?: String[] | String
  value_not_in?: String[] | String
  value_lt?: String
  value_lte?: String
  value_gt?: String
  value_gte?: String
  value_contains?: String
  value_not_contains?: String
  value_starts_with?: String
  value_not_starts_with?: String
  value_ends_with?: String
  value_not_ends_with?: String
  parameter?: ParameterWhereInput
}

export interface FilterDefinitionCreateManyInput {
  create?: FilterDefinitionCreateInput[] | FilterDefinitionCreateInput
  connect?: FilterDefinitionWhereUniqueInput[] | FilterDefinitionWhereUniqueInput
}

export interface TaskSubscriptionWhereInput {
  AND?: TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput
  OR?: TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: TaskWhereInput
}

export interface FilterDefinitionCreateInput {
  predicate?: PREDICATE
  value: String
  parameter: ParameterCreateOneInput
}

export interface EventWhereInput {
  AND?: EventWhereInput[] | EventWhereInput
  OR?: EventWhereInput[] | EventWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  data_every?: ParameterWhereInput
  data_some?: ParameterWhereInput
  data_none?: ParameterWhereInput
}

export interface RunnerUpdateManyWithoutTaskWhitelistedInput {
  create?: RunnerCreateWithoutTaskWhitelistedInput[] | RunnerCreateWithoutTaskWhitelistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  disconnect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  delete?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  update?: RunnerUpdateWithoutTaskWhitelistedInput[] | RunnerUpdateWithoutTaskWhitelistedInput
  upsert?: RunnerUpsertWithoutTaskWhitelistedInput[] | RunnerUpsertWithoutTaskWhitelistedInput
}

export interface WorkflowTaskExecutionWhereInput {
  AND?: WorkflowTaskExecutionWhereInput[] | WorkflowTaskExecutionWhereInput
  OR?: WorkflowTaskExecutionWhereInput[] | WorkflowTaskExecutionWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  duration?: Int
  duration_not?: Int
  duration_in?: Int[] | Int
  duration_not_in?: Int[] | Int
  duration_lt?: Int
  duration_lte?: Int
  duration_gt?: Int
  duration_gte?: Int
  fee?: Int
  fee_not?: Int
  fee_in?: Int[] | Int
  fee_not_in?: Int[] | Int
  fee_lt?: Int
  fee_lte?: Int
  fee_gt?: Int
  fee_gte?: Int
  results_every?: WorkflowResultWhereInput
  results_some?: WorkflowResultWhereInput
  results_none?: WorkflowResultWhereInput
}

export interface WorkflowSourceCreateInput {
  whitelist?: RunnerCreateManyWithoutSourceWhitelistedInput
  blacklist?: RunnerCreateManyWithoutSourceBlacklistedInput
  service: ServiceCreateOneInput
  event: EventCreateOneInput
  filters?: FilterDefinitionCreateManyInput
}

export interface RunnerSubscriptionWhereInput {
  AND?: RunnerSubscriptionWhereInput[] | RunnerSubscriptionWhereInput
  OR?: RunnerSubscriptionWhereInput[] | RunnerSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: RunnerWhereInput
}

export interface WorkflowTaskCreateInput {
  whitelist?: RunnerCreateManyWithoutTaskWhitelistedInput
  blacklist?: RunnerCreateManyWithoutTaskBlacklistedInput
  service: ServiceCreateOneInput
  task: TaskCreateOneInput
  parameters?: WorkflowResultCreateManyInput
  parents?: WorkflowTaskCreateManyWithoutParentsInput
  children?: WorkflowTaskCreateManyWithoutChildrenInput
}

export interface ParameterWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowCreateInput {
  title: String
  description?: String
  source: WorkflowSourceCreateOneInput
  tasks?: WorkflowTaskCreateManyInput
  executions?: WorkflowExecutionCreateManyInput
}

export interface ServiceWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowSourceCreateOneInput {
  create?: WorkflowSourceCreateInput
  connect?: WorkflowSourceWhereUniqueInput
}

export interface WorkflowResultWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowTaskCreateManyInput {
  create?: WorkflowTaskCreateInput[] | WorkflowTaskCreateInput
  connect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
}

export interface WorkflowExecutionUpdateInput {
  duration?: Int
  fee?: Int
  taskExecutions?: WorkflowTaskExecutionUpdateManyInput
}

export interface WorkflowExecutionCreateManyInput {
  create?: WorkflowExecutionCreateInput[] | WorkflowExecutionCreateInput
  connect?: WorkflowExecutionWhereUniqueInput[] | WorkflowExecutionWhereUniqueInput
}

export interface WorkflowUpdateInput {
  title?: String
  description?: String
  source?: WorkflowSourceUpdateOneInput
  tasks?: WorkflowTaskUpdateManyInput
  executions?: WorkflowExecutionUpdateManyInput
}

export interface WorkflowExecutionCreateInput {
  duration: Int
  fee: Int
  taskExecutions?: WorkflowTaskExecutionCreateManyInput
}

export interface WorkflowConstantUpdateInput {
  value?: String
}

export interface WorkflowTaskExecutionCreateManyInput {
  create?: WorkflowTaskExecutionCreateInput[] | WorkflowTaskExecutionCreateInput
  connect?: WorkflowTaskExecutionWhereUniqueInput[] | WorkflowTaskExecutionWhereUniqueInput
}

export interface TaskUpdateInput {
  title?: String
  description?: String
  arguments?: ParameterUpdateManyInput
}

export interface WorkflowTaskExecutionCreateInput {
  duration: Int
  fee: Int
  results?: WorkflowResultCreateManyInput
}

export interface FilterDefinitionUpdateInput {
  predicate?: PREDICATE
  value?: String
  parameter?: ParameterUpdateOneInput
}

export interface RunnerUpdateInput {
  publicKey?: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted?: WorkflowSourceUpdateManyWithoutBlacklistInput
  taskWhitelisted?: WorkflowTaskUpdateManyWithoutWhitelistInput
  taskBlacklisted?: WorkflowTaskUpdateManyWithoutBlacklistInput
}

export interface WorkflowTaskUpsertWithoutWhitelistInput {
  where: WorkflowTaskWhereUniqueInput
  update: WorkflowTaskUpdateWithoutWhitelistDataInput
  create: WorkflowTaskCreateWithoutWhitelistInput
}

export interface WorkflowSourceUpdateManyWithoutWhitelistInput {
  create?: WorkflowSourceCreateWithoutWhitelistInput[] | WorkflowSourceCreateWithoutWhitelistInput
  connect?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
  disconnect?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
  delete?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
  update?: WorkflowSourceUpdateWithoutWhitelistInput[] | WorkflowSourceUpdateWithoutWhitelistInput
  upsert?: WorkflowSourceUpsertWithoutWhitelistInput[] | WorkflowSourceUpsertWithoutWhitelistInput
}

export interface EventUpdateOneInput {
  create?: EventCreateInput
  connect?: EventWhereUniqueInput
  disconnect?: EventWhereUniqueInput
  delete?: EventWhereUniqueInput
}

export interface WorkflowSourceUpdateWithoutWhitelistInput {
  where: WorkflowSourceWhereUniqueInput
  data: WorkflowSourceUpdateWithoutWhitelistDataInput
}

export interface WorkflowTaskUpsertWithoutChildrenInput {
  where: WorkflowTaskWhereUniqueInput
  update: WorkflowTaskUpdateWithoutChildrenDataInput
  create: WorkflowTaskCreateWithoutChildrenInput
}

export interface WorkflowSourceUpdateWithoutWhitelistDataInput {
  blacklist?: RunnerUpdateManyWithoutSourceBlacklistedInput
  service?: ServiceUpdateOneInput
  event?: EventUpdateOneInput
  filters?: FilterDefinitionUpdateManyInput
}

export interface WorkflowTaskUpdateWithoutParentsDataInput {
  whitelist?: RunnerUpdateManyWithoutTaskWhitelistedInput
  blacklist?: RunnerUpdateManyWithoutTaskBlacklistedInput
  service?: ServiceUpdateOneInput
  task?: TaskUpdateOneInput
  parameters?: WorkflowResultUpdateManyInput
  children?: WorkflowTaskUpdateManyWithoutChildrenInput
}

export interface RunnerUpdateManyWithoutSourceBlacklistedInput {
  create?: RunnerCreateWithoutSourceBlacklistedInput[] | RunnerCreateWithoutSourceBlacklistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  disconnect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  delete?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  update?: RunnerUpdateWithoutSourceBlacklistedInput[] | RunnerUpdateWithoutSourceBlacklistedInput
  upsert?: RunnerUpsertWithoutSourceBlacklistedInput[] | RunnerUpsertWithoutSourceBlacklistedInput
}

export interface WorkflowTaskWhereInput {
  AND?: WorkflowTaskWhereInput[] | WorkflowTaskWhereInput
  OR?: WorkflowTaskWhereInput[] | WorkflowTaskWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  whitelist_every?: RunnerWhereInput
  whitelist_some?: RunnerWhereInput
  whitelist_none?: RunnerWhereInput
  blacklist_every?: RunnerWhereInput
  blacklist_some?: RunnerWhereInput
  blacklist_none?: RunnerWhereInput
  service?: ServiceWhereInput
  task?: TaskWhereInput
  parameters_every?: WorkflowResultWhereInput
  parameters_some?: WorkflowResultWhereInput
  parameters_none?: WorkflowResultWhereInput
  parents_every?: WorkflowTaskWhereInput
  parents_some?: WorkflowTaskWhereInput
  parents_none?: WorkflowTaskWhereInput
  children_every?: WorkflowTaskWhereInput
  children_some?: WorkflowTaskWhereInput
  children_none?: WorkflowTaskWhereInput
}

export interface RunnerUpdateWithoutSourceBlacklistedInput {
  where: RunnerWhereUniqueInput
  data: RunnerUpdateWithoutSourceBlacklistedDataInput
}

export interface ParameterWhereInput {
  AND?: ParameterWhereInput[] | ParameterWhereInput
  OR?: ParameterWhereInput[] | ParameterWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  type?: TYPE
  type_not?: TYPE
  type_in?: TYPE[] | TYPE
  type_not_in?: TYPE[] | TYPE
  required?: Boolean
  required_not?: Boolean
}

export interface RunnerUpdateWithoutSourceBlacklistedDataInput {
  publicKey?: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceUpdateManyWithoutWhitelistInput
  taskWhitelisted?: WorkflowTaskUpdateManyWithoutWhitelistInput
  taskBlacklisted?: WorkflowTaskUpdateManyWithoutBlacklistInput
}

export interface ParameterSubscriptionWhereInput {
  AND?: ParameterSubscriptionWhereInput[] | ParameterSubscriptionWhereInput
  OR?: ParameterSubscriptionWhereInput[] | ParameterSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ParameterWhereInput
}

export interface WorkflowTaskUpdateManyWithoutWhitelistInput {
  create?: WorkflowTaskCreateWithoutWhitelistInput[] | WorkflowTaskCreateWithoutWhitelistInput
  connect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  disconnect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  delete?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  update?: WorkflowTaskUpdateWithoutWhitelistInput[] | WorkflowTaskUpdateWithoutWhitelistInput
  upsert?: WorkflowTaskUpsertWithoutWhitelistInput[] | WorkflowTaskUpsertWithoutWhitelistInput
}

export interface EventWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowTaskUpdateWithoutWhitelistInput {
  where: WorkflowTaskWhereUniqueInput
  data: WorkflowTaskUpdateWithoutWhitelistDataInput
}

export interface WorkflowExecutionWhereUniqueInput {
  id?: ID_Input
}

export interface WorkflowTaskUpdateWithoutWhitelistDataInput {
  blacklist?: RunnerUpdateManyWithoutTaskBlacklistedInput
  service?: ServiceUpdateOneInput
  task?: TaskUpdateOneInput
  parameters?: WorkflowResultUpdateManyInput
  parents?: WorkflowTaskUpdateManyWithoutParentsInput
  children?: WorkflowTaskUpdateManyWithoutChildrenInput
}

export interface WorkflowTaskUpdateInput {
  whitelist?: RunnerUpdateManyWithoutTaskWhitelistedInput
  blacklist?: RunnerUpdateManyWithoutTaskBlacklistedInput
  service?: ServiceUpdateOneInput
  task?: TaskUpdateOneInput
  parameters?: WorkflowResultUpdateManyInput
  parents?: WorkflowTaskUpdateManyWithoutParentsInput
  children?: WorkflowTaskUpdateManyWithoutChildrenInput
}

export interface RunnerUpdateManyWithoutTaskBlacklistedInput {
  create?: RunnerCreateWithoutTaskBlacklistedInput[] | RunnerCreateWithoutTaskBlacklistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  disconnect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  delete?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  update?: RunnerUpdateWithoutTaskBlacklistedInput[] | RunnerUpdateWithoutTaskBlacklistedInput
  upsert?: RunnerUpsertWithoutTaskBlacklistedInput[] | RunnerUpsertWithoutTaskBlacklistedInput
}

export interface EventUpdateInput {
  title?: String
  description?: String
  data?: ParameterUpdateManyInput
}

export interface RunnerUpdateWithoutTaskBlacklistedInput {
  where: RunnerWhereUniqueInput
  data: RunnerUpdateWithoutTaskBlacklistedDataInput
}

export interface WorkflowSourceUpsertWithoutBlacklistInput {
  where: WorkflowSourceWhereUniqueInput
  update: WorkflowSourceUpdateWithoutBlacklistDataInput
  create: WorkflowSourceCreateWithoutBlacklistInput
}

export interface RunnerUpdateWithoutTaskBlacklistedDataInput {
  publicKey?: String
  stake?: Float
  reliability?: Float
  sourceWhitelisted?: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted?: WorkflowSourceUpdateManyWithoutBlacklistInput
  taskWhitelisted?: WorkflowTaskUpdateManyWithoutWhitelistInput
}

export interface WorkflowTaskUpdateWithoutChildrenInput {
  where: WorkflowTaskWhereUniqueInput
  data: WorkflowTaskUpdateWithoutChildrenDataInput
}

export interface WorkflowSourceUpdateManyWithoutBlacklistInput {
  create?: WorkflowSourceCreateWithoutBlacklistInput[] | WorkflowSourceCreateWithoutBlacklistInput
  connect?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
  disconnect?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
  delete?: WorkflowSourceWhereUniqueInput[] | WorkflowSourceWhereUniqueInput
  update?: WorkflowSourceUpdateWithoutBlacklistInput[] | WorkflowSourceUpdateWithoutBlacklistInput
  upsert?: WorkflowSourceUpsertWithoutBlacklistInput[] | WorkflowSourceUpsertWithoutBlacklistInput
}

export interface TaskWhereInput {
  AND?: TaskWhereInput[] | TaskWhereInput
  OR?: TaskWhereInput[] | TaskWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  arguments_every?: ParameterWhereInput
  arguments_some?: ParameterWhereInput
  arguments_none?: ParameterWhereInput
}

export interface WorkflowSourceUpdateWithoutBlacklistInput {
  where: WorkflowSourceWhereUniqueInput
  data: WorkflowSourceUpdateWithoutBlacklistDataInput
}

export interface WorkflowTaskExecutionUpdateManyInput {
  create?: WorkflowTaskExecutionCreateInput[] | WorkflowTaskExecutionCreateInput
  connect?: WorkflowTaskExecutionWhereUniqueInput[] | WorkflowTaskExecutionWhereUniqueInput
  disconnect?: WorkflowTaskExecutionWhereUniqueInput[] | WorkflowTaskExecutionWhereUniqueInput
  delete?: WorkflowTaskExecutionWhereUniqueInput[] | WorkflowTaskExecutionWhereUniqueInput
}

export interface WorkflowSourceUpdateWithoutBlacklistDataInput {
  whitelist?: RunnerUpdateManyWithoutSourceWhitelistedInput
  service?: ServiceUpdateOneInput
  event?: EventUpdateOneInput
  filters?: FilterDefinitionUpdateManyInput
}

export interface WorkflowTaskUpdateManyInput {
  create?: WorkflowTaskCreateInput[] | WorkflowTaskCreateInput
  connect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  disconnect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  delete?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
}

export interface RunnerUpdateManyWithoutSourceWhitelistedInput {
  create?: RunnerCreateWithoutSourceWhitelistedInput[] | RunnerCreateWithoutSourceWhitelistedInput
  connect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  disconnect?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  delete?: RunnerWhereUniqueInput[] | RunnerWhereUniqueInput
  update?: RunnerUpdateWithoutSourceWhitelistedInput[] | RunnerUpdateWithoutSourceWhitelistedInput
  upsert?: RunnerUpsertWithoutSourceWhitelistedInput[] | RunnerUpsertWithoutSourceWhitelistedInput
}

export interface WorkflowSourceUpsertWithoutWhitelistInput {
  where: WorkflowSourceWhereUniqueInput
  update: WorkflowSourceUpdateWithoutWhitelistDataInput
  create: WorkflowSourceCreateWithoutWhitelistInput
}

export interface WorkflowSubscriptionWhereInput {
  AND?: WorkflowSubscriptionWhereInput[] | WorkflowSubscriptionWhereInput
  OR?: WorkflowSubscriptionWhereInput[] | WorkflowSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkflowWhereInput
}

export interface WorkflowTaskUpdateWithoutBlacklistInput {
  where: WorkflowTaskWhereUniqueInput
  data: WorkflowTaskUpdateWithoutBlacklistDataInput
}

export interface WorkflowTaskUpdateManyWithoutBlacklistInput {
  create?: WorkflowTaskCreateWithoutBlacklistInput[] | WorkflowTaskCreateWithoutBlacklistInput
  connect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  disconnect?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  delete?: WorkflowTaskWhereUniqueInput[] | WorkflowTaskWhereUniqueInput
  update?: WorkflowTaskUpdateWithoutBlacklistInput[] | WorkflowTaskUpdateWithoutBlacklistInput
  upsert?: WorkflowTaskUpsertWithoutBlacklistInput[] | WorkflowTaskUpsertWithoutBlacklistInput
}

export interface RunnerUpdateWithoutSourceWhitelistedDataInput {
  publicKey?: String
  stake?: Float
  reliability?: Float
  sourceBlacklisted?: WorkflowSourceUpdateManyWithoutBlacklistInput
  taskWhitelisted?: WorkflowTaskUpdateManyWithoutWhitelistInput
  taskBlacklisted?: WorkflowTaskUpdateManyWithoutBlacklistInput
}

export interface RunnerUpdateWithoutSourceWhitelistedInput {
  where: RunnerWhereUniqueInput
  data: RunnerUpdateWithoutSourceWhitelistedDataInput
}

export interface WorkflowWhereInput {
  AND?: WorkflowWhereInput[] | WorkflowWhereInput
  OR?: WorkflowWhereInput[] | WorkflowWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  source?: WorkflowSourceWhereInput
  tasks_every?: WorkflowTaskWhereInput
  tasks_some?: WorkflowTaskWhereInput
  tasks_none?: WorkflowTaskWhereInput
  executions_every?: WorkflowExecutionWhereInput
  executions_some?: WorkflowExecutionWhereInput
  executions_none?: WorkflowExecutionWhereInput
}

export interface WorkflowTaskUpsertWithoutBlacklistInput {
  where: WorkflowTaskWhereUniqueInput
  update: WorkflowTaskUpdateWithoutBlacklistDataInput
  create: WorkflowTaskCreateWithoutBlacklistInput
}

export interface EventUpdateManyInput {
  create?: EventCreateInput[] | EventCreateInput
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput
  disconnect?: EventWhereUniqueInput[] | EventWhereUniqueInput
  delete?: EventWhereUniqueInput[] | EventWhereUniqueInput
}

export interface WorkflowSourceWhereUniqueInput {
  id?: ID_Input
}

export interface Node {
  id: ID_Output
}

export interface WorkflowTaskExecutionPreviousValues {
  id: ID_Output
  duration: Int
  fee: Int
}

export interface Runner extends Node {
  id: ID_Output
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted?: WorkflowSource[]
  sourceBlacklisted?: WorkflowSource[]
  taskWhitelisted?: WorkflowTask[]
  taskBlacklisted?: WorkflowTask[]
}

export interface BatchPayload {
  count: Long
}

export interface AggregateWorkflowTaskExecution {
  count: Int
}

export interface WorkflowTaskExecutionSubscriptionPayload {
  mutation: MutationType
  node?: WorkflowTaskExecution
  updatedFields?: String[]
  previousValues?: WorkflowTaskExecutionPreviousValues
}

export interface Service extends Node {
  id: ID_Output
  title: String
  description?: String
  events?: Event[]
  tasks?: Task[]
}

export interface WorkflowTaskExecutionEdge {
  node: WorkflowTaskExecution
  cursor: String
}

export interface WorkflowTaskExecutionConnection {
  pageInfo: PageInfo
  edges: WorkflowTaskExecutionEdge[]
  aggregate: AggregateWorkflowTaskExecution
}

export interface AggregateWorkflowExecution {
  count: Int
}

export interface WorkflowExecutionConnection {
  pageInfo: PageInfo
  edges: WorkflowExecutionEdge[]
  aggregate: AggregateWorkflowExecution
}

export interface WorkflowExecution extends Node {
  id: ID_Output
  duration: Int
  fee: Int
  taskExecutions?: WorkflowTaskExecution[]
}

export interface WorkflowEdge {
  node: Workflow
  cursor: String
}

export interface WorkflowSource extends Node {
  id: ID_Output
  whitelist?: Runner[]
  blacklist?: Runner[]
  service: Service
  event: Event
  filters?: FilterDefinition[]
}

export interface AggregateWorkflowResult {
  count: Int
}

export interface RunnerSubscriptionPayload {
  mutation: MutationType
  node?: Runner
  updatedFields?: String[]
  previousValues?: RunnerPreviousValues
}

export interface WorkflowResultConnection {
  pageInfo: PageInfo
  edges: WorkflowResultEdge[]
  aggregate: AggregateWorkflowResult
}

export interface RunnerPreviousValues {
  id: ID_Output
  publicKey: String
  stake: Float
  reliability: Float
}

export interface WorkflowTaskEdge {
  node: WorkflowTask
  cursor: String
}

export interface Workflow extends Node {
  id: ID_Output
  title: String
  description?: String
  source: WorkflowSource
  tasks?: WorkflowTask[]
  executions?: WorkflowExecution[]
}

export interface AggregateWorkflowSource {
  count: Int
}

export interface ParameterSubscriptionPayload {
  mutation: MutationType
  node?: Parameter
  updatedFields?: String[]
  previousValues?: ParameterPreviousValues
}

export interface WorkflowSourceConnection {
  pageInfo: PageInfo
  edges: WorkflowSourceEdge[]
  aggregate: AggregateWorkflowSource
}

export interface ParameterPreviousValues {
  id: ID_Output
  title: String
  description?: String
  type: TYPE
  required?: Boolean
}

export interface WorkflowConstantEdge {
  node: WorkflowConstant
  cursor: String
}

export interface WorkflowConstant extends Node {
  id: ID_Output
  value: String
}

export interface AggregateService {
  count: Int
}

export interface FilterDefinitionSubscriptionPayload {
  mutation: MutationType
  node?: FilterDefinition
  updatedFields?: String[]
  previousValues?: FilterDefinitionPreviousValues
}

export interface ServiceConnection {
  pageInfo: PageInfo
  edges: ServiceEdge[]
  aggregate: AggregateService
}

export interface FilterDefinitionPreviousValues {
  id: ID_Output
  predicate: PREDICATE
  value: String
}

export interface TaskEdge {
  node: Task
  cursor: String
}

export interface WorkflowResult extends Node {
  id: ID_Output
  reference: Parameter
  value: String
}

export interface AggregateEvent {
  count: Int
}

export interface EventSubscriptionPayload {
  mutation: MutationType
  node?: Event
  updatedFields?: String[]
  previousValues?: EventPreviousValues
}

export interface EventConnection {
  pageInfo: PageInfo
  edges: EventEdge[]
  aggregate: AggregateEvent
}

export interface EventPreviousValues {
  id: ID_Output
  title: String
  description?: String
}

export interface FilterDefinitionEdge {
  node: FilterDefinition
  cursor: String
}

export interface WorkflowExecutionPreviousValues {
  id: ID_Output
  duration: Int
  fee: Int
}

export interface AggregateParameter {
  count: Int
}

export interface TaskSubscriptionPayload {
  mutation: MutationType
  node?: Task
  updatedFields?: String[]
  previousValues?: TaskPreviousValues
}

export interface ParameterConnection {
  pageInfo: PageInfo
  edges: ParameterEdge[]
  aggregate: AggregateParameter
}

export interface TaskPreviousValues {
  id: ID_Output
  title: String
  description?: String
}

export interface RunnerEdge {
  node: Runner
  cursor: String
}

export interface WorkflowTask extends Node {
  id: ID_Output
  whitelist?: Runner[]
  blacklist?: Runner[]
  service: Service
  task: Task
  parameters?: WorkflowResult[]
  parents?: WorkflowTask[]
  children?: WorkflowTask[]
}

export interface RunnerConnection {
  pageInfo: PageInfo
  edges: RunnerEdge[]
  aggregate: AggregateRunner
}

export interface ServiceSubscriptionPayload {
  mutation: MutationType
  node?: Service
  updatedFields?: String[]
  previousValues?: ServicePreviousValues
}

export interface WorkflowExecutionEdge {
  node: WorkflowExecution
  cursor: String
}

export interface ServicePreviousValues {
  id: ID_Output
  title: String
  description?: String
}

export interface WorkflowConnection {
  pageInfo: PageInfo
  edges: WorkflowEdge[]
  aggregate: AggregateWorkflow
}

export interface FilterDefinition extends Node {
  id: ID_Output
  parameter: Parameter
  predicate: PREDICATE
  value: String
}

export interface AggregateWorkflowTask {
  count: Int
}

export interface WorkflowConstantSubscriptionPayload {
  mutation: MutationType
  node?: WorkflowConstant
  updatedFields?: String[]
  previousValues?: WorkflowConstantPreviousValues
}

export interface WorkflowSourceEdge {
  node: WorkflowSource
  cursor: String
}

export interface WorkflowConstantPreviousValues {
  id: ID_Output
  value: String
}

export interface WorkflowConstantConnection {
  pageInfo: PageInfo
  edges: WorkflowConstantEdge[]
  aggregate: AggregateWorkflowConstant
}

export interface Task extends Node {
  id: ID_Output
  title: String
  description?: String
  arguments?: Parameter[]
}

export interface AggregateTask {
  count: Int
}

export interface WorkflowSourceSubscriptionPayload {
  mutation: MutationType
  node?: WorkflowSource
  updatedFields?: String[]
  previousValues?: WorkflowSourcePreviousValues
}

export interface EventEdge {
  node: Event
  cursor: String
}

export interface WorkflowSourcePreviousValues {
  id: ID_Output
}

export interface FilterDefinitionConnection {
  pageInfo: PageInfo
  edges: FilterDefinitionEdge[]
  aggregate: AggregateFilterDefinition
}

export interface Parameter extends Node {
  id: ID_Output
  title: String
  description?: String
  type: TYPE
  required?: Boolean
}

export interface AggregateRunner {
  count: Int
}

export interface WorkflowTaskSubscriptionPayload {
  mutation: MutationType
  node?: WorkflowTask
  updatedFields?: String[]
  previousValues?: WorkflowTaskPreviousValues
}

export interface WorkflowTaskExecution extends Node {
  id: ID_Output
  duration: Int
  fee: Int
  results?: WorkflowResult[]
}

export interface WorkflowTaskPreviousValues {
  id: ID_Output
}

export interface WorkflowResultEdge {
  node: WorkflowResult
  cursor: String
}

export interface Event extends Node {
  id: ID_Output
  title: String
  description?: String
  data?: Parameter[]
}

export interface AggregateWorkflowConstant {
  count: Int
}

export interface WorkflowResultSubscriptionPayload {
  mutation: MutationType
  node?: WorkflowResult
  updatedFields?: String[]
  previousValues?: WorkflowResultPreviousValues
}

export interface TaskConnection {
  pageInfo: PageInfo
  edges: TaskEdge[]
  aggregate: AggregateTask
}

export interface ParameterEdge {
  node: Parameter
  cursor: String
}

export interface WorkflowPreviousValues {
  id: ID_Output
  title: String
  description?: String
}

export interface WorkflowSubscriptionPayload {
  mutation: MutationType
  node?: Workflow
  updatedFields?: String[]
  previousValues?: WorkflowPreviousValues
}

export interface WorkflowExecutionSubscriptionPayload {
  mutation: MutationType
  node?: WorkflowExecution
  updatedFields?: String[]
  previousValues?: WorkflowExecutionPreviousValues
}

export interface WorkflowResultPreviousValues {
  id: ID_Output
  value: String
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface AggregateFilterDefinition {
  count: Int
}

export interface ServiceEdge {
  node: Service
  cursor: String
}

export interface WorkflowTaskConnection {
  pageInfo: PageInfo
  edges: WorkflowTaskEdge[]
  aggregate: AggregateWorkflowTask
}

export interface AggregateWorkflow {
  count: Int
}

export type Long = string

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  runners: (args: { where?: RunnerWhereInput, orderBy?: RunnerOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Runner[]>
  parameters: (args: { where?: ParameterWhereInput, orderBy?: ParameterOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Parameter[]>
  filterDefinitions: (args: { where?: FilterDefinitionWhereInput, orderBy?: FilterDefinitionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinition[]>
  events: (args: { where?: EventWhereInput, orderBy?: EventOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Event[]>
  tasks: (args: { where?: TaskWhereInput, orderBy?: TaskOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Task[]>
  services: (args: { where?: ServiceWhereInput, orderBy?: ServiceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Service[]>
  workflowConstants: (args: { where?: WorkflowConstantWhereInput, orderBy?: WorkflowConstantOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstant[]>
  workflowSources: (args: { where?: WorkflowSourceWhereInput, orderBy?: WorkflowSourceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSource[]>
  workflowTasks: (args: { where?: WorkflowTaskWhereInput, orderBy?: WorkflowTaskOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTask[]>
  workflowResults: (args: { where?: WorkflowResultWhereInput, orderBy?: WorkflowResultOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResult[]>
  workflows: (args: { where?: WorkflowWhereInput, orderBy?: WorkflowOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Workflow[]>
  workflowExecutions: (args: { where?: WorkflowExecutionWhereInput, orderBy?: WorkflowExecutionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecution[]>
  workflowTaskExecutions: (args: { where?: WorkflowTaskExecutionWhereInput, orderBy?: WorkflowTaskExecutionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTaskExecution[]>
  runner: (args: { where: RunnerWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Runner | null>
  parameter: (args: { where: ParameterWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Parameter | null>
  filterDefinition: (args: { where: FilterDefinitionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinition | null>
  event: (args: { where: EventWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Event | null>
  task: (args: { where: TaskWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Task | null>
  service: (args: { where: ServiceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Service | null>
  workflowConstant: (args: { where: WorkflowConstantWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstant | null>
  workflowSource: (args: { where: WorkflowSourceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSource | null>
  workflowTask: (args: { where: WorkflowTaskWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTask | null>
  workflowResult: (args: { where: WorkflowResultWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResult | null>
  workflow: (args: { where: WorkflowWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Workflow | null>
  workflowExecution: (args: { where: WorkflowExecutionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecution | null>
  workflowTaskExecution: (args: { where: WorkflowTaskExecutionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTaskExecution | null>
  runnersConnection: (args: { where?: RunnerWhereInput, orderBy?: RunnerOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<RunnerConnection>
  parametersConnection: (args: { where?: ParameterWhereInput, orderBy?: ParameterOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ParameterConnection>
  filterDefinitionsConnection: (args: { where?: FilterDefinitionWhereInput, orderBy?: FilterDefinitionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinitionConnection>
  eventsConnection: (args: { where?: EventWhereInput, orderBy?: EventOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<EventConnection>
  tasksConnection: (args: { where?: TaskWhereInput, orderBy?: TaskOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<TaskConnection>
  servicesConnection: (args: { where?: ServiceWhereInput, orderBy?: ServiceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ServiceConnection>
  workflowConstantsConnection: (args: { where?: WorkflowConstantWhereInput, orderBy?: WorkflowConstantOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstantConnection>
  workflowSourcesConnection: (args: { where?: WorkflowSourceWhereInput, orderBy?: WorkflowSourceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSourceConnection>
  workflowTasksConnection: (args: { where?: WorkflowTaskWhereInput, orderBy?: WorkflowTaskOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTaskConnection>
  workflowResultsConnection: (args: { where?: WorkflowResultWhereInput, orderBy?: WorkflowResultOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResultConnection>
  workflowsConnection: (args: { where?: WorkflowWhereInput, orderBy?: WorkflowOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConnection>
  workflowExecutionsConnection: (args: { where?: WorkflowExecutionWhereInput, orderBy?: WorkflowExecutionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecutionConnection>
  workflowTaskExecutionsConnection: (args: { where?: WorkflowTaskExecutionWhereInput, orderBy?: WorkflowTaskExecutionOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTaskExecutionConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createRunner: (args: { data: RunnerCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Runner>
  createParameter: (args: { data: ParameterCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Parameter>
  createFilterDefinition: (args: { data: FilterDefinitionCreateInput }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinition>
  createEvent: (args: { data: EventCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Event>
  createTask: (args: { data: TaskCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Task>
  createService: (args: { data: ServiceCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Service>
  createWorkflowConstant: (args: { data: WorkflowConstantCreateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstant>
  createWorkflowSource: (args: { data: WorkflowSourceCreateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSource>
  createWorkflowTask: (args: { data: WorkflowTaskCreateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTask>
  createWorkflowResult: (args: { data: WorkflowResultCreateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResult>
  createWorkflow: (args: { data: WorkflowCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Workflow>
  createWorkflowExecution: (args: { data: WorkflowExecutionCreateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecution>
  createWorkflowTaskExecution: (args: { data: WorkflowTaskExecutionCreateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTaskExecution>
  updateRunner: (args: { data: RunnerUpdateInput, where: RunnerWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Runner | null>
  updateParameter: (args: { data: ParameterUpdateInput, where: ParameterWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Parameter | null>
  updateFilterDefinition: (args: { data: FilterDefinitionUpdateInput, where: FilterDefinitionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinition | null>
  updateEvent: (args: { data: EventUpdateInput, where: EventWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Event | null>
  updateTask: (args: { data: TaskUpdateInput, where: TaskWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Task | null>
  updateService: (args: { data: ServiceUpdateInput, where: ServiceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Service | null>
  updateWorkflowConstant: (args: { data: WorkflowConstantUpdateInput, where: WorkflowConstantWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstant | null>
  updateWorkflowSource: (args: { data: WorkflowSourceUpdateInput, where: WorkflowSourceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSource | null>
  updateWorkflowTask: (args: { data: WorkflowTaskUpdateInput, where: WorkflowTaskWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTask | null>
  updateWorkflowResult: (args: { data: WorkflowResultUpdateInput, where: WorkflowResultWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResult | null>
  updateWorkflow: (args: { data: WorkflowUpdateInput, where: WorkflowWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Workflow | null>
  updateWorkflowExecution: (args: { data: WorkflowExecutionUpdateInput, where: WorkflowExecutionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecution | null>
  updateWorkflowTaskExecution: (args: { data: WorkflowTaskExecutionUpdateInput, where: WorkflowTaskExecutionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTaskExecution | null>
  deleteRunner: (args: { where: RunnerWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Runner | null>
  deleteParameter: (args: { where: ParameterWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Parameter | null>
  deleteFilterDefinition: (args: { where: FilterDefinitionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinition | null>
  deleteEvent: (args: { where: EventWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Event | null>
  deleteTask: (args: { where: TaskWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Task | null>
  deleteService: (args: { where: ServiceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Service | null>
  deleteWorkflowConstant: (args: { where: WorkflowConstantWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstant | null>
  deleteWorkflowSource: (args: { where: WorkflowSourceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSource | null>
  deleteWorkflowTask: (args: { where: WorkflowTaskWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTask | null>
  deleteWorkflowResult: (args: { where: WorkflowResultWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResult | null>
  deleteWorkflow: (args: { where: WorkflowWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Workflow | null>
  deleteWorkflowExecution: (args: { where: WorkflowExecutionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecution | null>
  deleteWorkflowTaskExecution: (args: { where: WorkflowTaskExecutionWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTaskExecution | null>
  upsertRunner: (args: { where: RunnerWhereUniqueInput, create: RunnerCreateInput, update: RunnerUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Runner>
  upsertParameter: (args: { where: ParameterWhereUniqueInput, create: ParameterCreateInput, update: ParameterUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Parameter>
  upsertFilterDefinition: (args: { where: FilterDefinitionWhereUniqueInput, create: FilterDefinitionCreateInput, update: FilterDefinitionUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<FilterDefinition>
  upsertEvent: (args: { where: EventWhereUniqueInput, create: EventCreateInput, update: EventUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Event>
  upsertTask: (args: { where: TaskWhereUniqueInput, create: TaskCreateInput, update: TaskUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Task>
  upsertService: (args: { where: ServiceWhereUniqueInput, create: ServiceCreateInput, update: ServiceUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Service>
  upsertWorkflowConstant: (args: { where: WorkflowConstantWhereUniqueInput, create: WorkflowConstantCreateInput, update: WorkflowConstantUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowConstant>
  upsertWorkflowSource: (args: { where: WorkflowSourceWhereUniqueInput, create: WorkflowSourceCreateInput, update: WorkflowSourceUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowSource>
  upsertWorkflowTask: (args: { where: WorkflowTaskWhereUniqueInput, create: WorkflowTaskCreateInput, update: WorkflowTaskUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTask>
  upsertWorkflowResult: (args: { where: WorkflowResultWhereUniqueInput, create: WorkflowResultCreateInput, update: WorkflowResultUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowResult>
  upsertWorkflow: (args: { where: WorkflowWhereUniqueInput, create: WorkflowCreateInput, update: WorkflowUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Workflow>
  upsertWorkflowExecution: (args: { where: WorkflowExecutionWhereUniqueInput, create: WorkflowExecutionCreateInput, update: WorkflowExecutionUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowExecution>
  upsertWorkflowTaskExecution: (args: { where: WorkflowTaskExecutionWhereUniqueInput, create: WorkflowTaskExecutionCreateInput, update: WorkflowTaskExecutionUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<WorkflowTaskExecution>
  updateManyRunners: (args: { data: RunnerUpdateInput, where: RunnerWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyParameters: (args: { data: ParameterUpdateInput, where: ParameterWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyFilterDefinitions: (args: { data: FilterDefinitionUpdateInput, where: FilterDefinitionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyEvents: (args: { data: EventUpdateInput, where: EventWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyTasks: (args: { data: TaskUpdateInput, where: TaskWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyServices: (args: { data: ServiceUpdateInput, where: ServiceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflowConstants: (args: { data: WorkflowConstantUpdateInput, where: WorkflowConstantWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflowSources: (args: { data: WorkflowSourceUpdateInput, where: WorkflowSourceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflowTasks: (args: { data: WorkflowTaskUpdateInput, where: WorkflowTaskWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflowResults: (args: { data: WorkflowResultUpdateInput, where: WorkflowResultWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflows: (args: { data: WorkflowUpdateInput, where: WorkflowWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflowExecutions: (args: { data: WorkflowExecutionUpdateInput, where: WorkflowExecutionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorkflowTaskExecutions: (args: { data: WorkflowTaskExecutionUpdateInput, where: WorkflowTaskExecutionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyRunners: (args: { where: RunnerWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyParameters: (args: { where: ParameterWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyFilterDefinitions: (args: { where: FilterDefinitionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyEvents: (args: { where: EventWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyTasks: (args: { where: TaskWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyServices: (args: { where: ServiceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflowConstants: (args: { where: WorkflowConstantWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflowSources: (args: { where: WorkflowSourceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflowTasks: (args: { where: WorkflowTaskWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflowResults: (args: { where: WorkflowResultWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflows: (args: { where: WorkflowWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflowExecutions: (args: { where: WorkflowExecutionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorkflowTaskExecutions: (args: { where: WorkflowTaskExecutionWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
}

export type Subscription = {
  runner: (args: { where?: RunnerSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<RunnerSubscriptionPayload>>
  parameter: (args: { where?: ParameterSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ParameterSubscriptionPayload>>
  filterDefinition: (args: { where?: FilterDefinitionSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<FilterDefinitionSubscriptionPayload>>
  event: (args: { where?: EventSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<EventSubscriptionPayload>>
  task: (args: { where?: TaskSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<TaskSubscriptionPayload>>
  service: (args: { where?: ServiceSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ServiceSubscriptionPayload>>
  workflowConstant: (args: { where?: WorkflowConstantSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowConstantSubscriptionPayload>>
  workflowSource: (args: { where?: WorkflowSourceSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowSourceSubscriptionPayload>>
  workflowTask: (args: { where?: WorkflowTaskSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowTaskSubscriptionPayload>>
  workflowResult: (args: { where?: WorkflowResultSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowResultSubscriptionPayload>>
  workflow: (args: { where?: WorkflowSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowSubscriptionPayload>>
  workflowExecution: (args: { where?: WorkflowExecutionSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowExecutionSubscriptionPayload>>
  workflowTaskExecution: (args: { where?: WorkflowTaskExecutionSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkflowTaskExecutionSubscriptionPayload>>
}

export class Prisma extends BasePrisma {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    Runner: (where: RunnerWhereInput): Promise<boolean> => super.existsDelegate('query', 'runners', { where }, {}, '{ id }'),
    Parameter: (where: ParameterWhereInput): Promise<boolean> => super.existsDelegate('query', 'parameters', { where }, {}, '{ id }'),
    FilterDefinition: (where: FilterDefinitionWhereInput): Promise<boolean> => super.existsDelegate('query', 'filterDefinitions', { where }, {}, '{ id }'),
    Event: (where: EventWhereInput): Promise<boolean> => super.existsDelegate('query', 'events', { where }, {}, '{ id }'),
    Task: (where: TaskWhereInput): Promise<boolean> => super.existsDelegate('query', 'tasks', { where }, {}, '{ id }'),
    Service: (where: ServiceWhereInput): Promise<boolean> => super.existsDelegate('query', 'services', { where }, {}, '{ id }'),
    WorkflowConstant: (where: WorkflowConstantWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflowConstants', { where }, {}, '{ id }'),
    WorkflowSource: (where: WorkflowSourceWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflowSources', { where }, {}, '{ id }'),
    WorkflowTask: (where: WorkflowTaskWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflowTasks', { where }, {}, '{ id }'),
    WorkflowResult: (where: WorkflowResultWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflowResults', { where }, {}, '{ id }'),
    Workflow: (where: WorkflowWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflows', { where }, {}, '{ id }'),
    WorkflowExecution: (where: WorkflowExecutionWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflowExecutions', { where }, {}, '{ id }'),
    WorkflowTaskExecution: (where: WorkflowTaskExecutionWhereInput): Promise<boolean> => super.existsDelegate('query', 'workflowTaskExecutions', { where }, {}, '{ id }')
  }

  query: Query = {
    runners: (args, info): Promise<Runner[]> => super.delegate('query', 'runners', args, {}, info),
    parameters: (args, info): Promise<Parameter[]> => super.delegate('query', 'parameters', args, {}, info),
    filterDefinitions: (args, info): Promise<FilterDefinition[]> => super.delegate('query', 'filterDefinitions', args, {}, info),
    events: (args, info): Promise<Event[]> => super.delegate('query', 'events', args, {}, info),
    tasks: (args, info): Promise<Task[]> => super.delegate('query', 'tasks', args, {}, info),
    services: (args, info): Promise<Service[]> => super.delegate('query', 'services', args, {}, info),
    workflowConstants: (args, info): Promise<WorkflowConstant[]> => super.delegate('query', 'workflowConstants', args, {}, info),
    workflowSources: (args, info): Promise<WorkflowSource[]> => super.delegate('query', 'workflowSources', args, {}, info),
    workflowTasks: (args, info): Promise<WorkflowTask[]> => super.delegate('query', 'workflowTasks', args, {}, info),
    workflowResults: (args, info): Promise<WorkflowResult[]> => super.delegate('query', 'workflowResults', args, {}, info),
    workflows: (args, info): Promise<Workflow[]> => super.delegate('query', 'workflows', args, {}, info),
    workflowExecutions: (args, info): Promise<WorkflowExecution[]> => super.delegate('query', 'workflowExecutions', args, {}, info),
    workflowTaskExecutions: (args, info): Promise<WorkflowTaskExecution[]> => super.delegate('query', 'workflowTaskExecutions', args, {}, info),
    runner: (args, info): Promise<Runner | null> => super.delegate('query', 'runner', args, {}, info),
    parameter: (args, info): Promise<Parameter | null> => super.delegate('query', 'parameter', args, {}, info),
    filterDefinition: (args, info): Promise<FilterDefinition | null> => super.delegate('query', 'filterDefinition', args, {}, info),
    event: (args, info): Promise<Event | null> => super.delegate('query', 'event', args, {}, info),
    task: (args, info): Promise<Task | null> => super.delegate('query', 'task', args, {}, info),
    service: (args, info): Promise<Service | null> => super.delegate('query', 'service', args, {}, info),
    workflowConstant: (args, info): Promise<WorkflowConstant | null> => super.delegate('query', 'workflowConstant', args, {}, info),
    workflowSource: (args, info): Promise<WorkflowSource | null> => super.delegate('query', 'workflowSource', args, {}, info),
    workflowTask: (args, info): Promise<WorkflowTask | null> => super.delegate('query', 'workflowTask', args, {}, info),
    workflowResult: (args, info): Promise<WorkflowResult | null> => super.delegate('query', 'workflowResult', args, {}, info),
    workflow: (args, info): Promise<Workflow | null> => super.delegate('query', 'workflow', args, {}, info),
    workflowExecution: (args, info): Promise<WorkflowExecution | null> => super.delegate('query', 'workflowExecution', args, {}, info),
    workflowTaskExecution: (args, info): Promise<WorkflowTaskExecution | null> => super.delegate('query', 'workflowTaskExecution', args, {}, info),
    runnersConnection: (args, info): Promise<RunnerConnection> => super.delegate('query', 'runnersConnection', args, {}, info),
    parametersConnection: (args, info): Promise<ParameterConnection> => super.delegate('query', 'parametersConnection', args, {}, info),
    filterDefinitionsConnection: (args, info): Promise<FilterDefinitionConnection> => super.delegate('query', 'filterDefinitionsConnection', args, {}, info),
    eventsConnection: (args, info): Promise<EventConnection> => super.delegate('query', 'eventsConnection', args, {}, info),
    tasksConnection: (args, info): Promise<TaskConnection> => super.delegate('query', 'tasksConnection', args, {}, info),
    servicesConnection: (args, info): Promise<ServiceConnection> => super.delegate('query', 'servicesConnection', args, {}, info),
    workflowConstantsConnection: (args, info): Promise<WorkflowConstantConnection> => super.delegate('query', 'workflowConstantsConnection', args, {}, info),
    workflowSourcesConnection: (args, info): Promise<WorkflowSourceConnection> => super.delegate('query', 'workflowSourcesConnection', args, {}, info),
    workflowTasksConnection: (args, info): Promise<WorkflowTaskConnection> => super.delegate('query', 'workflowTasksConnection', args, {}, info),
    workflowResultsConnection: (args, info): Promise<WorkflowResultConnection> => super.delegate('query', 'workflowResultsConnection', args, {}, info),
    workflowsConnection: (args, info): Promise<WorkflowConnection> => super.delegate('query', 'workflowsConnection', args, {}, info),
    workflowExecutionsConnection: (args, info): Promise<WorkflowExecutionConnection> => super.delegate('query', 'workflowExecutionsConnection', args, {}, info),
    workflowTaskExecutionsConnection: (args, info): Promise<WorkflowTaskExecutionConnection> => super.delegate('query', 'workflowTaskExecutionsConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createRunner: (args, info): Promise<Runner> => super.delegate('mutation', 'createRunner', args, {}, info),
    createParameter: (args, info): Promise<Parameter> => super.delegate('mutation', 'createParameter', args, {}, info),
    createFilterDefinition: (args, info): Promise<FilterDefinition> => super.delegate('mutation', 'createFilterDefinition', args, {}, info),
    createEvent: (args, info): Promise<Event> => super.delegate('mutation', 'createEvent', args, {}, info),
    createTask: (args, info): Promise<Task> => super.delegate('mutation', 'createTask', args, {}, info),
    createService: (args, info): Promise<Service> => super.delegate('mutation', 'createService', args, {}, info),
    createWorkflowConstant: (args, info): Promise<WorkflowConstant> => super.delegate('mutation', 'createWorkflowConstant', args, {}, info),
    createWorkflowSource: (args, info): Promise<WorkflowSource> => super.delegate('mutation', 'createWorkflowSource', args, {}, info),
    createWorkflowTask: (args, info): Promise<WorkflowTask> => super.delegate('mutation', 'createWorkflowTask', args, {}, info),
    createWorkflowResult: (args, info): Promise<WorkflowResult> => super.delegate('mutation', 'createWorkflowResult', args, {}, info),
    createWorkflow: (args, info): Promise<Workflow> => super.delegate('mutation', 'createWorkflow', args, {}, info),
    createWorkflowExecution: (args, info): Promise<WorkflowExecution> => super.delegate('mutation', 'createWorkflowExecution', args, {}, info),
    createWorkflowTaskExecution: (args, info): Promise<WorkflowTaskExecution> => super.delegate('mutation', 'createWorkflowTaskExecution', args, {}, info),
    updateRunner: (args, info): Promise<Runner | null> => super.delegate('mutation', 'updateRunner', args, {}, info),
    updateParameter: (args, info): Promise<Parameter | null> => super.delegate('mutation', 'updateParameter', args, {}, info),
    updateFilterDefinition: (args, info): Promise<FilterDefinition | null> => super.delegate('mutation', 'updateFilterDefinition', args, {}, info),
    updateEvent: (args, info): Promise<Event | null> => super.delegate('mutation', 'updateEvent', args, {}, info),
    updateTask: (args, info): Promise<Task | null> => super.delegate('mutation', 'updateTask', args, {}, info),
    updateService: (args, info): Promise<Service | null> => super.delegate('mutation', 'updateService', args, {}, info),
    updateWorkflowConstant: (args, info): Promise<WorkflowConstant | null> => super.delegate('mutation', 'updateWorkflowConstant', args, {}, info),
    updateWorkflowSource: (args, info): Promise<WorkflowSource | null> => super.delegate('mutation', 'updateWorkflowSource', args, {}, info),
    updateWorkflowTask: (args, info): Promise<WorkflowTask | null> => super.delegate('mutation', 'updateWorkflowTask', args, {}, info),
    updateWorkflowResult: (args, info): Promise<WorkflowResult | null> => super.delegate('mutation', 'updateWorkflowResult', args, {}, info),
    updateWorkflow: (args, info): Promise<Workflow | null> => super.delegate('mutation', 'updateWorkflow', args, {}, info),
    updateWorkflowExecution: (args, info): Promise<WorkflowExecution | null> => super.delegate('mutation', 'updateWorkflowExecution', args, {}, info),
    updateWorkflowTaskExecution: (args, info): Promise<WorkflowTaskExecution | null> => super.delegate('mutation', 'updateWorkflowTaskExecution', args, {}, info),
    deleteRunner: (args, info): Promise<Runner | null> => super.delegate('mutation', 'deleteRunner', args, {}, info),
    deleteParameter: (args, info): Promise<Parameter | null> => super.delegate('mutation', 'deleteParameter', args, {}, info),
    deleteFilterDefinition: (args, info): Promise<FilterDefinition | null> => super.delegate('mutation', 'deleteFilterDefinition', args, {}, info),
    deleteEvent: (args, info): Promise<Event | null> => super.delegate('mutation', 'deleteEvent', args, {}, info),
    deleteTask: (args, info): Promise<Task | null> => super.delegate('mutation', 'deleteTask', args, {}, info),
    deleteService: (args, info): Promise<Service | null> => super.delegate('mutation', 'deleteService', args, {}, info),
    deleteWorkflowConstant: (args, info): Promise<WorkflowConstant | null> => super.delegate('mutation', 'deleteWorkflowConstant', args, {}, info),
    deleteWorkflowSource: (args, info): Promise<WorkflowSource | null> => super.delegate('mutation', 'deleteWorkflowSource', args, {}, info),
    deleteWorkflowTask: (args, info): Promise<WorkflowTask | null> => super.delegate('mutation', 'deleteWorkflowTask', args, {}, info),
    deleteWorkflowResult: (args, info): Promise<WorkflowResult | null> => super.delegate('mutation', 'deleteWorkflowResult', args, {}, info),
    deleteWorkflow: (args, info): Promise<Workflow | null> => super.delegate('mutation', 'deleteWorkflow', args, {}, info),
    deleteWorkflowExecution: (args, info): Promise<WorkflowExecution | null> => super.delegate('mutation', 'deleteWorkflowExecution', args, {}, info),
    deleteWorkflowTaskExecution: (args, info): Promise<WorkflowTaskExecution | null> => super.delegate('mutation', 'deleteWorkflowTaskExecution', args, {}, info),
    upsertRunner: (args, info): Promise<Runner> => super.delegate('mutation', 'upsertRunner', args, {}, info),
    upsertParameter: (args, info): Promise<Parameter> => super.delegate('mutation', 'upsertParameter', args, {}, info),
    upsertFilterDefinition: (args, info): Promise<FilterDefinition> => super.delegate('mutation', 'upsertFilterDefinition', args, {}, info),
    upsertEvent: (args, info): Promise<Event> => super.delegate('mutation', 'upsertEvent', args, {}, info),
    upsertTask: (args, info): Promise<Task> => super.delegate('mutation', 'upsertTask', args, {}, info),
    upsertService: (args, info): Promise<Service> => super.delegate('mutation', 'upsertService', args, {}, info),
    upsertWorkflowConstant: (args, info): Promise<WorkflowConstant> => super.delegate('mutation', 'upsertWorkflowConstant', args, {}, info),
    upsertWorkflowSource: (args, info): Promise<WorkflowSource> => super.delegate('mutation', 'upsertWorkflowSource', args, {}, info),
    upsertWorkflowTask: (args, info): Promise<WorkflowTask> => super.delegate('mutation', 'upsertWorkflowTask', args, {}, info),
    upsertWorkflowResult: (args, info): Promise<WorkflowResult> => super.delegate('mutation', 'upsertWorkflowResult', args, {}, info),
    upsertWorkflow: (args, info): Promise<Workflow> => super.delegate('mutation', 'upsertWorkflow', args, {}, info),
    upsertWorkflowExecution: (args, info): Promise<WorkflowExecution> => super.delegate('mutation', 'upsertWorkflowExecution', args, {}, info),
    upsertWorkflowTaskExecution: (args, info): Promise<WorkflowTaskExecution> => super.delegate('mutation', 'upsertWorkflowTaskExecution', args, {}, info),
    updateManyRunners: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyRunners', args, {}, info),
    updateManyParameters: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyParameters', args, {}, info),
    updateManyFilterDefinitions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyFilterDefinitions', args, {}, info),
    updateManyEvents: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyEvents', args, {}, info),
    updateManyTasks: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyTasks', args, {}, info),
    updateManyServices: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyServices', args, {}, info),
    updateManyWorkflowConstants: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflowConstants', args, {}, info),
    updateManyWorkflowSources: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflowSources', args, {}, info),
    updateManyWorkflowTasks: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflowTasks', args, {}, info),
    updateManyWorkflowResults: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflowResults', args, {}, info),
    updateManyWorkflows: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflows', args, {}, info),
    updateManyWorkflowExecutions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflowExecutions', args, {}, info),
    updateManyWorkflowTaskExecutions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorkflowTaskExecutions', args, {}, info),
    deleteManyRunners: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyRunners', args, {}, info),
    deleteManyParameters: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyParameters', args, {}, info),
    deleteManyFilterDefinitions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyFilterDefinitions', args, {}, info),
    deleteManyEvents: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyEvents', args, {}, info),
    deleteManyTasks: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyTasks', args, {}, info),
    deleteManyServices: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyServices', args, {}, info),
    deleteManyWorkflowConstants: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflowConstants', args, {}, info),
    deleteManyWorkflowSources: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflowSources', args, {}, info),
    deleteManyWorkflowTasks: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflowTasks', args, {}, info),
    deleteManyWorkflowResults: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflowResults', args, {}, info),
    deleteManyWorkflows: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflows', args, {}, info),
    deleteManyWorkflowExecutions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflowExecutions', args, {}, info),
    deleteManyWorkflowTaskExecutions: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorkflowTaskExecutions', args, {}, info)
  }

  subscription: Subscription = {
    runner: (args, infoOrQuery): Promise<AsyncIterator<RunnerSubscriptionPayload>> => super.delegateSubscription('runner', args, {}, infoOrQuery),
    parameter: (args, infoOrQuery): Promise<AsyncIterator<ParameterSubscriptionPayload>> => super.delegateSubscription('parameter', args, {}, infoOrQuery),
    filterDefinition: (args, infoOrQuery): Promise<AsyncIterator<FilterDefinitionSubscriptionPayload>> => super.delegateSubscription('filterDefinition', args, {}, infoOrQuery),
    event: (args, infoOrQuery): Promise<AsyncIterator<EventSubscriptionPayload>> => super.delegateSubscription('event', args, {}, infoOrQuery),
    task: (args, infoOrQuery): Promise<AsyncIterator<TaskSubscriptionPayload>> => super.delegateSubscription('task', args, {}, infoOrQuery),
    service: (args, infoOrQuery): Promise<AsyncIterator<ServiceSubscriptionPayload>> => super.delegateSubscription('service', args, {}, infoOrQuery),
    workflowConstant: (args, infoOrQuery): Promise<AsyncIterator<WorkflowConstantSubscriptionPayload>> => super.delegateSubscription('workflowConstant', args, {}, infoOrQuery),
    workflowSource: (args, infoOrQuery): Promise<AsyncIterator<WorkflowSourceSubscriptionPayload>> => super.delegateSubscription('workflowSource', args, {}, infoOrQuery),
    workflowTask: (args, infoOrQuery): Promise<AsyncIterator<WorkflowTaskSubscriptionPayload>> => super.delegateSubscription('workflowTask', args, {}, infoOrQuery),
    workflowResult: (args, infoOrQuery): Promise<AsyncIterator<WorkflowResultSubscriptionPayload>> => super.delegateSubscription('workflowResult', args, {}, infoOrQuery),
    workflow: (args, infoOrQuery): Promise<AsyncIterator<WorkflowSubscriptionPayload>> => super.delegateSubscription('workflow', args, {}, infoOrQuery),
    workflowExecution: (args, infoOrQuery): Promise<AsyncIterator<WorkflowExecutionSubscriptionPayload>> => super.delegateSubscription('workflowExecution', args, {}, infoOrQuery),
    workflowTaskExecution: (args, infoOrQuery): Promise<AsyncIterator<WorkflowTaskExecutionSubscriptionPayload>> => super.delegateSubscription('workflowTaskExecution', args, {}, infoOrQuery)
  }
}