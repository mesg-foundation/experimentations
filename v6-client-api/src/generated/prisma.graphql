# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Event implements Node {
  id: ID!
  title: String!
  description: String
  data(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parameter!]
  service(where: ServiceWhereInput): Service!
}

type FilterDefinition implements Node {
  id: ID!
  parameter(where: ParameterWhereInput): Parameter!
  predicate: PREDICATE!
  value: String!
}

type Parameter implements Node {
  id: ID!
  title: String!
  description: String
  type: TYPE!
  required: Boolean
}

type Runner implements Node {
  id: ID!
  publicKey: String!
  stake: Float!
  reliability: Float!
  sourceWhitelisted(where: WorkflowSourceWhereInput, orderBy: WorkflowSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowSource!]
  sourceBlacklisted(where: WorkflowSourceWhereInput, orderBy: WorkflowSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowSource!]
  taskWhitelisted(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTask!]
  taskBlacklisted(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTask!]
}

type Service implements Node {
  id: ID!
  title: String!
  description: String
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
}

type Task implements Node {
  id: ID!
  title: String!
  description: String
  arguments(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parameter!]
  service(where: ServiceWhereInput): Service!
}

type Workflow implements Node {
  id: ID!
  title: String!
  description: String
  source(where: WorkflowSourceWhereInput): WorkflowSource!
  tasks(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTask!]
  executions(where: WorkflowExecutionWhereInput, orderBy: WorkflowExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowExecution!]
}

type WorkflowConstant implements Node {
  id: ID!
  value: String!
}

type WorkflowExecution implements Node {
  id: ID!
  duration: Int!
  fee: Int!
  taskExecutions(where: WorkflowTaskExecutionWhereInput, orderBy: WorkflowTaskExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTaskExecution!]
}

type WorkflowResult implements Node {
  id: ID!
  reference(where: ParameterWhereInput): Parameter!
  value: String!
}

type WorkflowSource implements Node {
  id: ID!
  whitelist(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner!]
  blacklist(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner!]
  event(where: EventWhereInput): Event!
  filters(where: FilterDefinitionWhereInput, orderBy: FilterDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FilterDefinition!]
}

type WorkflowTask implements Node {
  id: ID!
  whitelist(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner!]
  blacklist(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner!]
  task(where: TaskWhereInput): Task!
  parameters(where: WorkflowResultWhereInput, orderBy: WorkflowResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowResult!]
  parents(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTask!]
  children(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTask!]
}

type WorkflowTaskExecution implements Node {
  id: ID!
  duration: Int!
  fee: Int!
  results(where: WorkflowResultWhereInput, orderBy: WorkflowResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowResult!]
}


#
# Other Types
#

type AggregateEvent {
  count: Int!
}

type AggregateFilterDefinition {
  count: Int!
}

type AggregateParameter {
  count: Int!
}

type AggregateRunner {
  count: Int!
}

type AggregateService {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateWorkflow {
  count: Int!
}

type AggregateWorkflowConstant {
  count: Int!
}

type AggregateWorkflowExecution {
  count: Int!
}

type AggregateWorkflowResult {
  count: Int!
}

type AggregateWorkflowSource {
  count: Int!
}

type AggregateWorkflowTask {
  count: Int!
}

type AggregateWorkflowTaskExecution {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  title: String!
  description: String
  data: ParameterCreateManyInput
  service: ServiceCreateOneWithoutEventsInput!
}

input EventCreateManyWithoutServiceInput {
  create: [EventCreateWithoutServiceInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateOneInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutServiceInput {
  title: String!
  description: String
  data: ParameterCreateManyInput
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  description: String
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  title: String
  description: String
  data: ParameterUpdateManyInput
  service: ServiceUpdateOneWithoutEventsInput
}

input EventUpdateManyWithoutServiceInput {
  create: [EventCreateWithoutServiceInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithoutServiceInput!]
  upsert: [EventUpsertWithoutServiceInput!]
}

input EventUpdateOneInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: EventWhereUniqueInput
  delete: EventWhereUniqueInput
}

input EventUpdateWithoutServiceDataInput {
  title: String
  description: String
  data: ParameterUpdateManyInput
}

input EventUpdateWithoutServiceInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutServiceDataInput!
}

input EventUpsertWithoutServiceInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutServiceDataInput!
  create: EventCreateWithoutServiceInput!
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  data_every: ParameterWhereInput
  data_some: ParameterWhereInput
  data_none: ParameterWhereInput
  service: ServiceWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type FilterDefinitionConnection {
  pageInfo: PageInfo!
  edges: [FilterDefinitionEdge]!
  aggregate: AggregateFilterDefinition!
}

input FilterDefinitionCreateInput {
  predicate: PREDICATE
  value: String!
  parameter: ParameterCreateOneInput!
}

input FilterDefinitionCreateManyInput {
  create: [FilterDefinitionCreateInput!]
  connect: [FilterDefinitionWhereUniqueInput!]
}

type FilterDefinitionEdge {
  node: FilterDefinition!
  cursor: String!
}

enum FilterDefinitionOrderByInput {
  id_ASC
  id_DESC
  predicate_ASC
  predicate_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FilterDefinitionPreviousValues {
  id: ID!
  predicate: PREDICATE!
  value: String!
}

type FilterDefinitionSubscriptionPayload {
  mutation: MutationType!
  node: FilterDefinition
  updatedFields: [String!]
  previousValues: FilterDefinitionPreviousValues
}

input FilterDefinitionSubscriptionWhereInput {
  AND: [FilterDefinitionSubscriptionWhereInput!]
  OR: [FilterDefinitionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FilterDefinitionWhereInput
}

input FilterDefinitionUpdateInput {
  predicate: PREDICATE
  value: String
  parameter: ParameterUpdateOneInput
}

input FilterDefinitionUpdateManyInput {
  create: [FilterDefinitionCreateInput!]
  connect: [FilterDefinitionWhereUniqueInput!]
  disconnect: [FilterDefinitionWhereUniqueInput!]
  delete: [FilterDefinitionWhereUniqueInput!]
}

input FilterDefinitionWhereInput {
  AND: [FilterDefinitionWhereInput!]
  OR: [FilterDefinitionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  predicate: PREDICATE
  predicate_not: PREDICATE
  predicate_in: [PREDICATE!]
  predicate_not_in: [PREDICATE!]
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  parameter: ParameterWhereInput
}

input FilterDefinitionWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createRunner(data: RunnerCreateInput!): Runner!
  createParameter(data: ParameterCreateInput!): Parameter!
  createFilterDefinition(data: FilterDefinitionCreateInput!): FilterDefinition!
  createEvent(data: EventCreateInput!): Event!
  createTask(data: TaskCreateInput!): Task!
  createService(data: ServiceCreateInput!): Service!
  createWorkflowConstant(data: WorkflowConstantCreateInput!): WorkflowConstant!
  createWorkflowSource(data: WorkflowSourceCreateInput!): WorkflowSource!
  createWorkflowTask(data: WorkflowTaskCreateInput!): WorkflowTask!
  createWorkflowResult(data: WorkflowResultCreateInput!): WorkflowResult!
  createWorkflow(data: WorkflowCreateInput!): Workflow!
  createWorkflowExecution(data: WorkflowExecutionCreateInput!): WorkflowExecution!
  createWorkflowTaskExecution(data: WorkflowTaskExecutionCreateInput!): WorkflowTaskExecution!
  updateRunner(data: RunnerUpdateInput!, where: RunnerWhereUniqueInput!): Runner
  updateParameter(data: ParameterUpdateInput!, where: ParameterWhereUniqueInput!): Parameter
  updateFilterDefinition(data: FilterDefinitionUpdateInput!, where: FilterDefinitionWhereUniqueInput!): FilterDefinition
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service
  updateWorkflowConstant(data: WorkflowConstantUpdateInput!, where: WorkflowConstantWhereUniqueInput!): WorkflowConstant
  updateWorkflowSource(data: WorkflowSourceUpdateInput!, where: WorkflowSourceWhereUniqueInput!): WorkflowSource
  updateWorkflowTask(data: WorkflowTaskUpdateInput!, where: WorkflowTaskWhereUniqueInput!): WorkflowTask
  updateWorkflowResult(data: WorkflowResultUpdateInput!, where: WorkflowResultWhereUniqueInput!): WorkflowResult
  updateWorkflow(data: WorkflowUpdateInput!, where: WorkflowWhereUniqueInput!): Workflow
  updateWorkflowExecution(data: WorkflowExecutionUpdateInput!, where: WorkflowExecutionWhereUniqueInput!): WorkflowExecution
  updateWorkflowTaskExecution(data: WorkflowTaskExecutionUpdateInput!, where: WorkflowTaskExecutionWhereUniqueInput!): WorkflowTaskExecution
  deleteRunner(where: RunnerWhereUniqueInput!): Runner
  deleteParameter(where: ParameterWhereUniqueInput!): Parameter
  deleteFilterDefinition(where: FilterDefinitionWhereUniqueInput!): FilterDefinition
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteWorkflowConstant(where: WorkflowConstantWhereUniqueInput!): WorkflowConstant
  deleteWorkflowSource(where: WorkflowSourceWhereUniqueInput!): WorkflowSource
  deleteWorkflowTask(where: WorkflowTaskWhereUniqueInput!): WorkflowTask
  deleteWorkflowResult(where: WorkflowResultWhereUniqueInput!): WorkflowResult
  deleteWorkflow(where: WorkflowWhereUniqueInput!): Workflow
  deleteWorkflowExecution(where: WorkflowExecutionWhereUniqueInput!): WorkflowExecution
  deleteWorkflowTaskExecution(where: WorkflowTaskExecutionWhereUniqueInput!): WorkflowTaskExecution
  upsertRunner(where: RunnerWhereUniqueInput!, create: RunnerCreateInput!, update: RunnerUpdateInput!): Runner!
  upsertParameter(where: ParameterWhereUniqueInput!, create: ParameterCreateInput!, update: ParameterUpdateInput!): Parameter!
  upsertFilterDefinition(where: FilterDefinitionWhereUniqueInput!, create: FilterDefinitionCreateInput!, update: FilterDefinitionUpdateInput!): FilterDefinition!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertTask(where: TaskWhereUniqueInput!, create: TaskCreateInput!, update: TaskUpdateInput!): Task!
  upsertService(where: ServiceWhereUniqueInput!, create: ServiceCreateInput!, update: ServiceUpdateInput!): Service!
  upsertWorkflowConstant(where: WorkflowConstantWhereUniqueInput!, create: WorkflowConstantCreateInput!, update: WorkflowConstantUpdateInput!): WorkflowConstant!
  upsertWorkflowSource(where: WorkflowSourceWhereUniqueInput!, create: WorkflowSourceCreateInput!, update: WorkflowSourceUpdateInput!): WorkflowSource!
  upsertWorkflowTask(where: WorkflowTaskWhereUniqueInput!, create: WorkflowTaskCreateInput!, update: WorkflowTaskUpdateInput!): WorkflowTask!
  upsertWorkflowResult(where: WorkflowResultWhereUniqueInput!, create: WorkflowResultCreateInput!, update: WorkflowResultUpdateInput!): WorkflowResult!
  upsertWorkflow(where: WorkflowWhereUniqueInput!, create: WorkflowCreateInput!, update: WorkflowUpdateInput!): Workflow!
  upsertWorkflowExecution(where: WorkflowExecutionWhereUniqueInput!, create: WorkflowExecutionCreateInput!, update: WorkflowExecutionUpdateInput!): WorkflowExecution!
  upsertWorkflowTaskExecution(where: WorkflowTaskExecutionWhereUniqueInput!, create: WorkflowTaskExecutionCreateInput!, update: WorkflowTaskExecutionUpdateInput!): WorkflowTaskExecution!
  updateManyRunners(data: RunnerUpdateInput!, where: RunnerWhereInput!): BatchPayload!
  updateManyParameters(data: ParameterUpdateInput!, where: ParameterWhereInput!): BatchPayload!
  updateManyFilterDefinitions(data: FilterDefinitionUpdateInput!, where: FilterDefinitionWhereInput!): BatchPayload!
  updateManyEvents(data: EventUpdateInput!, where: EventWhereInput!): BatchPayload!
  updateManyTasks(data: TaskUpdateInput!, where: TaskWhereInput!): BatchPayload!
  updateManyServices(data: ServiceUpdateInput!, where: ServiceWhereInput!): BatchPayload!
  updateManyWorkflowConstants(data: WorkflowConstantUpdateInput!, where: WorkflowConstantWhereInput!): BatchPayload!
  updateManyWorkflowSources(data: WorkflowSourceUpdateInput!, where: WorkflowSourceWhereInput!): BatchPayload!
  updateManyWorkflowTasks(data: WorkflowTaskUpdateInput!, where: WorkflowTaskWhereInput!): BatchPayload!
  updateManyWorkflowResults(data: WorkflowResultUpdateInput!, where: WorkflowResultWhereInput!): BatchPayload!
  updateManyWorkflows(data: WorkflowUpdateInput!, where: WorkflowWhereInput!): BatchPayload!
  updateManyWorkflowExecutions(data: WorkflowExecutionUpdateInput!, where: WorkflowExecutionWhereInput!): BatchPayload!
  updateManyWorkflowTaskExecutions(data: WorkflowTaskExecutionUpdateInput!, where: WorkflowTaskExecutionWhereInput!): BatchPayload!
  deleteManyRunners(where: RunnerWhereInput!): BatchPayload!
  deleteManyParameters(where: ParameterWhereInput!): BatchPayload!
  deleteManyFilterDefinitions(where: FilterDefinitionWhereInput!): BatchPayload!
  deleteManyEvents(where: EventWhereInput!): BatchPayload!
  deleteManyTasks(where: TaskWhereInput!): BatchPayload!
  deleteManyServices(where: ServiceWhereInput!): BatchPayload!
  deleteManyWorkflowConstants(where: WorkflowConstantWhereInput!): BatchPayload!
  deleteManyWorkflowSources(where: WorkflowSourceWhereInput!): BatchPayload!
  deleteManyWorkflowTasks(where: WorkflowTaskWhereInput!): BatchPayload!
  deleteManyWorkflowResults(where: WorkflowResultWhereInput!): BatchPayload!
  deleteManyWorkflows(where: WorkflowWhereInput!): BatchPayload!
  deleteManyWorkflowExecutions(where: WorkflowExecutionWhereInput!): BatchPayload!
  deleteManyWorkflowTaskExecutions(where: WorkflowTaskExecutionWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ParameterConnection {
  pageInfo: PageInfo!
  edges: [ParameterEdge]!
  aggregate: AggregateParameter!
}

input ParameterCreateInput {
  title: String!
  description: String
  type: TYPE
  required: Boolean
}

input ParameterCreateManyInput {
  create: [ParameterCreateInput!]
  connect: [ParameterWhereUniqueInput!]
}

input ParameterCreateOneInput {
  create: ParameterCreateInput
  connect: ParameterWhereUniqueInput
}

type ParameterEdge {
  node: Parameter!
  cursor: String!
}

enum ParameterOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  required_ASC
  required_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ParameterPreviousValues {
  id: ID!
  title: String!
  description: String
  type: TYPE!
  required: Boolean
}

type ParameterSubscriptionPayload {
  mutation: MutationType!
  node: Parameter
  updatedFields: [String!]
  previousValues: ParameterPreviousValues
}

input ParameterSubscriptionWhereInput {
  AND: [ParameterSubscriptionWhereInput!]
  OR: [ParameterSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ParameterWhereInput
}

input ParameterUpdateInput {
  title: String
  description: String
  type: TYPE
  required: Boolean
}

input ParameterUpdateManyInput {
  create: [ParameterCreateInput!]
  connect: [ParameterWhereUniqueInput!]
  disconnect: [ParameterWhereUniqueInput!]
  delete: [ParameterWhereUniqueInput!]
}

input ParameterUpdateOneInput {
  create: ParameterCreateInput
  connect: ParameterWhereUniqueInput
  disconnect: ParameterWhereUniqueInput
  delete: ParameterWhereUniqueInput
}

input ParameterWhereInput {
  AND: [ParameterWhereInput!]
  OR: [ParameterWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  type: TYPE
  type_not: TYPE
  type_in: [TYPE!]
  type_not_in: [TYPE!]
  required: Boolean
  required_not: Boolean
}

input ParameterWhereUniqueInput {
  id: ID
}

enum PREDICATE {
  EQ
  NEQ
  GT
  GTEQ
  LT
  LTEQ
  MATCHES
  DOES_NOT_MATCH
  START
  NOT_START
  END
  NOT_END
  IN
  NOT_IN
  CONT
  NOT_CONT
}

type Query {
  runners(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Runner]!
  parameters(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parameter]!
  filterDefinitions(where: FilterDefinitionWhereInput, orderBy: FilterDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FilterDefinition]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task]!
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service]!
  workflowConstants(where: WorkflowConstantWhereInput, orderBy: WorkflowConstantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowConstant]!
  workflowSources(where: WorkflowSourceWhereInput, orderBy: WorkflowSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowSource]!
  workflowTasks(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTask]!
  workflowResults(where: WorkflowResultWhereInput, orderBy: WorkflowResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowResult]!
  workflows(where: WorkflowWhereInput, orderBy: WorkflowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workflow]!
  workflowExecutions(where: WorkflowExecutionWhereInput, orderBy: WorkflowExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowExecution]!
  workflowTaskExecutions(where: WorkflowTaskExecutionWhereInput, orderBy: WorkflowTaskExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkflowTaskExecution]!
  runner(where: RunnerWhereUniqueInput!): Runner
  parameter(where: ParameterWhereUniqueInput!): Parameter
  filterDefinition(where: FilterDefinitionWhereUniqueInput!): FilterDefinition
  event(where: EventWhereUniqueInput!): Event
  task(where: TaskWhereUniqueInput!): Task
  service(where: ServiceWhereUniqueInput!): Service
  workflowConstant(where: WorkflowConstantWhereUniqueInput!): WorkflowConstant
  workflowSource(where: WorkflowSourceWhereUniqueInput!): WorkflowSource
  workflowTask(where: WorkflowTaskWhereUniqueInput!): WorkflowTask
  workflowResult(where: WorkflowResultWhereUniqueInput!): WorkflowResult
  workflow(where: WorkflowWhereUniqueInput!): Workflow
  workflowExecution(where: WorkflowExecutionWhereUniqueInput!): WorkflowExecution
  workflowTaskExecution(where: WorkflowTaskExecutionWhereUniqueInput!): WorkflowTaskExecution
  runnersConnection(where: RunnerWhereInput, orderBy: RunnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RunnerConnection!
  parametersConnection(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ParameterConnection!
  filterDefinitionsConnection(where: FilterDefinitionWhereInput, orderBy: FilterDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FilterDefinitionConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  tasksConnection(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskConnection!
  servicesConnection(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceConnection!
  workflowConstantsConnection(where: WorkflowConstantWhereInput, orderBy: WorkflowConstantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowConstantConnection!
  workflowSourcesConnection(where: WorkflowSourceWhereInput, orderBy: WorkflowSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowSourceConnection!
  workflowTasksConnection(where: WorkflowTaskWhereInput, orderBy: WorkflowTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowTaskConnection!
  workflowResultsConnection(where: WorkflowResultWhereInput, orderBy: WorkflowResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowResultConnection!
  workflowsConnection(where: WorkflowWhereInput, orderBy: WorkflowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowConnection!
  workflowExecutionsConnection(where: WorkflowExecutionWhereInput, orderBy: WorkflowExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowExecutionConnection!
  workflowTaskExecutionsConnection(where: WorkflowTaskExecutionWhereInput, orderBy: WorkflowTaskExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkflowTaskExecutionConnection!
  node(id: ID!): Node
}

type RunnerConnection {
  pageInfo: PageInfo!
  edges: [RunnerEdge]!
  aggregate: AggregateRunner!
}

input RunnerCreateInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceCreateManyWithoutBlacklistInput
  taskWhitelisted: WorkflowTaskCreateManyWithoutWhitelistInput
  taskBlacklisted: WorkflowTaskCreateManyWithoutBlacklistInput
}

input RunnerCreateManyWithoutSourceBlacklistedInput {
  create: [RunnerCreateWithoutSourceBlacklistedInput!]
  connect: [RunnerWhereUniqueInput!]
}

input RunnerCreateManyWithoutSourceWhitelistedInput {
  create: [RunnerCreateWithoutSourceWhitelistedInput!]
  connect: [RunnerWhereUniqueInput!]
}

input RunnerCreateManyWithoutTaskBlacklistedInput {
  create: [RunnerCreateWithoutTaskBlacklistedInput!]
  connect: [RunnerWhereUniqueInput!]
}

input RunnerCreateManyWithoutTaskWhitelistedInput {
  create: [RunnerCreateWithoutTaskWhitelistedInput!]
  connect: [RunnerWhereUniqueInput!]
}

input RunnerCreateWithoutSourceBlacklistedInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceCreateManyWithoutWhitelistInput
  taskWhitelisted: WorkflowTaskCreateManyWithoutWhitelistInput
  taskBlacklisted: WorkflowTaskCreateManyWithoutBlacklistInput
}

input RunnerCreateWithoutSourceWhitelistedInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceBlacklisted: WorkflowSourceCreateManyWithoutBlacklistInput
  taskWhitelisted: WorkflowTaskCreateManyWithoutWhitelistInput
  taskBlacklisted: WorkflowTaskCreateManyWithoutBlacklistInput
}

input RunnerCreateWithoutTaskBlacklistedInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceCreateManyWithoutBlacklistInput
  taskWhitelisted: WorkflowTaskCreateManyWithoutWhitelistInput
}

input RunnerCreateWithoutTaskWhitelistedInput {
  publicKey: String!
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceCreateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceCreateManyWithoutBlacklistInput
  taskBlacklisted: WorkflowTaskCreateManyWithoutBlacklistInput
}

type RunnerEdge {
  node: Runner!
  cursor: String!
}

enum RunnerOrderByInput {
  id_ASC
  id_DESC
  publicKey_ASC
  publicKey_DESC
  stake_ASC
  stake_DESC
  reliability_ASC
  reliability_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RunnerPreviousValues {
  id: ID!
  publicKey: String!
  stake: Float!
  reliability: Float!
}

type RunnerSubscriptionPayload {
  mutation: MutationType!
  node: Runner
  updatedFields: [String!]
  previousValues: RunnerPreviousValues
}

input RunnerSubscriptionWhereInput {
  AND: [RunnerSubscriptionWhereInput!]
  OR: [RunnerSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RunnerWhereInput
}

input RunnerUpdateInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceUpdateManyWithoutBlacklistInput
  taskWhitelisted: WorkflowTaskUpdateManyWithoutWhitelistInput
  taskBlacklisted: WorkflowTaskUpdateManyWithoutBlacklistInput
}

input RunnerUpdateManyWithoutSourceBlacklistedInput {
  create: [RunnerCreateWithoutSourceBlacklistedInput!]
  connect: [RunnerWhereUniqueInput!]
  disconnect: [RunnerWhereUniqueInput!]
  delete: [RunnerWhereUniqueInput!]
  update: [RunnerUpdateWithoutSourceBlacklistedInput!]
  upsert: [RunnerUpsertWithoutSourceBlacklistedInput!]
}

input RunnerUpdateManyWithoutSourceWhitelistedInput {
  create: [RunnerCreateWithoutSourceWhitelistedInput!]
  connect: [RunnerWhereUniqueInput!]
  disconnect: [RunnerWhereUniqueInput!]
  delete: [RunnerWhereUniqueInput!]
  update: [RunnerUpdateWithoutSourceWhitelistedInput!]
  upsert: [RunnerUpsertWithoutSourceWhitelistedInput!]
}

input RunnerUpdateManyWithoutTaskBlacklistedInput {
  create: [RunnerCreateWithoutTaskBlacklistedInput!]
  connect: [RunnerWhereUniqueInput!]
  disconnect: [RunnerWhereUniqueInput!]
  delete: [RunnerWhereUniqueInput!]
  update: [RunnerUpdateWithoutTaskBlacklistedInput!]
  upsert: [RunnerUpsertWithoutTaskBlacklistedInput!]
}

input RunnerUpdateManyWithoutTaskWhitelistedInput {
  create: [RunnerCreateWithoutTaskWhitelistedInput!]
  connect: [RunnerWhereUniqueInput!]
  disconnect: [RunnerWhereUniqueInput!]
  delete: [RunnerWhereUniqueInput!]
  update: [RunnerUpdateWithoutTaskWhitelistedInput!]
  upsert: [RunnerUpsertWithoutTaskWhitelistedInput!]
}

input RunnerUpdateWithoutSourceBlacklistedDataInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceUpdateManyWithoutWhitelistInput
  taskWhitelisted: WorkflowTaskUpdateManyWithoutWhitelistInput
  taskBlacklisted: WorkflowTaskUpdateManyWithoutBlacklistInput
}

input RunnerUpdateWithoutSourceBlacklistedInput {
  where: RunnerWhereUniqueInput!
  data: RunnerUpdateWithoutSourceBlacklistedDataInput!
}

input RunnerUpdateWithoutSourceWhitelistedDataInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceBlacklisted: WorkflowSourceUpdateManyWithoutBlacklistInput
  taskWhitelisted: WorkflowTaskUpdateManyWithoutWhitelistInput
  taskBlacklisted: WorkflowTaskUpdateManyWithoutBlacklistInput
}

input RunnerUpdateWithoutSourceWhitelistedInput {
  where: RunnerWhereUniqueInput!
  data: RunnerUpdateWithoutSourceWhitelistedDataInput!
}

input RunnerUpdateWithoutTaskBlacklistedDataInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceUpdateManyWithoutBlacklistInput
  taskWhitelisted: WorkflowTaskUpdateManyWithoutWhitelistInput
}

input RunnerUpdateWithoutTaskBlacklistedInput {
  where: RunnerWhereUniqueInput!
  data: RunnerUpdateWithoutTaskBlacklistedDataInput!
}

input RunnerUpdateWithoutTaskWhitelistedDataInput {
  publicKey: String
  stake: Float
  reliability: Float
  sourceWhitelisted: WorkflowSourceUpdateManyWithoutWhitelistInput
  sourceBlacklisted: WorkflowSourceUpdateManyWithoutBlacklistInput
  taskBlacklisted: WorkflowTaskUpdateManyWithoutBlacklistInput
}

input RunnerUpdateWithoutTaskWhitelistedInput {
  where: RunnerWhereUniqueInput!
  data: RunnerUpdateWithoutTaskWhitelistedDataInput!
}

input RunnerUpsertWithoutSourceBlacklistedInput {
  where: RunnerWhereUniqueInput!
  update: RunnerUpdateWithoutSourceBlacklistedDataInput!
  create: RunnerCreateWithoutSourceBlacklistedInput!
}

input RunnerUpsertWithoutSourceWhitelistedInput {
  where: RunnerWhereUniqueInput!
  update: RunnerUpdateWithoutSourceWhitelistedDataInput!
  create: RunnerCreateWithoutSourceWhitelistedInput!
}

input RunnerUpsertWithoutTaskBlacklistedInput {
  where: RunnerWhereUniqueInput!
  update: RunnerUpdateWithoutTaskBlacklistedDataInput!
  create: RunnerCreateWithoutTaskBlacklistedInput!
}

input RunnerUpsertWithoutTaskWhitelistedInput {
  where: RunnerWhereUniqueInput!
  update: RunnerUpdateWithoutTaskWhitelistedDataInput!
  create: RunnerCreateWithoutTaskWhitelistedInput!
}

input RunnerWhereInput {
  AND: [RunnerWhereInput!]
  OR: [RunnerWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  publicKey: String
  publicKey_not: String
  publicKey_in: [String!]
  publicKey_not_in: [String!]
  publicKey_lt: String
  publicKey_lte: String
  publicKey_gt: String
  publicKey_gte: String
  publicKey_contains: String
  publicKey_not_contains: String
  publicKey_starts_with: String
  publicKey_not_starts_with: String
  publicKey_ends_with: String
  publicKey_not_ends_with: String
  stake: Float
  stake_not: Float
  stake_in: [Float!]
  stake_not_in: [Float!]
  stake_lt: Float
  stake_lte: Float
  stake_gt: Float
  stake_gte: Float
  reliability: Float
  reliability_not: Float
  reliability_in: [Float!]
  reliability_not_in: [Float!]
  reliability_lt: Float
  reliability_lte: Float
  reliability_gt: Float
  reliability_gte: Float
  sourceWhitelisted_every: WorkflowSourceWhereInput
  sourceWhitelisted_some: WorkflowSourceWhereInput
  sourceWhitelisted_none: WorkflowSourceWhereInput
  sourceBlacklisted_every: WorkflowSourceWhereInput
  sourceBlacklisted_some: WorkflowSourceWhereInput
  sourceBlacklisted_none: WorkflowSourceWhereInput
  taskWhitelisted_every: WorkflowTaskWhereInput
  taskWhitelisted_some: WorkflowTaskWhereInput
  taskWhitelisted_none: WorkflowTaskWhereInput
  taskBlacklisted_every: WorkflowTaskWhereInput
  taskBlacklisted_some: WorkflowTaskWhereInput
  taskBlacklisted_none: WorkflowTaskWhereInput
}

input RunnerWhereUniqueInput {
  id: ID
  publicKey: String
}

type ServiceConnection {
  pageInfo: PageInfo!
  edges: [ServiceEdge]!
  aggregate: AggregateService!
}

input ServiceCreateInput {
  title: String!
  description: String
  events: EventCreateManyWithoutServiceInput
  tasks: TaskCreateManyWithoutServiceInput
}

input ServiceCreateOneWithoutEventsInput {
  create: ServiceCreateWithoutEventsInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateOneWithoutTasksInput {
  create: ServiceCreateWithoutTasksInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateWithoutEventsInput {
  title: String!
  description: String
  tasks: TaskCreateManyWithoutServiceInput
}

input ServiceCreateWithoutTasksInput {
  title: String!
  description: String
  events: EventCreateManyWithoutServiceInput
}

type ServiceEdge {
  node: Service!
  cursor: String!
}

enum ServiceOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ServicePreviousValues {
  id: ID!
  title: String!
  description: String
}

type ServiceSubscriptionPayload {
  mutation: MutationType!
  node: Service
  updatedFields: [String!]
  previousValues: ServicePreviousValues
}

input ServiceSubscriptionWhereInput {
  AND: [ServiceSubscriptionWhereInput!]
  OR: [ServiceSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceWhereInput
}

input ServiceUpdateInput {
  title: String
  description: String
  events: EventUpdateManyWithoutServiceInput
  tasks: TaskUpdateManyWithoutServiceInput
}

input ServiceUpdateOneWithoutEventsInput {
  create: ServiceCreateWithoutEventsInput
  connect: ServiceWhereUniqueInput
  disconnect: ServiceWhereUniqueInput
  delete: ServiceWhereUniqueInput
  update: ServiceUpdateWithoutEventsInput
  upsert: ServiceUpsertWithoutEventsInput
}

input ServiceUpdateOneWithoutTasksInput {
  create: ServiceCreateWithoutTasksInput
  connect: ServiceWhereUniqueInput
  disconnect: ServiceWhereUniqueInput
  delete: ServiceWhereUniqueInput
  update: ServiceUpdateWithoutTasksInput
  upsert: ServiceUpsertWithoutTasksInput
}

input ServiceUpdateWithoutEventsDataInput {
  title: String
  description: String
  tasks: TaskUpdateManyWithoutServiceInput
}

input ServiceUpdateWithoutEventsInput {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateWithoutEventsDataInput!
}

input ServiceUpdateWithoutTasksDataInput {
  title: String
  description: String
  events: EventUpdateManyWithoutServiceInput
}

input ServiceUpdateWithoutTasksInput {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateWithoutTasksDataInput!
}

input ServiceUpsertWithoutEventsInput {
  where: ServiceWhereUniqueInput!
  update: ServiceUpdateWithoutEventsDataInput!
  create: ServiceCreateWithoutEventsInput!
}

input ServiceUpsertWithoutTasksInput {
  where: ServiceWhereUniqueInput!
  update: ServiceUpdateWithoutTasksDataInput!
  create: ServiceCreateWithoutTasksInput!
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  tasks_every: TaskWhereInput
  tasks_some: TaskWhereInput
  tasks_none: TaskWhereInput
}

input ServiceWhereUniqueInput {
  id: ID
}

type Subscription {
  runner(where: RunnerSubscriptionWhereInput): RunnerSubscriptionPayload
  parameter(where: ParameterSubscriptionWhereInput): ParameterSubscriptionPayload
  filterDefinition(where: FilterDefinitionSubscriptionWhereInput): FilterDefinitionSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  task(where: TaskSubscriptionWhereInput): TaskSubscriptionPayload
  service(where: ServiceSubscriptionWhereInput): ServiceSubscriptionPayload
  workflowConstant(where: WorkflowConstantSubscriptionWhereInput): WorkflowConstantSubscriptionPayload
  workflowSource(where: WorkflowSourceSubscriptionWhereInput): WorkflowSourceSubscriptionPayload
  workflowTask(where: WorkflowTaskSubscriptionWhereInput): WorkflowTaskSubscriptionPayload
  workflowResult(where: WorkflowResultSubscriptionWhereInput): WorkflowResultSubscriptionPayload
  workflow(where: WorkflowSubscriptionWhereInput): WorkflowSubscriptionPayload
  workflowExecution(where: WorkflowExecutionSubscriptionWhereInput): WorkflowExecutionSubscriptionPayload
  workflowTaskExecution(where: WorkflowTaskExecutionSubscriptionWhereInput): WorkflowTaskExecutionSubscriptionPayload
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]!
  aggregate: AggregateTask!
}

input TaskCreateInput {
  title: String!
  description: String
  arguments: ParameterCreateManyInput
  service: ServiceCreateOneWithoutTasksInput!
}

input TaskCreateManyWithoutServiceInput {
  create: [TaskCreateWithoutServiceInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateOneInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
}

input TaskCreateWithoutServiceInput {
  title: String!
  description: String
  arguments: ParameterCreateManyInput
}

type TaskEdge {
  node: Task!
  cursor: String!
}

enum TaskOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TaskPreviousValues {
  id: ID!
  title: String!
  description: String
}

type TaskSubscriptionPayload {
  mutation: MutationType!
  node: Task
  updatedFields: [String!]
  previousValues: TaskPreviousValues
}

input TaskSubscriptionWhereInput {
  AND: [TaskSubscriptionWhereInput!]
  OR: [TaskSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TaskWhereInput
}

input TaskUpdateInput {
  title: String
  description: String
  arguments: ParameterUpdateManyInput
  service: ServiceUpdateOneWithoutTasksInput
}

input TaskUpdateManyWithoutServiceInput {
  create: [TaskCreateWithoutServiceInput!]
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  delete: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithoutServiceInput!]
  upsert: [TaskUpsertWithoutServiceInput!]
}

input TaskUpdateOneInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
  disconnect: TaskWhereUniqueInput
  delete: TaskWhereUniqueInput
}

input TaskUpdateWithoutServiceDataInput {
  title: String
  description: String
  arguments: ParameterUpdateManyInput
}

input TaskUpdateWithoutServiceInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateWithoutServiceDataInput!
}

input TaskUpsertWithoutServiceInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateWithoutServiceDataInput!
  create: TaskCreateWithoutServiceInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  arguments_every: ParameterWhereInput
  arguments_some: ParameterWhereInput
  arguments_none: ParameterWhereInput
  service: ServiceWhereInput
}

input TaskWhereUniqueInput {
  id: ID
}

enum TYPE {
  FLOAT
  INTEGER
  STRING
  BOOLEAN
  DATE
  OBJECT
}

type WorkflowConnection {
  pageInfo: PageInfo!
  edges: [WorkflowEdge]!
  aggregate: AggregateWorkflow!
}

type WorkflowConstantConnection {
  pageInfo: PageInfo!
  edges: [WorkflowConstantEdge]!
  aggregate: AggregateWorkflowConstant!
}

input WorkflowConstantCreateInput {
  value: String!
}

type WorkflowConstantEdge {
  node: WorkflowConstant!
  cursor: String!
}

enum WorkflowConstantOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowConstantPreviousValues {
  id: ID!
  value: String!
}

type WorkflowConstantSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowConstant
  updatedFields: [String!]
  previousValues: WorkflowConstantPreviousValues
}

input WorkflowConstantSubscriptionWhereInput {
  AND: [WorkflowConstantSubscriptionWhereInput!]
  OR: [WorkflowConstantSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowConstantWhereInput
}

input WorkflowConstantUpdateInput {
  value: String
}

input WorkflowConstantWhereInput {
  AND: [WorkflowConstantWhereInput!]
  OR: [WorkflowConstantWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
}

input WorkflowConstantWhereUniqueInput {
  id: ID
}

input WorkflowCreateInput {
  title: String!
  description: String
  source: WorkflowSourceCreateOneInput!
  tasks: WorkflowTaskCreateManyInput
  executions: WorkflowExecutionCreateManyInput
}

type WorkflowEdge {
  node: Workflow!
  cursor: String!
}

type WorkflowExecutionConnection {
  pageInfo: PageInfo!
  edges: [WorkflowExecutionEdge]!
  aggregate: AggregateWorkflowExecution!
}

input WorkflowExecutionCreateInput {
  duration: Int!
  fee: Int!
  taskExecutions: WorkflowTaskExecutionCreateManyInput
}

input WorkflowExecutionCreateManyInput {
  create: [WorkflowExecutionCreateInput!]
  connect: [WorkflowExecutionWhereUniqueInput!]
}

type WorkflowExecutionEdge {
  node: WorkflowExecution!
  cursor: String!
}

enum WorkflowExecutionOrderByInput {
  id_ASC
  id_DESC
  duration_ASC
  duration_DESC
  fee_ASC
  fee_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowExecutionPreviousValues {
  id: ID!
  duration: Int!
  fee: Int!
}

type WorkflowExecutionSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowExecution
  updatedFields: [String!]
  previousValues: WorkflowExecutionPreviousValues
}

input WorkflowExecutionSubscriptionWhereInput {
  AND: [WorkflowExecutionSubscriptionWhereInput!]
  OR: [WorkflowExecutionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowExecutionWhereInput
}

input WorkflowExecutionUpdateInput {
  duration: Int
  fee: Int
  taskExecutions: WorkflowTaskExecutionUpdateManyInput
}

input WorkflowExecutionUpdateManyInput {
  create: [WorkflowExecutionCreateInput!]
  connect: [WorkflowExecutionWhereUniqueInput!]
  disconnect: [WorkflowExecutionWhereUniqueInput!]
  delete: [WorkflowExecutionWhereUniqueInput!]
}

input WorkflowExecutionWhereInput {
  AND: [WorkflowExecutionWhereInput!]
  OR: [WorkflowExecutionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  fee: Int
  fee_not: Int
  fee_in: [Int!]
  fee_not_in: [Int!]
  fee_lt: Int
  fee_lte: Int
  fee_gt: Int
  fee_gte: Int
  taskExecutions_every: WorkflowTaskExecutionWhereInput
  taskExecutions_some: WorkflowTaskExecutionWhereInput
  taskExecutions_none: WorkflowTaskExecutionWhereInput
}

input WorkflowExecutionWhereUniqueInput {
  id: ID
}

enum WorkflowOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowPreviousValues {
  id: ID!
  title: String!
  description: String
}

type WorkflowResultConnection {
  pageInfo: PageInfo!
  edges: [WorkflowResultEdge]!
  aggregate: AggregateWorkflowResult!
}

input WorkflowResultCreateInput {
  value: String!
  reference: ParameterCreateOneInput!
}

input WorkflowResultCreateManyInput {
  create: [WorkflowResultCreateInput!]
  connect: [WorkflowResultWhereUniqueInput!]
}

type WorkflowResultEdge {
  node: WorkflowResult!
  cursor: String!
}

enum WorkflowResultOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowResultPreviousValues {
  id: ID!
  value: String!
}

type WorkflowResultSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowResult
  updatedFields: [String!]
  previousValues: WorkflowResultPreviousValues
}

input WorkflowResultSubscriptionWhereInput {
  AND: [WorkflowResultSubscriptionWhereInput!]
  OR: [WorkflowResultSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowResultWhereInput
}

input WorkflowResultUpdateInput {
  value: String
  reference: ParameterUpdateOneInput
}

input WorkflowResultUpdateManyInput {
  create: [WorkflowResultCreateInput!]
  connect: [WorkflowResultWhereUniqueInput!]
  disconnect: [WorkflowResultWhereUniqueInput!]
  delete: [WorkflowResultWhereUniqueInput!]
}

input WorkflowResultWhereInput {
  AND: [WorkflowResultWhereInput!]
  OR: [WorkflowResultWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  reference: ParameterWhereInput
}

input WorkflowResultWhereUniqueInput {
  id: ID
}

type WorkflowSourceConnection {
  pageInfo: PageInfo!
  edges: [WorkflowSourceEdge]!
  aggregate: AggregateWorkflowSource!
}

input WorkflowSourceCreateInput {
  whitelist: RunnerCreateManyWithoutSourceWhitelistedInput
  blacklist: RunnerCreateManyWithoutSourceBlacklistedInput
  event: EventCreateOneInput!
  filters: FilterDefinitionCreateManyInput
}

input WorkflowSourceCreateManyWithoutBlacklistInput {
  create: [WorkflowSourceCreateWithoutBlacklistInput!]
  connect: [WorkflowSourceWhereUniqueInput!]
}

input WorkflowSourceCreateManyWithoutWhitelistInput {
  create: [WorkflowSourceCreateWithoutWhitelistInput!]
  connect: [WorkflowSourceWhereUniqueInput!]
}

input WorkflowSourceCreateOneInput {
  create: WorkflowSourceCreateInput
  connect: WorkflowSourceWhereUniqueInput
}

input WorkflowSourceCreateWithoutBlacklistInput {
  whitelist: RunnerCreateManyWithoutSourceWhitelistedInput
  event: EventCreateOneInput!
  filters: FilterDefinitionCreateManyInput
}

input WorkflowSourceCreateWithoutWhitelistInput {
  blacklist: RunnerCreateManyWithoutSourceBlacklistedInput
  event: EventCreateOneInput!
  filters: FilterDefinitionCreateManyInput
}

type WorkflowSourceEdge {
  node: WorkflowSource!
  cursor: String!
}

enum WorkflowSourceOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowSourcePreviousValues {
  id: ID!
}

type WorkflowSourceSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowSource
  updatedFields: [String!]
  previousValues: WorkflowSourcePreviousValues
}

input WorkflowSourceSubscriptionWhereInput {
  AND: [WorkflowSourceSubscriptionWhereInput!]
  OR: [WorkflowSourceSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowSourceWhereInput
}

input WorkflowSourceUpdateInput {
  whitelist: RunnerUpdateManyWithoutSourceWhitelistedInput
  blacklist: RunnerUpdateManyWithoutSourceBlacklistedInput
  event: EventUpdateOneInput
  filters: FilterDefinitionUpdateManyInput
}

input WorkflowSourceUpdateManyWithoutBlacklistInput {
  create: [WorkflowSourceCreateWithoutBlacklistInput!]
  connect: [WorkflowSourceWhereUniqueInput!]
  disconnect: [WorkflowSourceWhereUniqueInput!]
  delete: [WorkflowSourceWhereUniqueInput!]
  update: [WorkflowSourceUpdateWithoutBlacklistInput!]
  upsert: [WorkflowSourceUpsertWithoutBlacklistInput!]
}

input WorkflowSourceUpdateManyWithoutWhitelistInput {
  create: [WorkflowSourceCreateWithoutWhitelistInput!]
  connect: [WorkflowSourceWhereUniqueInput!]
  disconnect: [WorkflowSourceWhereUniqueInput!]
  delete: [WorkflowSourceWhereUniqueInput!]
  update: [WorkflowSourceUpdateWithoutWhitelistInput!]
  upsert: [WorkflowSourceUpsertWithoutWhitelistInput!]
}

input WorkflowSourceUpdateOneInput {
  create: WorkflowSourceCreateInput
  connect: WorkflowSourceWhereUniqueInput
  disconnect: WorkflowSourceWhereUniqueInput
  delete: WorkflowSourceWhereUniqueInput
}

input WorkflowSourceUpdateWithoutBlacklistDataInput {
  whitelist: RunnerUpdateManyWithoutSourceWhitelistedInput
  event: EventUpdateOneInput
  filters: FilterDefinitionUpdateManyInput
}

input WorkflowSourceUpdateWithoutBlacklistInput {
  where: WorkflowSourceWhereUniqueInput!
  data: WorkflowSourceUpdateWithoutBlacklistDataInput!
}

input WorkflowSourceUpdateWithoutWhitelistDataInput {
  blacklist: RunnerUpdateManyWithoutSourceBlacklistedInput
  event: EventUpdateOneInput
  filters: FilterDefinitionUpdateManyInput
}

input WorkflowSourceUpdateWithoutWhitelistInput {
  where: WorkflowSourceWhereUniqueInput!
  data: WorkflowSourceUpdateWithoutWhitelistDataInput!
}

input WorkflowSourceUpsertWithoutBlacklistInput {
  where: WorkflowSourceWhereUniqueInput!
  update: WorkflowSourceUpdateWithoutBlacklistDataInput!
  create: WorkflowSourceCreateWithoutBlacklistInput!
}

input WorkflowSourceUpsertWithoutWhitelistInput {
  where: WorkflowSourceWhereUniqueInput!
  update: WorkflowSourceUpdateWithoutWhitelistDataInput!
  create: WorkflowSourceCreateWithoutWhitelistInput!
}

input WorkflowSourceWhereInput {
  AND: [WorkflowSourceWhereInput!]
  OR: [WorkflowSourceWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  whitelist_every: RunnerWhereInput
  whitelist_some: RunnerWhereInput
  whitelist_none: RunnerWhereInput
  blacklist_every: RunnerWhereInput
  blacklist_some: RunnerWhereInput
  blacklist_none: RunnerWhereInput
  event: EventWhereInput
  filters_every: FilterDefinitionWhereInput
  filters_some: FilterDefinitionWhereInput
  filters_none: FilterDefinitionWhereInput
}

input WorkflowSourceWhereUniqueInput {
  id: ID
}

type WorkflowSubscriptionPayload {
  mutation: MutationType!
  node: Workflow
  updatedFields: [String!]
  previousValues: WorkflowPreviousValues
}

input WorkflowSubscriptionWhereInput {
  AND: [WorkflowSubscriptionWhereInput!]
  OR: [WorkflowSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowWhereInput
}

type WorkflowTaskConnection {
  pageInfo: PageInfo!
  edges: [WorkflowTaskEdge]!
  aggregate: AggregateWorkflowTask!
}

input WorkflowTaskCreateInput {
  whitelist: RunnerCreateManyWithoutTaskWhitelistedInput
  blacklist: RunnerCreateManyWithoutTaskBlacklistedInput
  task: TaskCreateOneInput!
  parameters: WorkflowResultCreateManyInput
  parents: WorkflowTaskCreateManyWithoutParentsInput
  children: WorkflowTaskCreateManyWithoutChildrenInput
}

input WorkflowTaskCreateManyInput {
  create: [WorkflowTaskCreateInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
}

input WorkflowTaskCreateManyWithoutBlacklistInput {
  create: [WorkflowTaskCreateWithoutBlacklistInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
}

input WorkflowTaskCreateManyWithoutChildrenInput {
  create: [WorkflowTaskCreateWithoutChildrenInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
}

input WorkflowTaskCreateManyWithoutParentsInput {
  create: [WorkflowTaskCreateWithoutParentsInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
}

input WorkflowTaskCreateManyWithoutWhitelistInput {
  create: [WorkflowTaskCreateWithoutWhitelistInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
}

input WorkflowTaskCreateWithoutBlacklistInput {
  whitelist: RunnerCreateManyWithoutTaskWhitelistedInput
  task: TaskCreateOneInput!
  parameters: WorkflowResultCreateManyInput
  parents: WorkflowTaskCreateManyWithoutParentsInput
  children: WorkflowTaskCreateManyWithoutChildrenInput
}

input WorkflowTaskCreateWithoutChildrenInput {
  whitelist: RunnerCreateManyWithoutTaskWhitelistedInput
  blacklist: RunnerCreateManyWithoutTaskBlacklistedInput
  task: TaskCreateOneInput!
  parameters: WorkflowResultCreateManyInput
  parents: WorkflowTaskCreateManyWithoutParentsInput
}

input WorkflowTaskCreateWithoutParentsInput {
  whitelist: RunnerCreateManyWithoutTaskWhitelistedInput
  blacklist: RunnerCreateManyWithoutTaskBlacklistedInput
  task: TaskCreateOneInput!
  parameters: WorkflowResultCreateManyInput
  children: WorkflowTaskCreateManyWithoutChildrenInput
}

input WorkflowTaskCreateWithoutWhitelistInput {
  blacklist: RunnerCreateManyWithoutTaskBlacklistedInput
  task: TaskCreateOneInput!
  parameters: WorkflowResultCreateManyInput
  parents: WorkflowTaskCreateManyWithoutParentsInput
  children: WorkflowTaskCreateManyWithoutChildrenInput
}

type WorkflowTaskEdge {
  node: WorkflowTask!
  cursor: String!
}

type WorkflowTaskExecutionConnection {
  pageInfo: PageInfo!
  edges: [WorkflowTaskExecutionEdge]!
  aggregate: AggregateWorkflowTaskExecution!
}

input WorkflowTaskExecutionCreateInput {
  duration: Int!
  fee: Int!
  results: WorkflowResultCreateManyInput
}

input WorkflowTaskExecutionCreateManyInput {
  create: [WorkflowTaskExecutionCreateInput!]
  connect: [WorkflowTaskExecutionWhereUniqueInput!]
}

type WorkflowTaskExecutionEdge {
  node: WorkflowTaskExecution!
  cursor: String!
}

enum WorkflowTaskExecutionOrderByInput {
  id_ASC
  id_DESC
  duration_ASC
  duration_DESC
  fee_ASC
  fee_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowTaskExecutionPreviousValues {
  id: ID!
  duration: Int!
  fee: Int!
}

type WorkflowTaskExecutionSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowTaskExecution
  updatedFields: [String!]
  previousValues: WorkflowTaskExecutionPreviousValues
}

input WorkflowTaskExecutionSubscriptionWhereInput {
  AND: [WorkflowTaskExecutionSubscriptionWhereInput!]
  OR: [WorkflowTaskExecutionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowTaskExecutionWhereInput
}

input WorkflowTaskExecutionUpdateInput {
  duration: Int
  fee: Int
  results: WorkflowResultUpdateManyInput
}

input WorkflowTaskExecutionUpdateManyInput {
  create: [WorkflowTaskExecutionCreateInput!]
  connect: [WorkflowTaskExecutionWhereUniqueInput!]
  disconnect: [WorkflowTaskExecutionWhereUniqueInput!]
  delete: [WorkflowTaskExecutionWhereUniqueInput!]
}

input WorkflowTaskExecutionWhereInput {
  AND: [WorkflowTaskExecutionWhereInput!]
  OR: [WorkflowTaskExecutionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  fee: Int
  fee_not: Int
  fee_in: [Int!]
  fee_not_in: [Int!]
  fee_lt: Int
  fee_lte: Int
  fee_gt: Int
  fee_gte: Int
  results_every: WorkflowResultWhereInput
  results_some: WorkflowResultWhereInput
  results_none: WorkflowResultWhereInput
}

input WorkflowTaskExecutionWhereUniqueInput {
  id: ID
}

enum WorkflowTaskOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkflowTaskPreviousValues {
  id: ID!
}

type WorkflowTaskSubscriptionPayload {
  mutation: MutationType!
  node: WorkflowTask
  updatedFields: [String!]
  previousValues: WorkflowTaskPreviousValues
}

input WorkflowTaskSubscriptionWhereInput {
  AND: [WorkflowTaskSubscriptionWhereInput!]
  OR: [WorkflowTaskSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkflowTaskWhereInput
}

input WorkflowTaskUpdateInput {
  whitelist: RunnerUpdateManyWithoutTaskWhitelistedInput
  blacklist: RunnerUpdateManyWithoutTaskBlacklistedInput
  task: TaskUpdateOneInput
  parameters: WorkflowResultUpdateManyInput
  parents: WorkflowTaskUpdateManyWithoutParentsInput
  children: WorkflowTaskUpdateManyWithoutChildrenInput
}

input WorkflowTaskUpdateManyInput {
  create: [WorkflowTaskCreateInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
  disconnect: [WorkflowTaskWhereUniqueInput!]
  delete: [WorkflowTaskWhereUniqueInput!]
}

input WorkflowTaskUpdateManyWithoutBlacklistInput {
  create: [WorkflowTaskCreateWithoutBlacklistInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
  disconnect: [WorkflowTaskWhereUniqueInput!]
  delete: [WorkflowTaskWhereUniqueInput!]
  update: [WorkflowTaskUpdateWithoutBlacklistInput!]
  upsert: [WorkflowTaskUpsertWithoutBlacklistInput!]
}

input WorkflowTaskUpdateManyWithoutChildrenInput {
  create: [WorkflowTaskCreateWithoutChildrenInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
  disconnect: [WorkflowTaskWhereUniqueInput!]
  delete: [WorkflowTaskWhereUniqueInput!]
  update: [WorkflowTaskUpdateWithoutChildrenInput!]
  upsert: [WorkflowTaskUpsertWithoutChildrenInput!]
}

input WorkflowTaskUpdateManyWithoutParentsInput {
  create: [WorkflowTaskCreateWithoutParentsInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
  disconnect: [WorkflowTaskWhereUniqueInput!]
  delete: [WorkflowTaskWhereUniqueInput!]
  update: [WorkflowTaskUpdateWithoutParentsInput!]
  upsert: [WorkflowTaskUpsertWithoutParentsInput!]
}

input WorkflowTaskUpdateManyWithoutWhitelistInput {
  create: [WorkflowTaskCreateWithoutWhitelistInput!]
  connect: [WorkflowTaskWhereUniqueInput!]
  disconnect: [WorkflowTaskWhereUniqueInput!]
  delete: [WorkflowTaskWhereUniqueInput!]
  update: [WorkflowTaskUpdateWithoutWhitelistInput!]
  upsert: [WorkflowTaskUpsertWithoutWhitelistInput!]
}

input WorkflowTaskUpdateWithoutBlacklistDataInput {
  whitelist: RunnerUpdateManyWithoutTaskWhitelistedInput
  task: TaskUpdateOneInput
  parameters: WorkflowResultUpdateManyInput
  parents: WorkflowTaskUpdateManyWithoutParentsInput
  children: WorkflowTaskUpdateManyWithoutChildrenInput
}

input WorkflowTaskUpdateWithoutBlacklistInput {
  where: WorkflowTaskWhereUniqueInput!
  data: WorkflowTaskUpdateWithoutBlacklistDataInput!
}

input WorkflowTaskUpdateWithoutChildrenDataInput {
  whitelist: RunnerUpdateManyWithoutTaskWhitelistedInput
  blacklist: RunnerUpdateManyWithoutTaskBlacklistedInput
  task: TaskUpdateOneInput
  parameters: WorkflowResultUpdateManyInput
  parents: WorkflowTaskUpdateManyWithoutParentsInput
}

input WorkflowTaskUpdateWithoutChildrenInput {
  where: WorkflowTaskWhereUniqueInput!
  data: WorkflowTaskUpdateWithoutChildrenDataInput!
}

input WorkflowTaskUpdateWithoutParentsDataInput {
  whitelist: RunnerUpdateManyWithoutTaskWhitelistedInput
  blacklist: RunnerUpdateManyWithoutTaskBlacklistedInput
  task: TaskUpdateOneInput
  parameters: WorkflowResultUpdateManyInput
  children: WorkflowTaskUpdateManyWithoutChildrenInput
}

input WorkflowTaskUpdateWithoutParentsInput {
  where: WorkflowTaskWhereUniqueInput!
  data: WorkflowTaskUpdateWithoutParentsDataInput!
}

input WorkflowTaskUpdateWithoutWhitelistDataInput {
  blacklist: RunnerUpdateManyWithoutTaskBlacklistedInput
  task: TaskUpdateOneInput
  parameters: WorkflowResultUpdateManyInput
  parents: WorkflowTaskUpdateManyWithoutParentsInput
  children: WorkflowTaskUpdateManyWithoutChildrenInput
}

input WorkflowTaskUpdateWithoutWhitelistInput {
  where: WorkflowTaskWhereUniqueInput!
  data: WorkflowTaskUpdateWithoutWhitelistDataInput!
}

input WorkflowTaskUpsertWithoutBlacklistInput {
  where: WorkflowTaskWhereUniqueInput!
  update: WorkflowTaskUpdateWithoutBlacklistDataInput!
  create: WorkflowTaskCreateWithoutBlacklistInput!
}

input WorkflowTaskUpsertWithoutChildrenInput {
  where: WorkflowTaskWhereUniqueInput!
  update: WorkflowTaskUpdateWithoutChildrenDataInput!
  create: WorkflowTaskCreateWithoutChildrenInput!
}

input WorkflowTaskUpsertWithoutParentsInput {
  where: WorkflowTaskWhereUniqueInput!
  update: WorkflowTaskUpdateWithoutParentsDataInput!
  create: WorkflowTaskCreateWithoutParentsInput!
}

input WorkflowTaskUpsertWithoutWhitelistInput {
  where: WorkflowTaskWhereUniqueInput!
  update: WorkflowTaskUpdateWithoutWhitelistDataInput!
  create: WorkflowTaskCreateWithoutWhitelistInput!
}

input WorkflowTaskWhereInput {
  AND: [WorkflowTaskWhereInput!]
  OR: [WorkflowTaskWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  whitelist_every: RunnerWhereInput
  whitelist_some: RunnerWhereInput
  whitelist_none: RunnerWhereInput
  blacklist_every: RunnerWhereInput
  blacklist_some: RunnerWhereInput
  blacklist_none: RunnerWhereInput
  task: TaskWhereInput
  parameters_every: WorkflowResultWhereInput
  parameters_some: WorkflowResultWhereInput
  parameters_none: WorkflowResultWhereInput
  parents_every: WorkflowTaskWhereInput
  parents_some: WorkflowTaskWhereInput
  parents_none: WorkflowTaskWhereInput
  children_every: WorkflowTaskWhereInput
  children_some: WorkflowTaskWhereInput
  children_none: WorkflowTaskWhereInput
}

input WorkflowTaskWhereUniqueInput {
  id: ID
}

input WorkflowUpdateInput {
  title: String
  description: String
  source: WorkflowSourceUpdateOneInput
  tasks: WorkflowTaskUpdateManyInput
  executions: WorkflowExecutionUpdateManyInput
}

input WorkflowWhereInput {
  AND: [WorkflowWhereInput!]
  OR: [WorkflowWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  source: WorkflowSourceWhereInput
  tasks_every: WorkflowTaskWhereInput
  tasks_some: WorkflowTaskWhereInput
  tasks_none: WorkflowTaskWhereInput
  executions_every: WorkflowExecutionWhereInput
  executions_some: WorkflowExecutionWhereInput
  executions_none: WorkflowExecutionWhereInput
}

input WorkflowWhereUniqueInput {
  id: ID
}
